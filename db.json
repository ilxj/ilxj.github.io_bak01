{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1501516478000},{"_id":"source/CNAME","hash":"c474a4209813a3ee0057c26df862436a39355358","modified":1501516478000},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1501516478000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501516478000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501516478000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501516478000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1501516478000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501516478000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501516478000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501516478000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501516478000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1501516478000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501516478000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501516478000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1501516478000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1501516478000},{"_id":"themes/next/_config.yml","hash":"767e8a1ab957441f415ccd49753390dcc14443e8","modified":1501613553000},{"_id":"source/_posts/CC1101笔记.md","hash":"b2f6e6f7dbd8b4752c9419e3ad3bd84552989d67","modified":1501606175000},{"_id":"source/_posts/Hexo第三方评论插件引用.md","hash":"7cafc7a2c9e0d864668bdf8065c900f1aa6bc5b2","modified":1501606175000},{"_id":"source/_posts/Linux之CoreDump.md","hash":"37dd63f34fac6597ddd7fcdb71e2696bff88ce37","modified":1501606175000},{"_id":"source/about/index.md","hash":"aa59aecf802c714eab9773b92332667893fdc5ff","modified":1501611658000},{"_id":"source/_posts/Linux之Socket关键.md","hash":"0dd48147522b6499edf86601e3f8dd258db053eb","modified":1501606175000},{"_id":"source/_posts/Linux之errno表.md","hash":"f45eb4bc2caf9d2e679b9664ee267c4b7aa7ad7f","modified":1501606175000},{"_id":"source/_posts/Linux之实用技能 .md","hash":"95c891726601d94c7f461c3bfdbed0c916217937","modified":1501606175000},{"_id":"source/_posts/Linux之服务安装.md","hash":"7c8bbcc543573ff7f813f2b1dee330f2232605cc","modified":1501516478000},{"_id":"source/_posts/Lua之 loadfile ,dofile, loadstring，require.md","hash":"9f05c4973527d82540a531996210426e5cbd0248","modified":1501516478000},{"_id":"source/_posts/PC小技巧.md","hash":"6a7818368e9f86f244e455c6595736a4d52ca8b1","modified":1501516478000},{"_id":"source/_posts/Github-Blog-搭建入门.md","hash":"e232fdb53421b4b56b10988c726244ae426c810e","modified":1501516478000},{"_id":"source/_posts/SI4432.md","hash":"d0656b867b05474d55c4c10073edc37ff64777bf","modified":1501516478000},{"_id":"source/_posts/STM32 命名规则.md","hash":"a6c1ef5afeedc95d2aefc8dcf75865555b990d44","modified":1501516478000},{"_id":"source/_posts/STM32---ADC.md","hash":"51d480717f2328a3c8967725130c5b7a82da1c14","modified":1501516478000},{"_id":"source/_posts/STM8 命名规则.md","hash":"f1033b4e3f06899ec66d973583d2f77c902cce0f","modified":1501516478000},{"_id":"source/_posts/TcpDump.md","hash":"68c30a0a19b16b65e1fba27fed64f64ee9c17830","modified":1501516478000},{"_id":"source/_posts/hello-world.md","hash":"8fd300db35368a393d5a6905b5e826b4de68cc90","modified":1501606175000},{"_id":"source/_posts/WireShark 网络抓包.md","hash":"7d4b24ba9c49763cae328cd90e126ab0b39f31d6","modified":1501606175000},{"_id":"source/_posts/hexo自动备份教程.md","hash":"326aa22b7c625e8bfc5bde2503a833a658e10666","modified":1501606175000},{"_id":"source/_posts/linux 工具函数之网络工具函数.md","hash":"f3ab3c588dea839176dd866d659f712b24368df1","modified":1501516478000},{"_id":"source/_posts/tool.md","hash":"959c61e91397604df7cfa88ce0c6a7b98b2ebc17","modified":1501516478000},{"_id":"source/_posts/如何搭建自己平台的esp8266 编译器.md","hash":"452754ecbe302b8ab5a13f5dbf37dbcf2bfbe05e","modified":1501606639000},{"_id":"source/_posts/新奇.md","hash":"5b36fc6a75e635d79147020bdc90ae47f1fcfa08","modified":1501516478000},{"_id":"source/_posts/编辑器介绍.md","hash":"7410536f491f39cd5fe138020a85726e0c150cf0","modified":1501606175000},{"_id":"source/categories/index.md","hash":"1767bf157b975e2f0fa4f19064ab8aff7da6fdce","modified":1501516478000},{"_id":"source/tags/index.md","hash":"3ac71c3b57dc5f9e013a1b2ae17b1c38a240f148","modified":1501516478000},{"_id":"source/_posts/微信硬件.md","hash":"2ca133f945ee4bc59c4b3801143ecf3e56b6682f","modified":1501606175000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501516478000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501516478000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501516478000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501516478000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501516478000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501516478000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501516478000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501516478000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501516478000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1501516478000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1501516478000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501516478000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501516478000},{"_id":"themes/next/layout/_layout.swig","hash":"44fd254849beb3c2972395a27f0c0b53d5c881e8","modified":1501611759000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1501516478000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1501516478000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1501516478000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1501516478000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1501516478000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1501516478000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1501516478000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501516478000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501516478000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501516479000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501516479000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501516479000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516479000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501516478000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501516478000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1501516478000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1501516478000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1501516478000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1501516478000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1501516478000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1501516478000},{"_id":"themes/next/layout/_partials/article.ejs","hash":"714f1eedbdf7b2cc8d249cedb78da466d2c6f512","modified":1501606175000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1501516478000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a0390a0afa8c6a54cd205722642a8b88b8c3ebfa","modified":1501606175000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1501516478000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501516478000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501516478000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501516478000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501516478000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501516478000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501516478000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments.swig","hash":"f2347967027ba0973bef2c1638754762ed7b52d5","modified":1501606175000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501516478000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501516478000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501516478000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501516478000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501516478000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501516478000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501516478000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501516478000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501516478000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1501516478000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501516479000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1501516479000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501516479000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501516479000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501516479000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501516479000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501516479000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501516479000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501516479000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501516479000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501516479000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501516479000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501516479000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501516479000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501516479000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516478000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516478000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516478000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516478000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516478000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501516479000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501516478000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501516478000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501516478000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1501516478000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501516478000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501516478000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501516478000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501516478000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501516478000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501516478000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1501516478000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1501516478000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"44c7b38af69bb617c68b75dcb064756526c71612","modified":1501606175000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501516478000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501516478000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1501516478000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501516478000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501516478000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1501516478000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1501516478000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501516479000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1501516479000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"d22bf55dedcaeb0745a855c05f9907e9cd86f52a","modified":1501606175000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1501516479000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501516479000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501516479000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1501516479000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501516479000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501516479000},{"_id":"themes/next/source/js/src/love.js","hash":"9bc88a510f5cc032ed56a5b5a3856c0140cae833","modified":1501606175000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1501516479000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1501516479000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501516479000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1501516479000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501516479000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501516479000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501516479000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501516479000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501516479000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501516479000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501516478000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501516478000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501516478000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1501516478000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501516478000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501516478000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1501516478000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501516478000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501516478000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501516479000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501516479000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501516479000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501516479000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501516479000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501516479000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"c3d83f08d02a005711ae90437c51f78378bc5d1e","modified":1501606175000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1501516478000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1501516478000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501516479000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501516479000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501516479000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501516479000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501516479000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501516479000},{"_id":"public/sitemap.xml","hash":"817a6d6905344f1e58eecf97e6b1ce5b39a7259e","modified":1501646496784},{"_id":"public/about/index.html","hash":"f8e23748a7e8d4e7c7de63e636641fb65214e163","modified":1501646496861},{"_id":"public/categories/index.html","hash":"809e246997c98dcd1742b4256eee449bb2344b3c","modified":1501646496861},{"_id":"public/tags/index.html","hash":"f3ea539201f67d9a00a6a6f883f326aa230da159","modified":1501646496862},{"_id":"public/archives/page/5/index.html","hash":"32d00e1dcbe345ee42b0b5f2df39b4d6cb4c2a7d","modified":1501646496862},{"_id":"public/archives/2017/page/5/index.html","hash":"db77022f8be98ba3b0e941b3628cf6a78b3aa807","modified":1501646496862},{"_id":"public/archives/2017/04/index.html","hash":"c7317a0ed4ec0de877b9bae467cefcf9a3d0d193","modified":1501646496862},{"_id":"public/archives/2017/06/page/2/index.html","hash":"626ca0a1c970e5fc65ab5e7f2fa256225a2b0025","modified":1501646496862},{"_id":"public/archives/2017/07/index.html","hash":"115e6d04aebfe4cde09edfff784c229b966002d8","modified":1501646496862},{"_id":"public/archives/2017/08/index.html","hash":"22f8036493aa19f33f705187d02d16c0f450832b","modified":1501646496862},{"_id":"public/archives/2888/index.html","hash":"64a8fb2d19afba6fe1b0236d5bcf55adbf2acfe4","modified":1501646496863},{"_id":"public/archives/2888/03/index.html","hash":"7605c35969717646f51259dd3eb29cd9757e93c7","modified":1501646496863},{"_id":"public/categories/射频/index.html","hash":"90fadf7a7e5f8ac74b4a6be80753982954661ea3","modified":1501646496863},{"_id":"public/categories/工具/index.html","hash":"4cb9f22c827a490767d600ed97a88ec97f570489","modified":1501646496863},{"_id":"public/categories/新奇/index.html","hash":"128d8b5fc2c497a4403ca7e684715e3531e1a18a","modified":1501646496863},{"_id":"public/tags/工具/index.html","hash":"8a918aa9f6023dd5b8a11c46d918b1db0312e77d","modified":1501646496863},{"_id":"public/tags/工具/page/2/index.html","hash":"4e639101dc8dcf5ef06566845d94f042f6e7b0ec","modified":1501646496863},{"_id":"public/tags/hexo/index.html","hash":"9dd0b50bc2c2598b1b561c9eb8d3a4e848054954","modified":1501646496863},{"_id":"public/tags/Linux/index.html","hash":"23b870aa39426cc382d6cce829afcd6cbf40bc64","modified":1501646496863},{"_id":"public/tags/Linux/page/2/index.html","hash":"4ad6b7952c05518da886d60c9ed267040f62d2c9","modified":1501646496863},{"_id":"public/tags/无线/index.html","hash":"5443470c045795acc90322f50e3bd041d8b54630","modified":1501646496863},{"_id":"public/tags/433MHZ/index.html","hash":"461ae4368869aea0fea10187d37c1d8be44252f6","modified":1501646496863},{"_id":"public/tags/cc1101/index.html","hash":"c95841de21b86d4b9aa5132d378bf69d5d1685f0","modified":1501646496863},{"_id":"public/tags/网络/index.html","hash":"bd4bfe2ee4c2615c55b1d5ac14ca4638aff55c6a","modified":1501646496863},{"_id":"public/tags/lua/index.html","hash":"637cc8b41562d4e3e1a2e999ce703440b7e5326e","modified":1501646496863},{"_id":"public/tags/PC工具/index.html","hash":"fb5f149105d645e18d866a06576be6a352a7cab1","modified":1501646496863},{"_id":"public/tags/git/index.html","hash":"17b9a0ba40b2977e2c10ea2f5ca72cd8b71d60bc","modified":1501646496863},{"_id":"public/tags/SI4432/index.html","hash":"c0dd60abd2b584b9e6c98dfcbe939338257231d1","modified":1501646496863},{"_id":"public/tags/ST/index.html","hash":"f8313d7c3b64be0492d20ddfc3377bfef42ef57a","modified":1501646496863},{"_id":"public/tags/STM32/index.html","hash":"2103e1a3e62ab69025127c1c2aff163349201c40","modified":1501646496863},{"_id":"public/tags/ADC/index.html","hash":"fc526efcc9907a86ce6d17059d5b037df5dbbc95","modified":1501646496863},{"_id":"public/tags/STM8/index.html","hash":"978a35de74ca127bf9899223a9021bc984f54730","modified":1501646496864},{"_id":"public/tags/抓包工具/index.html","hash":"e92741d3e137df966e32f4366e0dd4f8ac6a8de0","modified":1501646496864},{"_id":"public/tags/tcp/index.html","hash":"336b1fc6b9ff856d859ca1c0ab1a9bbcda6a10ea","modified":1501646496864},{"_id":"public/tags/wireShark/index.html","hash":"cbcda164f57e217c50007e8ccc3fba29d9615d2a","modified":1501646496864},{"_id":"public/tags/WiFi/index.html","hash":"3688d14ff83719a214c89b2ce90e43cfb8019c79","modified":1501646496864},{"_id":"public/tags/esp8266/index.html","hash":"c54590c670343d7587b626407ffac430b887cdb2","modified":1501646496864},{"_id":"public/tags/esptool/index.html","hash":"6b68147372a3192e6bdc60c6b16ca55896ce6b2b","modified":1501646496864},{"_id":"public/tags/gcc/index.html","hash":"58b5adcbf8270ed88a1c93a19641e8947b2f470e","modified":1501646496864},{"_id":"public/tags/新奇/index.html","hash":"0911c27c099725112da51dda15fae3cdf678de5f","modified":1501646496864},{"_id":"public/tags/音乐/index.html","hash":"e65748a05c079a01f63697b8b060f096f9ff39e8","modified":1501646496864},{"_id":"public/tags/🎵/index.html","hash":"9b3475ec977a1e10c384bfbdcff04a1e50724eb4","modified":1501646496864},{"_id":"public/tags/IDE/index.html","hash":"62d76ae704576b76d392423b65a0013dd886e529","modified":1501646496864},{"_id":"public/tags/微信/index.html","hash":"70ccf0eb5d328c429da8b5cb88b0c02575937fa0","modified":1501646496864},{"_id":"public/tags/硬件/index.html","hash":"0dfbc189eb98857dda0bcfbc5f72ebcd919ad23a","modified":1501646496864},{"_id":"public/2888/03/28/新奇/index.html","hash":"1527919781550d2cb65a159b8839c3a776ca6b97","modified":1501646496864},{"_id":"public/2017/08/01/如何搭建自己平台的esp8266 编译器/index.html","hash":"009cffcccb81ddce454f2123254791e0237a6513","modified":1501646496864},{"_id":"public/2017/08/01/Hexo第三方评论插件引用/index.html","hash":"de54647fbed9018ea4902db8a49c7521188f0ddf","modified":1501646496864},{"_id":"public/2017/08/01/hexo自动备份教程/index.html","hash":"f791a944416b2c204645d4aaa5cab7d8c04dd812","modified":1501646496864},{"_id":"public/2017/07/01/PC小技巧/index.html","hash":"ca12d1fc50f907b317aea2fc0c502c16cd0376e4","modified":1501646496864},{"_id":"public/2017/07/01/WireShark 网络抓包/index.html","hash":"a24de5bef3e7d29847c2252d755c4caea1af025f","modified":1501646496864},{"_id":"public/2017/07/01/TcpDump/index.html","hash":"cdf3c374085edb8a6dc5acd5cf382d0becfa01f9","modified":1501646496864},{"_id":"public/2017/06/07/Linux之Socket关键/index.html","hash":"36e39ef72a1bffb7694ee43ce58bea475fee9c16","modified":1501646496864},{"_id":"public/2017/06/07/编辑器介绍/index.html","hash":"b42ae9c2a18a182066a5dc322f3ed08b7274bc51","modified":1501646496864},{"_id":"public/2017/06/07/Linux之errno表/index.html","hash":"586474985a79e7ab92c79a7ccc6804895fbc816f","modified":1501646496864},{"_id":"public/2017/06/06/Linux之服务安装/index.html","hash":"c64e950d931f2ff3ddcf3528efac87e9e64ab133","modified":1501646496864},{"_id":"public/2017/06/06/Linux之实用技能 /index.html","hash":"e501d49a0b1391327706f1952272d35e9cd2db68","modified":1501646496865},{"_id":"public/2017/06/06/Linux之CoreDump/index.html","hash":"8aeedc3515126bdaf2f8e443948eb461693dd873","modified":1501646496865},{"_id":"public/2017/04/06/微信硬件/index.html","hash":"fd872ce4f733864c7b893fb6690ebf06e3f9c998","modified":1501646496865},{"_id":"public/2017/03/26/STM32---ADC/index.html","hash":"911482ae36510d1a6effd5801d8735a2bcd607c8","modified":1501646496865},{"_id":"public/2017/03/26/STM32 命名规则/index.html","hash":"16fbe9770ac06484bdaa08d041fef0d7f10b7b4e","modified":1501646496865},{"_id":"public/2017/03/26/Lua之 loadfile ,dofile, loadstring，require/index.html","hash":"1651ecc2040b290da83618be216cb40ed581d191","modified":1501646496865},{"_id":"public/2017/03/26/linux 工具函数之网络工具函数/index.html","hash":"df7cf0118486d991988379ff0a5d3556afcfce07","modified":1501646496865},{"_id":"public/2017/03/26/STM8 命名规则/index.html","hash":"bda3c9e31ba01e2416cc7021def8650581f8fd13","modified":1501646496865},{"_id":"public/2017/03/26/SI4432/index.html","hash":"fb836ddc1d056ec5917f12a2aba4d143f690ebb7","modified":1501646496865},{"_id":"public/2017/03/26/tool/index.html","hash":"b225c6630623eb1758cdab775e8b65c0d50f57de","modified":1501646496865},{"_id":"public/2017/03/26/hello-world/index.html","hash":"0fd286f9e5c7e54cd8179e36e9ec4ea87606a194","modified":1501646496865},{"_id":"public/2017/03/26/Github-Blog-搭建入门/index.html","hash":"21bd5f081f02493974cee531a92cc6bdcf926ea9","modified":1501646496865},{"_id":"public/2017/03/26/CC1101笔记/index.html","hash":"b175a297fbbfacf2ab3c852a3b477f4cacc4738e","modified":1501646496865},{"_id":"public/archives/index.html","hash":"24d45e2b7318db62cd6af06c0a64d2df19ed9461","modified":1501646496865},{"_id":"public/archives/page/2/index.html","hash":"7aa8978b0dd0bc145665a9115a89a57d92bc5ef4","modified":1501646496865},{"_id":"public/archives/page/3/index.html","hash":"a7c5b6e51917c16db232444e1ac28bcb1b9fa364","modified":1501646496865},{"_id":"public/archives/page/4/index.html","hash":"eaf13f2234f668170ad3784ba97ac4915615c698","modified":1501646496865},{"_id":"public/archives/2017/index.html","hash":"279c72f586f37a1615d831bbaffb78a5ce3de409","modified":1501646496865},{"_id":"public/archives/2017/page/2/index.html","hash":"d20fe3f3c5345bd773580c92dd9e0fcf9c49efcc","modified":1501646496865},{"_id":"public/archives/2017/page/3/index.html","hash":"8f964300f9f6116d97df21ad4f1e07f676f5aa60","modified":1501646496865},{"_id":"public/archives/2017/page/4/index.html","hash":"0bf0ec4059194f5a35c0521504f5ce0fbd4538f4","modified":1501646496866},{"_id":"public/archives/2017/03/index.html","hash":"1eb920a52e0bd21d2b28c843dcc847704eece572","modified":1501646496866},{"_id":"public/archives/2017/03/page/2/index.html","hash":"0ca7ef39d6159233d85f0b72998afba03a66d0c9","modified":1501646496866},{"_id":"public/archives/2017/06/index.html","hash":"01e5094b75906ddd088331d70bf40d22d9fafcff","modified":1501646496866},{"_id":"public/index.html","hash":"6a9a9f228c0918f17e89fe988ed78c89fa93d9f2","modified":1501646496866},{"_id":"public/page/2/index.html","hash":"71c41c995463b4f7a581083fdccbd646274fc1f4","modified":1501646496866},{"_id":"public/page/3/index.html","hash":"a1139a23969ab0381deda160e43a71c13ffa82b8","modified":1501646496866},{"_id":"public/page/4/index.html","hash":"5db6cc4645212f14acb082f1ee4db48e5b823d02","modified":1501646496866},{"_id":"public/page/5/index.html","hash":"68cac7c73d663d03f1e8e5d4a1e2297961dc6985","modified":1501646496866},{"_id":"public/CNAME","hash":"c474a4209813a3ee0057c26df862436a39355358","modified":1501646496876},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1501646496876},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501646496876},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501646496876},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501646496876},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501646496876},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501646496876},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501646496876},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501646496876},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501646496876},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501646496876},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501646496876},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501646496876},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501646496876},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501646496876},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501646496877},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501646496877},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501646496877},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501646496877},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501646496877},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501646496877},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501646496877},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501646496877},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501646496877},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501646496877},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501646497546},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501646497566},{"_id":"public/assets/js/APlayer.min.js","hash":"a308d275df22a22edcc4877c5b2c34a9893d3fb3","modified":1501646497571},{"_id":"public/assets/js/DPlayer.min.js","hash":"c068139bf131f627d33f2c23c8e7320a4a402049","modified":1501646497571},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501646497580},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501646497580},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501646497580},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1501646497580},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501646497580},{"_id":"public/js/src/love.js","hash":"578abec3fa9c2be4a9d289a8831115dde41c37ab","modified":1501646497580},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1501646497580},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1501646497580},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501646497580},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1501646497580},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501646497580},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501646497580},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1501646497581},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1501646497581},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1501646497581},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1501646497581},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1501646497581},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1501646497581},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501646497581},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501646497581},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1501646497581},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501646497581},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501646497581},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501646497582},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501646497582},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501646497582},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501646497582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501646497582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501646497582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501646497582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501646497582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501646497582},{"_id":"public/css/main.css","hash":"e0d633aac8544e75f22ffba325520d979f3bedb8","modified":1501646497582},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1501646497582},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501646497582},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501646497582},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501646497582},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501646497582},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501646497582},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501646497582},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501646497582},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501646497582},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501646497582},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501646497582},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501646497583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501646497583},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501646497583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501646497583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501646497602}],"Category":[{"name":"射频","_id":"cj5uhjt7d0008tns1rrjlif8v"},{"name":"工具","_id":"cj5uhjt7p000ltns15lcpm9le"},{"name":"新奇","_id":"cj5uhjt87001etns1pr2da3nq"}],"Data":[],"Page":[{"_content":"# 关于我\n\n我是林晓俊，目前在机智云(Gizwits)工作。\n嵌入式开发攻城狮一枚，主要负责WiFi开发，开发了机智云第一款GAgent WiFi通用固件，目前研发的WiFi固件已经成功运行在上百万的设备之中。\n所研发的软件架构已经成功的运行在不同厂商的设备平台上，如：高通 TI、marvell、君正、博通、乐鑫、庆科、汉枫等\n\nDIY 爱好者.\n\nQQ:    878329009\nEmail: 878329009@qq.com\n\n","source":"about/index.md","raw":"# 关于我\n\n我是林晓俊，目前在机智云(Gizwits)工作。\n嵌入式开发攻城狮一枚，主要负责WiFi开发，开发了机智云第一款GAgent WiFi通用固件，目前研发的WiFi固件已经成功运行在上百万的设备之中。\n所研发的软件架构已经成功的运行在不同厂商的设备平台上，如：高通 TI、marvell、君正、博通、乐鑫、庆科、汉枫等\n\nDIY 爱好者.\n\nQQ:    878329009\nEmail: 878329009@qq.com\n\n","date":"2017-08-01T18:20:58.000Z","updated":"2017-08-01T18:20:58.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cj5uhjt6z0001tns1doilgd9t","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>我是林晓俊，目前在机智云(Gizwits)工作。<br>嵌入式开发攻城狮一枚，主要负责WiFi开发，开发了机智云第一款GAgent WiFi通用固件，目前研发的WiFi固件已经成功运行在上百万的设备之中。<br>所研发的软件架构已经成功的运行在不同厂商的设备平台上，如：高通 TI、marvell、君正、博通、乐鑫、庆科、汉枫等</p>\n<p>DIY 爱好者.</p>\n<p>QQ:    878329009<br>Email: 878329009@qq.com</p>\n","excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>我是林晓俊，目前在机智云(Gizwits)工作。<br>嵌入式开发攻城狮一枚，主要负责WiFi开发，开发了机智云第一款GAgent WiFi通用固件，目前研发的WiFi固件已经成功运行在上百万的设备之中。<br>所研发的软件架构已经成功的运行在不同厂商的设备平台上，如：高通 TI、marvell、君正、博通、乐鑫、庆科、汉枫等</p>\n<p>DIY 爱好者.</p>\n<p>QQ:    878329009<br>Email: 878329009@qq.com</p>\n"},{"title":"categories","date":"2017-03-27T16:26:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-28 00:26:06\ntype: \"categories\"\n---\n","updated":"2017-07-31T15:54:38.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj5uhjt720003tns1b13esb9s","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""},{"title":"tags","date":"2017-03-27T15:58:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-27 23:58:37\ntype: \"tags\"\n---\n","updated":"2017-07-31T15:54:38.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj5uhjt790006tns1atkkooem","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""}],"Post":[{"title":"Hexo第三方评论插件引用","date":"2017-08-01T10:05:11.000Z","_content":"\n## 第三方插件-友言\n- [友言官网][1]\n- [相关教程 1 ][2]\n- [相关教程 2 ][3]\n\n<!--more-->\n\n[1]: http://www.uyan.cc/\n[2]: http://www.jianshu.com/p/4729e92fddbe\n[3]: http://www.qtdebug.com/hexo-uyan/","source":"_posts/Hexo第三方评论插件引用.md","raw":"---\ntitle: Hexo第三方评论插件引用\ndate: 2017-08-01 18:05:11\ntags: [工具,hexo]\n---\n\n## 第三方插件-友言\n- [友言官网][1]\n- [相关教程 1 ][2]\n- [相关教程 2 ][3]\n\n<!--more-->\n\n[1]: http://www.uyan.cc/\n[2]: http://www.jianshu.com/p/4729e92fddbe\n[3]: http://www.qtdebug.com/hexo-uyan/","slug":"Hexo第三方评论插件引用","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt6v0000tns1qrzf8ols","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"第三方插件-友言\"><a href=\"#第三方插件-友言\" class=\"headerlink\" title=\"第三方插件-友言\"></a>第三方插件-友言</h2><ul>\n<li><a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言官网</a></li>\n<li><a href=\"http://www.jianshu.com/p/4729e92fddbe\" target=\"_blank\" rel=\"external\">相关教程 1 </a></li>\n<li><a href=\"http://www.qtdebug.com/hexo-uyan/\" target=\"_blank\" rel=\"external\">相关教程 2 </a></li>\n</ul>\n<a id=\"more\"></a>\n","excerpt":"<h2 id=\"第三方插件-友言\"><a href=\"#第三方插件-友言\" class=\"headerlink\" title=\"第三方插件-友言\"></a>第三方插件-友言</h2><ul>\n<li><a href=\"http://www.uyan.cc/\">友言官网</a></li>\n<li><a href=\"http://www.jianshu.com/p/4729e92fddbe\">相关教程 1 </a></li>\n<li><a href=\"http://www.qtdebug.com/hexo-uyan/\">相关教程 2 </a></li>\n</ul>","more":""},{"title":"Linux之CoreDump","date":"2017-06-06T12:21:11.000Z","_content":"\n## Core Dump 定位\n\n- - -\n### 打开CoreDump 功能\n\n- 在终端中输入命令 ulimit -c ，输出的结果为 0，说明默认是关闭 core dump 的，即当程序异常终止时，也不会生成 core dump 文件。\n- 我们可以使用命令 ulimit -c unlimited 来开启 core dump 功能，并且不限制 core dump 文件的大小； 如果需要限制文件的大小，将 unlimited 改成你想生成 core 文件最大的大小，注意单位为 blocks（KB）。\n- 用上面命令只会对当前的终端环境有效，如果想需要永久生效，可以修改文件 /etc/security/limits.conf\n文件，关于此文件的设置参看 **[这里](http://manpages.ubuntu.com/manpages/hardy/man5/limits.conf.5.html)** 。增加一行:\n\n<!--more-->\n\n```\n# /etc/security/limits.conf\n#\n#Each line describes a limit for a user in the form:\n#\n#<domain>   <type>   <item>   <value>\n  *          soft     core   unlimited\n```\n\n###  **修改 core 文件保存的路径**\n\n默认生成的 core 文件保存在可执行文件所在的目录下，文件名就为 core。\n通过修改 /proc/sys/kernel/core_uses_pid 文件可以让生成 core 文件名是否自动加上 pid 号。\n例如 echo 1 > /proc/sys/kernel/core_uses_pid，生成的 core 文件名将会变成 core.pid，其中 pid 表示该进程的 PID。\n还可以通过修改 /proc/sys/kernel/core_pattern来控制生成 core 文件保存的位置以及文件名格式。例如可以用 echo \"/tmp/corefile-%e-%p-%t\" > /proc/sys/kernel/core_pattern 设置生成的 core 文件保存在 “/tmp/corefile” 目录下，文件名格式为 “core-命令名-pid-时间戳”。**[这里](http://man7.org/linux/man-pages/man5/core.5.html)** 有更多详细的说明！\n\n### 实用GDB 定位Core\n\n- 用gcc -g 编译生成带调试信息文件:\n\n```\ngcc -g demo.c  -o demo\n```\n\n- 运行程序，产生core 文件:\n\n```\n./demo\n```\n\n- 实用GDB 调试:\n\n```\ngdb demo core\n```\n\n### 实际例子如下\n\n```\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n// void demoFun( char *start,... )\n// {\n//     va_list arg_ptr;\n//     char *value =NULL;\n//     char *valueOne=NULL;\n//     value = start;\n\n//     va_start(arg_ptr, start );\n//     do{\n//         printf(\"value :%s len=%d \\n\", value,strlen(value) );\n//         valueOne = value;\n//         value=va_arg(arg_ptr, int);\n//     }while( value!=NULL);\n//     va_end(arg_ptr);\n//     printf( \"%s %d value=%s\\n\",__FUNCTION__,__LINE__,valueOne );\n//     return;\n// }\n\nvoid printfData( int *pData )\n{\n    *pData = 100;\n}\nvoid main( void )\n{\n    int *null_ptr = NULL;\n    printfData( null_ptr );\n\n    return ;\n}\n```\n\n运行步骤如下\n\n```\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gcc -g demo.c  -o demo\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ./demo\nSegmentation fault (core dumped)\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gdb demo core\nGNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /mnt/hgfs/gagent/working/demo/demo...done.\n\nwarning: core file may not match specified executable file.\n[New LWP 8867]\n\nwarning: Can't read pathname for load map: Input/output error.\nCore was generated by `./demo.c'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x080483ba in printfData (pData=0x0) at demo.c:24\n24      *pData = 100;\n(gdb) where   #----------------->显示在哪个函数发生错误，以及在哪个地方调用了该函数\n#0  0x080483ba in printfData (pData=0x0) at demo.c:24\n#1  0x080483da in main () at demo.c:29\n(gdb) quit    #----------------->退出gdb\n```","source":"_posts/Linux之CoreDump.md","raw":"---\ntitle: Linux之CoreDump\ndate: 2017-06-06 20:21:11\ntags: [Linux,工具]\n---\n\n## Core Dump 定位\n\n- - -\n### 打开CoreDump 功能\n\n- 在终端中输入命令 ulimit -c ，输出的结果为 0，说明默认是关闭 core dump 的，即当程序异常终止时，也不会生成 core dump 文件。\n- 我们可以使用命令 ulimit -c unlimited 来开启 core dump 功能，并且不限制 core dump 文件的大小； 如果需要限制文件的大小，将 unlimited 改成你想生成 core 文件最大的大小，注意单位为 blocks（KB）。\n- 用上面命令只会对当前的终端环境有效，如果想需要永久生效，可以修改文件 /etc/security/limits.conf\n文件，关于此文件的设置参看 **[这里](http://manpages.ubuntu.com/manpages/hardy/man5/limits.conf.5.html)** 。增加一行:\n\n<!--more-->\n\n```\n# /etc/security/limits.conf\n#\n#Each line describes a limit for a user in the form:\n#\n#<domain>   <type>   <item>   <value>\n  *          soft     core   unlimited\n```\n\n###  **修改 core 文件保存的路径**\n\n默认生成的 core 文件保存在可执行文件所在的目录下，文件名就为 core。\n通过修改 /proc/sys/kernel/core_uses_pid 文件可以让生成 core 文件名是否自动加上 pid 号。\n例如 echo 1 > /proc/sys/kernel/core_uses_pid，生成的 core 文件名将会变成 core.pid，其中 pid 表示该进程的 PID。\n还可以通过修改 /proc/sys/kernel/core_pattern来控制生成 core 文件保存的位置以及文件名格式。例如可以用 echo \"/tmp/corefile-%e-%p-%t\" > /proc/sys/kernel/core_pattern 设置生成的 core 文件保存在 “/tmp/corefile” 目录下，文件名格式为 “core-命令名-pid-时间戳”。**[这里](http://man7.org/linux/man-pages/man5/core.5.html)** 有更多详细的说明！\n\n### 实用GDB 定位Core\n\n- 用gcc -g 编译生成带调试信息文件:\n\n```\ngcc -g demo.c  -o demo\n```\n\n- 运行程序，产生core 文件:\n\n```\n./demo\n```\n\n- 实用GDB 调试:\n\n```\ngdb demo core\n```\n\n### 实际例子如下\n\n```\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n// void demoFun( char *start,... )\n// {\n//     va_list arg_ptr;\n//     char *value =NULL;\n//     char *valueOne=NULL;\n//     value = start;\n\n//     va_start(arg_ptr, start );\n//     do{\n//         printf(\"value :%s len=%d \\n\", value,strlen(value) );\n//         valueOne = value;\n//         value=va_arg(arg_ptr, int);\n//     }while( value!=NULL);\n//     va_end(arg_ptr);\n//     printf( \"%s %d value=%s\\n\",__FUNCTION__,__LINE__,valueOne );\n//     return;\n// }\n\nvoid printfData( int *pData )\n{\n    *pData = 100;\n}\nvoid main( void )\n{\n    int *null_ptr = NULL;\n    printfData( null_ptr );\n\n    return ;\n}\n```\n\n运行步骤如下\n\n```\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gcc -g demo.c  -o demo\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ./demo\nSegmentation fault (core dumped)\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gdb demo core\nGNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04\nCopyright (C) 2012 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"i686-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://bugs.launchpad.net/gdb-linaro/>...\nReading symbols from /mnt/hgfs/gagent/working/demo/demo...done.\n\nwarning: core file may not match specified executable file.\n[New LWP 8867]\n\nwarning: Can't read pathname for load map: Input/output error.\nCore was generated by `./demo.c'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x080483ba in printfData (pData=0x0) at demo.c:24\n24      *pData = 100;\n(gdb) where   #----------------->显示在哪个函数发生错误，以及在哪个地方调用了该函数\n#0  0x080483ba in printfData (pData=0x0) at demo.c:24\n#1  0x080483da in main () at demo.c:29\n(gdb) quit    #----------------->退出gdb\n```","slug":"Linux之CoreDump","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt700002tns10v3w50ov","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"Core-Dump-定位\"><a href=\"#Core-Dump-定位\" class=\"headerlink\" title=\"Core Dump 定位\"></a>Core Dump 定位</h2><hr>\n<h3 id=\"打开CoreDump-功能\"><a href=\"#打开CoreDump-功能\" class=\"headerlink\" title=\"打开CoreDump 功能\"></a>打开CoreDump 功能</h3><ul>\n<li>在终端中输入命令 ulimit -c ，输出的结果为 0，说明默认是关闭 core dump 的，即当程序异常终止时，也不会生成 core dump 文件。</li>\n<li>我们可以使用命令 ulimit -c unlimited 来开启 core dump 功能，并且不限制 core dump 文件的大小； 如果需要限制文件的大小，将 unlimited 改成你想生成 core 文件最大的大小，注意单位为 blocks（KB）。</li>\n<li>用上面命令只会对当前的终端环境有效，如果想需要永久生效，可以修改文件 /etc/security/limits.conf<br>文件，关于此文件的设置参看 <strong><a href=\"http://manpages.ubuntu.com/manpages/hardy/man5/limits.conf.5.html\" target=\"_blank\" rel=\"external\">这里</a></strong> 。增加一行:</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /etc/security/limits.conf</div><div class=\"line\">#</div><div class=\"line\">#Each line describes a limit for a user in the form:</div><div class=\"line\">#</div><div class=\"line\">#&lt;domain&gt;   &lt;type&gt;   &lt;item&gt;   &lt;value&gt;</div><div class=\"line\">  *          soft     core   unlimited</div></pre></td></tr></table></figure>\n<h3 id=\"修改-core-文件保存的路径\"><a href=\"#修改-core-文件保存的路径\" class=\"headerlink\" title=\"修改 core 文件保存的路径\"></a><strong>修改 core 文件保存的路径</strong></h3><p>默认生成的 core 文件保存在可执行文件所在的目录下，文件名就为 core。<br>通过修改 /proc/sys/kernel/core_uses_pid 文件可以让生成 core 文件名是否自动加上 pid 号。<br>例如 echo 1 &gt; /proc/sys/kernel/core_uses_pid，生成的 core 文件名将会变成 core.pid，其中 pid 表示该进程的 PID。<br>还可以通过修改 /proc/sys/kernel/core_pattern来控制生成 core 文件保存的位置以及文件名格式。例如可以用 echo “/tmp/corefile-%e-%p-%t” &gt; /proc/sys/kernel/core_pattern 设置生成的 core 文件保存在 “/tmp/corefile” 目录下，文件名格式为 “core-命令名-pid-时间戳”。<strong><a href=\"http://man7.org/linux/man-pages/man5/core.5.html\" target=\"_blank\" rel=\"external\">这里</a></strong> 有更多详细的说明！</p>\n<h3 id=\"实用GDB-定位Core\"><a href=\"#实用GDB-定位Core\" class=\"headerlink\" title=\"实用GDB 定位Core\"></a>实用GDB 定位Core</h3><ul>\n<li>用gcc -g 编译生成带调试信息文件:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -g demo.c  -o demo</div></pre></td></tr></table></figure>\n<ul>\n<li>运行程序，产生core 文件:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./demo</div></pre></td></tr></table></figure>\n<ul>\n<li>实用GDB 调试:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gdb demo core</div></pre></td></tr></table></figure>\n<h3 id=\"实际例子如下\"><a href=\"#实际例子如下\" class=\"headerlink\" title=\"实际例子如下\"></a>实际例子如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdarg.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">// void demoFun( char *start,... )</div><div class=\"line\">// &#123;</div><div class=\"line\">//     va_list arg_ptr;</div><div class=\"line\">//     char *value =NULL;</div><div class=\"line\">//     char *valueOne=NULL;</div><div class=\"line\">//     value = start;</div><div class=\"line\"></div><div class=\"line\">//     va_start(arg_ptr, start );</div><div class=\"line\">//     do&#123;</div><div class=\"line\">//         printf(&quot;value :%s len=%d \\n&quot;, value,strlen(value) );</div><div class=\"line\">//         valueOne = value;</div><div class=\"line\">//         value=va_arg(arg_ptr, int);</div><div class=\"line\">//     &#125;while( value!=NULL);</div><div class=\"line\">//     va_end(arg_ptr);</div><div class=\"line\">//     printf( &quot;%s %d value=%s\\n&quot;,__FUNCTION__,__LINE__,valueOne );</div><div class=\"line\">//     return;</div><div class=\"line\">// &#125;</div><div class=\"line\"></div><div class=\"line\">void printfData( int *pData )</div><div class=\"line\">&#123;</div><div class=\"line\">    *pData = 100;</div><div class=\"line\">&#125;</div><div class=\"line\">void main( void )</div><div class=\"line\">&#123;</div><div class=\"line\">    int *null_ptr = NULL;</div><div class=\"line\">    printfData( null_ptr );</div><div class=\"line\"></div><div class=\"line\">    return ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行步骤如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gcc -g demo.c  -o demo</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ./demo</div><div class=\"line\">Segmentation fault (core dumped)</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gdb demo core</div><div class=\"line\">GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04</div><div class=\"line\">Copyright (C) 2012 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;i686-linux-gnu&quot;.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...</div><div class=\"line\">Reading symbols from /mnt/hgfs/gagent/working/demo/demo...done.</div><div class=\"line\"></div><div class=\"line\">warning: core file may not match specified executable file.</div><div class=\"line\">[New LWP 8867]</div><div class=\"line\"></div><div class=\"line\">warning: Can&apos;t read pathname for load map: Input/output error.</div><div class=\"line\">Core was generated by `./demo.c&apos;.</div><div class=\"line\">Program terminated with signal 11, Segmentation fault.</div><div class=\"line\">#0  0x080483ba in printfData (pData=0x0) at demo.c:24</div><div class=\"line\">24      *pData = 100;</div><div class=\"line\">(gdb) where   #-----------------&gt;显示在哪个函数发生错误，以及在哪个地方调用了该函数</div><div class=\"line\">#0  0x080483ba in printfData (pData=0x0) at demo.c:24</div><div class=\"line\">#1  0x080483da in main () at demo.c:29</div><div class=\"line\">(gdb) quit    #-----------------&gt;退出gdb</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"Core-Dump-定位\"><a href=\"#Core-Dump-定位\" class=\"headerlink\" title=\"Core Dump 定位\"></a>Core Dump 定位</h2><hr>\n<h3 id=\"打开CoreDump-功能\"><a href=\"#打开CoreDump-功能\" class=\"headerlink\" title=\"打开CoreDump 功能\"></a>打开CoreDump 功能</h3><ul>\n<li>在终端中输入命令 ulimit -c ，输出的结果为 0，说明默认是关闭 core dump 的，即当程序异常终止时，也不会生成 core dump 文件。</li>\n<li>我们可以使用命令 ulimit -c unlimited 来开启 core dump 功能，并且不限制 core dump 文件的大小； 如果需要限制文件的大小，将 unlimited 改成你想生成 core 文件最大的大小，注意单位为 blocks（KB）。</li>\n<li>用上面命令只会对当前的终端环境有效，如果想需要永久生效，可以修改文件 /etc/security/limits.conf<br>文件，关于此文件的设置参看 <strong><a href=\"http://manpages.ubuntu.com/manpages/hardy/man5/limits.conf.5.html\">这里</a></strong> 。增加一行:</li>\n</ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /etc/security/limits.conf</div><div class=\"line\">#</div><div class=\"line\">#Each line describes a limit for a user in the form:</div><div class=\"line\">#</div><div class=\"line\">#&lt;domain&gt;   &lt;type&gt;   &lt;item&gt;   &lt;value&gt;</div><div class=\"line\">  *          soft     core   unlimited</div></pre></td></tr></table></figure>\n<h3 id=\"修改-core-文件保存的路径\"><a href=\"#修改-core-文件保存的路径\" class=\"headerlink\" title=\"修改 core 文件保存的路径\"></a><strong>修改 core 文件保存的路径</strong></h3><p>默认生成的 core 文件保存在可执行文件所在的目录下，文件名就为 core。<br>通过修改 /proc/sys/kernel/core_uses_pid 文件可以让生成 core 文件名是否自动加上 pid 号。<br>例如 echo 1 &gt; /proc/sys/kernel/core_uses_pid，生成的 core 文件名将会变成 core.pid，其中 pid 表示该进程的 PID。<br>还可以通过修改 /proc/sys/kernel/core_pattern来控制生成 core 文件保存的位置以及文件名格式。例如可以用 echo “/tmp/corefile-%e-%p-%t” &gt; /proc/sys/kernel/core_pattern 设置生成的 core 文件保存在 “/tmp/corefile” 目录下，文件名格式为 “core-命令名-pid-时间戳”。<strong><a href=\"http://man7.org/linux/man-pages/man5/core.5.html\">这里</a></strong> 有更多详细的说明！</p>\n<h3 id=\"实用GDB-定位Core\"><a href=\"#实用GDB-定位Core\" class=\"headerlink\" title=\"实用GDB 定位Core\"></a>实用GDB 定位Core</h3><ul>\n<li>用gcc -g 编译生成带调试信息文件:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -g demo.c  -o demo</div></pre></td></tr></table></figure>\n<ul>\n<li>运行程序，产生core 文件:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./demo</div></pre></td></tr></table></figure>\n<ul>\n<li>实用GDB 调试:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gdb demo core</div></pre></td></tr></table></figure>\n<h3 id=\"实际例子如下\"><a href=\"#实际例子如下\" class=\"headerlink\" title=\"实际例子如下\"></a>实际例子如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdarg.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">// void demoFun( char *start,... )</div><div class=\"line\">// &#123;</div><div class=\"line\">//     va_list arg_ptr;</div><div class=\"line\">//     char *value =NULL;</div><div class=\"line\">//     char *valueOne=NULL;</div><div class=\"line\">//     value = start;</div><div class=\"line\"></div><div class=\"line\">//     va_start(arg_ptr, start );</div><div class=\"line\">//     do&#123;</div><div class=\"line\">//         printf(&quot;value :%s len=%d \\n&quot;, value,strlen(value) );</div><div class=\"line\">//         valueOne = value;</div><div class=\"line\">//         value=va_arg(arg_ptr, int);</div><div class=\"line\">//     &#125;while( value!=NULL);</div><div class=\"line\">//     va_end(arg_ptr);</div><div class=\"line\">//     printf( &quot;%s %d value=%s\\n&quot;,__FUNCTION__,__LINE__,valueOne );</div><div class=\"line\">//     return;</div><div class=\"line\">// &#125;</div><div class=\"line\"></div><div class=\"line\">void printfData( int *pData )</div><div class=\"line\">&#123;</div><div class=\"line\">    *pData = 100;</div><div class=\"line\">&#125;</div><div class=\"line\">void main( void )</div><div class=\"line\">&#123;</div><div class=\"line\">    int *null_ptr = NULL;</div><div class=\"line\">    printfData( null_ptr );</div><div class=\"line\"></div><div class=\"line\">    return ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行步骤如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gcc -g demo.c  -o demo</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ./demo</div><div class=\"line\">Segmentation fault (core dumped)</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gdb demo core</div><div class=\"line\">GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04</div><div class=\"line\">Copyright (C) 2012 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;i686-linux-gnu&quot;.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...</div><div class=\"line\">Reading symbols from /mnt/hgfs/gagent/working/demo/demo...done.</div><div class=\"line\"></div><div class=\"line\">warning: core file may not match specified executable file.</div><div class=\"line\">[New LWP 8867]</div><div class=\"line\"></div><div class=\"line\">warning: Can&apos;t read pathname for load map: Input/output error.</div><div class=\"line\">Core was generated by `./demo.c&apos;.</div><div class=\"line\">Program terminated with signal 11, Segmentation fault.</div><div class=\"line\">#0  0x080483ba in printfData (pData=0x0) at demo.c:24</div><div class=\"line\">24      *pData = 100;</div><div class=\"line\">(gdb) where   #-----------------&gt;显示在哪个函数发生错误，以及在哪个地方调用了该函数</div><div class=\"line\">#0  0x080483ba in printfData (pData=0x0) at demo.c:24</div><div class=\"line\">#1  0x080483da in main () at demo.c:29</div><div class=\"line\">(gdb) quit    #-----------------&gt;退出gdb</div></pre></td></tr></table></figure>"},{"title":"CC1101笔记","date":"2017-03-25T16:38:11.000Z","_content":"- - -\n# 产品描述\n## 工作频段\n**CC1100: **400-464 MHz and 800-928MHz \n**CC1101:** 387-464 MHz and 779-928MHz\n## 芯片引脚\n\n![cc1101引脚](http://upload-images.jianshu.io/upload_images/1736256-bf9e764fcd560a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<!--more-->\n### 引脚说明\n---\n|引脚编号  | 引脚名  |引脚类型|  描述\n|----|----|----|----|\n|1|  SCLK  |数字输入  |连续配置接口，时钟输入\n|2|  SO(GD01)| 数字输出  |连续配置接口，数据输出当 CSn 为高时为可选的一般输出脚\n|3 | GDO2 | 数字输出 | 一般用途的数字输出脚：**1>**测试信号；**2>**FIFO 状态信号;**3>**时钟输出，从 XOSC 向下分割;**4>**连续输入 TX 数据\n|4 | DVDD | 功率（数字）|  数字 I/O 和数字中心电压调节器的 1.8V-3.6V 数字功率供给输出\n|5| DCOUPL| 功率（数字）|  对退耦的 1.6V-2.0V 数字功率供给输出;**注意：这个引脚只对 CC2500 使用。不能用来对其他设备提供供给电压**\n|6|  GDO0(ATEST)|数字 I/O | 一般用途的数字输出脚：**1>** 测试信号;**2>**FIFO 状态信号;**3>**时钟输出，从 XOSC 向下分割;**4>**连续输入 TX 数据;**5>**也用作原型/产品测试的模拟测试 I/O\n|7 | CSn|  数字输入 | 连续配置接口，芯片选择\n|8 | XOSC_Q1| 模拟 I/O|  晶体振荡器脚 1，或外部时钟输入\n|9  |AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|10|  XOSC_Q2| 模拟 I/O|  晶体振荡器脚\n|11|  AVDD|  功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|12 | RF_P | RF I/O | 接收模式下对 LNA 的正 RF 输入信号发送模式下对 LNA 的正 RF 输出信号\n|13  |AVDD | RF I/O | 接收模式下对 LNA 的负 RF 输入信号发送模式下对 LNA 的负 RF 输出信号\n|14|  AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|15|  AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|16|  GND | 地(模拟) | 模拟接地\n|17|  RBIAS|  模拟 I/O | 参考电流的外部偏阻器\n|18 | DGUARD| 功率（数字）|  对数字噪声隔离的功率供给连接\n|19|  GND  |地（数字）|  数字噪声隔离的接地\n|20|  SI|  数字输入 | 连续配置接口，数据输入\n## 通讯方式以及配置方式---SPI\n- CC1101通过4线SPI兼容接口（MOSI,MISO,SCLK和CSn）进行配置，**CC1101作为从设备**。\n这个接口同时用作读写缓冲器数据。\nSPI接口上所有的数据传送都是先传送 **MSB**\n\n>**拓展知识:**\n**MSB:**高位前导\n**LSB:**低位前导。\n**big endian（大端）**是指低地址存放最高有效字节（MSB），\n**little endian（小端）**则是低地址存放最低有效字节（LSB）\n\n### SPI 读写注意事项\n- SPI接口上的所有传送都是以一个头字节（header byte）开始包含以下：\n - 一个**读写位(R/W)：**在读操作中该位置1，在写操作中该位置0；\n - 一个**(突发(burst access)访问位(B)**\n - **6位地址位(A5~A0)**。\n- 在SPI总线上传输数据时，CSn脚必须保持低电平。如果在发送头字节或者读写寄存器时CSn拉高，传送将被取消\n- 当 CSn 变低，在开始转换头字节之前，MCU必须等待，直到 MISO 脚变低。这表明电压调制器已经稳定，晶体正在运作中。除非芯片处在 SLEEP 或 XOFF 状态，MISO 脚在 CSn变低之后总会立即变低。\n\n#### **芯片状态字节**\n-  当头字节在 SPI 接口上被写入时，芯片状态字节在 MISO 脚上被 CC1100 写入。状态字节\n包含关键状态信号，对 MCU 是有用的。**(7)位**是 CHIP_RDYn 信号。在 SCLK 的在第一个正边缘之前，这个信号必须变低。CHIP_RDYn 信号表明晶体正处于工作中，调节数字供给电压是稳定的。\n- 状态字节中的**(6:4 )**位由状态值组成。这个值反映了芯片的状态。当使 XOSC 空闲并使数字中心的能量开启，所有其他模块处于功率降低状态。只有芯片处于此状态时，频率和信道配置才能被更新。当芯片处于接收模式时，RX状态是活动的。同样地，当芯片处于传输模式时，TX 状态是活动的。\n- 状态字节中的后四位**(3:0)**包含FIFO_BYTES_AVAILABLE。为了进行读操作，这个区域包含可从 RX FIFO 读取的字节数。为了进行写操作，这个区域包含可写入 TX  FIFO的字当FIFO_BYTES_AVAILABLE=15，15 或者更多的字节是可用/自由的。\n![状态字节概要](http://upload-images.jianshu.io/upload_images/1736256-043836467cbc7d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 寄存器访问\n- **CC1101 配置寄存器地址: ** 0x00到0x2E\n- 所有的配置寄存器均能读和写。读/写位控制寄存器是读或者写。当对寄存器写时，每当一个待写入的数据字节传输到 SI脚时，状态字节将被送至 SO 脚。\n- 通过在地址头设置突发位，连续地址的寄存器能高效地被访问。这个地址在内部计数器内设置起始地址。每增加一个新的字节（每8 个时钟脉冲），计数器值增加 1。突发访问，不管是读访问还是写访问，必须通过设置CSn 为高来终止。\n- 对 0x30-0x3D 间的地址来说，突发位用以在**状态寄存器**和**命令选通**间选择。状态寄存器只读。突发读取对状态寄存器是不可取的，故它们每次只能被读一个。\n**burst位置1：**选择状态寄存器；\n**burst置0：**选择命令选通（command strobes）;\n\n### 命令选通(command strobes)\n-  命令选通可以看做是CC1101的一个单字节指令。\n通过寻址一个命令选通寄存器，将启动内部序列。\n这些命令用来**禁止晶振**，**使能接收**，**使能无线唤醒** 等；\n- 命令选通寄存器的访问和一个寄存器的写操作一样，但没有数据被传输。就是说，只有 R/W 位（置为 0）突发访问（置为 0）和六个地址位（0x30 和 0x3D 之间）被写。一个命令滤波可能在任何其他 SPI 访问之后，而不需要将 CSn 拉至高电平。命令选通立即被执行，当 CSn 高时 SPWD 和 SXOFF 命令被执行是例外。\n\n### FIFO访问\n- 64 字节 TX FIFO 和 64 字节 RX FIFO 通过0x3F 被访问。\n - 读/写位为 0 时，TX FIFO被访问。\n - 读/写位为 1 时，RX FIFO 被访问。\n- TX FIFO 是只写的，而 RX FIFO 是只读的。\n- 突发位用来决定 FIFO 访问是单字节还是突发访问。\n - 单字节访问方式期望地址的突发位为 0 的头字节和一个数据字节。在数据字节之后跟随一个新的头字节，因此，CSn 继续保持低。\n - 突发访问方式允许一地址字节，然后是连续的数据字节，直到通过设置 CSn 为高来关断访问。\n   -  0x3F : 单字节访问 TX FIFO\n   - 0x7F : 突发访问 TX FIFO\n   - 0xBF : 单字节访问 RX FIFO\n   - 0XFF : 突发访问 RX FIFO\n\n### PATABLE 访问\n- **0x3E**地址用来访问 PATABLE。PATABLE用来选择 PA 能量控制设置。在接收此地址之后，SPI 等待至少 8 个字节。通过控制PATABLE，能实现可控的 PA 能量上升和下降，减少的带宽的 ASK 调制整型也如此。\n- PATABLE 是一个 8 字节表，定义了 PA 控制设 置 ， 为 8 个 PA 功 率 值 （ 由FRENDO.PA_POWER 的 3 个位的值所选择）的每一个所使用。这个表从最低位（0）到最高位（7）可读和写，一次一位。一个索引计数器用来控制对这个表的访问。每读出或写入表中的一个字节，计数器就加 1。当 CSn 为高时，计数值置为最小值。当达到最大值时，计数器由零重新开始计数。\n- 对 PATABLE 的访问是单字节或者突发访问，由突发位决定。当使用突发访问时，索引计数器的值增加；达到7时重新从0开始。读/写位控制访问是写访问（R/W=0）或者读访问(R/W=1)。\n- 如果一字节被写入 PATABLE，且这个值将要被读出，那么，为了设置索引计数器的值重为 0，CSn 必须在读访问之前置为高。注意，当 PATABLE 进入休眠状态时，所存储的内容会丢失，特别是第一个字节（索引\n为 0）。\n\n### 基本控制和状态脚\n- CC1101有2个专用配置脚（GDO0和GDO2）和一个共用脚（GDO1）可以向控制软件输出有用的内部状态信息。这些脚可以用来向MCU产生中断。\n- GDO1和SPI的SO引脚共用。\n - GDO1/SO的默认设置时3态输出。通过选择任何编程选项，GDO1/SO将变为普通引脚。当CSn拉低，该引脚将始终作为普通的SO功能引脚。\n- 在同步和异步串行模式，在发送模式下，GDO0引脚将作为串行TX数据输入引脚。\n- GDO0也可以用作片上模拟温度传感器。通过外部ADC测量GDO0脚的电压，可以计算出温度。温度传感器的详细说明见18页的Section 4.7。通过默认的PTEST寄存器设置（0x7F），如果频率合成器被允许温度传感器的的输出时可用的。（例如：MANCAL，FSTXON，RX和 TX状态）在IDLE状态向PTEST寄存器写入0xBF允许模拟温度传感器是必要的。离开IDLE状态之前，必须恢复PTEST寄存器为默认值（0x7F）。\n\n### 数据包处理的硬件支持\n#### 发送模式下\n>数据包的处理者可以配置增加下面的元素到TX FIFO中的数据包存储\n\n- 一个可编程数量的前导字节；\n-  两字节同步字，可复制为4字节同步字。只插入前导字节或者同步字节是不可能的；\n- 一个覆盖数据区域的CRC校验计算。 \n>推荐设置4字节前导和4字节同步字，除了500k波特率时推荐使用8字节前导。另外，在数据区域和附加的2字节CRC校验，以下可以被执行\n - 使用PN9序列Whitening数据。 \n - 通过使用交叉和编码数据（卷积编码）前向纠错。\n\n#### 接收模式下\n>数据包处理支持将是解构数据包，（如使能）以下可以被执行\n\n- 前导检测\n- 同步字检测\n- CRC计算和CRC检查\n- 一个字节地址检测\n- 包长度检查（根据设置的最大长度检查长度字节）\n- 反Whitening（如果使能）\n- 反交叉和解码( 如果使能 )\n另外，RSSI（接收信号强度指示）、LQI（链路质量指示）和CRC状态的两个状态字节可以附加在RX FIFO\n\n### 数据包格式 \n数据包的格式可以配置为由以下部分组成： \n- 前导 n 同步字 \n- 可选的长度字节 \n- 可选的地址字节 \n- 净荷 \n- 可选的2字节CRC\n![数据格式](http://upload-images.jianshu.io/upload_images/1736256-d71997128378e0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>前导形式是一个交互的0 /1 序 列（01010101...）前导的最小长度是可编程控制的。当启用 TX 时，调制器开始传送前导。当控制数目的前导字节被传送完毕，调制器开始发送同步词汇，然后传送来自 TX FIFO的可利用的数据。若 TX FIFO 为空，调制器将继续传送前导字节，直到第一个字节被写入 TX FIFO。调制器将随后传送同步词汇和数据字节;\n前导字节的长度由MDMCFG1.NU_PREAMBLE 值控制。\n\n### 数据包长度\n- CC1101 支持恒定长度数据包协议和可变长度协议。\n- **可变**或**固定数据包**长度模式能支持的长度可达 255 字节。\n- **大于255个字节**的数据包，必须使用**无限数据包长度模式**；\n>使用不同长度的配置来支持数据包格式。必须确保在发送前半个或任何字节的时候TX模式不被关闭\n\n#### 固定数据包长度\n- 固定数据包长度模式通过设定PKTCTRL0.LENGTH_CONFIG=0来选择。\n- 期望的数据包长度通过PKTLEN寄存器来设置，不包括长度字节和可选的CRC；\n\n#### 可变数据包长度\n- 可变数据包长度模式，PKTCTRL0.LENGTH_CONFIG=1，数据包长度由同步字后面的第一个字节配置。\n- 数据包长度定义为有效载荷，不包括长度字节和可选的CRC。\n- PKTLEN用来配置允许接收的最大数据包长度。\n- 任何接收的数据包长度大于PKTLEN的值都将被丢弃。\n\n##### 可变长数据包收发逻辑\n数据包长度寄存器PKTLEN，在接收和发送时可以重新编程。结合固定数据包长度模式(PKTCTRL0.LENGTH_CONFIG=0)，这使与变长数据包不同的长度配置成为可能。（在可变数据包长度模式下长度字节是同步字节后第一个字节）在接收开始，数据包长度设置为一个大的值。MCU读取足够多的字节来解析数据包中的长度区域。然后依照这个值对PKTLEN进行设置。当数据包处理器中的字节计数器等于PKTLEN寄存器的值时数据包结束。因此，MCU必须在内部计数器达到数据包长度之前确认正确的长度\n\n#### 无限数据包长度模式(大于255个字节)\n- PKTCTRL0.LENGTH_CONFIG=2，数据包长度将设置为无限长，发送和接收将持续到手动关闭。\n\n##### 无限数据包长度收发逻辑\n- 数据包自动控制寄存器PKTCTRL0，可以在TX和RX期间重新编程。这就使发送和接收数据包长度超过256字节并且仍然使用数据包处理器硬件支持成为可能。\n- 在数据包开始时，必须激活无限数据包长度模式（PKTCTRL0.LENGTH_CONFIG=2）。\n- 在发送端，PKTLEN寄存器设置为：mod(长度,256)。\n- 在接收端，MCU读出足够长度的字节来解析出数据包长度并设置PKTLEN寄存器为:mod(长度,256)。\n- 当数据包中还有少于256字节数据，MCU禁止数据包无限长度模式并且激活固定长度模式。\n- 当内部字节计数器到PKTLEN时，发送和接收结束。\n- （无线进入的状态由TXOFF_MODE 或 RXOFF_MODE决定）自动CRC添加/校验也可以使用（通过设置PKTCTRL0.CRC_EN=1）。\n\n>例子:发送一个600字节的数据包时，MCU必须按照以下执行：\n- 设置PKTCTRL0.LENGTH_CONFIG=2。 \n-  重新设置PKTLEN寄存器的值为:（600，256）=88. **(600%256 = 88)**\n-  至少发送345字节（600-255），例如通过填充64字节 TX FIFO 6次（发送384字节）。 \n- 设置PKTCTRL0.LENGTH_CONFIG=0。 \n- 当数据包计数器达到88发送完成。一共600字节被发送。 \n![600个字节发送](http://upload-images.jianshu.io/upload_images/1736256-d519a90a009de7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 接收模式下的数据包过滤\nCC1101支持三种不同类型的数据包过滤：\n- 地址过滤\n- 最大长度过滤\n- CRC过滤\n\n#### 地址过滤\n- 设置PKTCTRL1.ADR_CHK为任意大于0的值使能数据包地址过滤。\n- 数据包处理器启动后将比较数据包中的目标地址字节和在ADDR寄存器中设置的节点地址\n或者当PKTCTRL1.ADR_CHK=10时的广播地址0x00\n以及PKTCTRL1.ADR_CHK=11时的广播地址0x00和0xFF。\n如果接收的地址匹配到一个正确地址，数据包被接收并写入到RX FIFO。\n如果地址匹配失败，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。 \n- 如果当时用无限数据包长度模式和使能地址过滤时接收地址匹配到正确的地址，0xFF将被写入到RX FIFO，其次是地址字节和有效载荷。\n\n#### 最大长度过滤 \n在可变数据包模式，PKTCTRL0.LENGTH_CONFIG=1，PKTLEN.PACKET_LENGTH寄存器用来设置最大允许的数据包长度。如果接收的长度字节大于这个值，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。\n#### CRC过滤\n- 当CRC校验失败时过滤数据包，通过设置PKTCTRL1.CRC_AUTOFLUSH=1使能；\n- CRC自动清除功能将在CRC校验失败时清空所有RX FIFO；\n- 在自动清空RX FIFO后，下一个状态依赖于MCSM1.RXOFF_MODE的设置；\n- 当使用自动清除功能，在可变数据包长度模式下最大数据包长度为63字节，在定长数据包长度模式下是64字节；\n- 注意当PKTCTRL1.APPEND_STATUS使能，最大允许数据包长度将减少2个字节，以确保在数据包的结尾附加的2字节的状态字节在RX FIFO中占用的空间；\n- 当CRC校验错误以后全部RX FIFO被清空；\n- 在接收正确的数据包前之前接收到的数据包必须从FIFO中读出。直到CRC校验正确MCU才从正确的数据包中读取数据；\n\n### 发送模式下的数据包处理\n- 需要发送的有效载荷必须写入到TX FIFO；\n- 如果使能可变数据包长度第一个字节必须写长度字节；\n- 长度字节的值等于数据包的有效载荷（包含可选的地址字节）；\n- 如果在接收端使能地址识别，写入到TX FIFO中的第二个字节必须是地址字节；\n- 如果使能固定数据包长度，写入到TX FIFO中的第一个字节必须是地址字节（接收端使用地址识别）；\n- 调制器将首先发送预置数量的前导字节；\n- 如果TX FIFO中有可发送的数据，调制器将发送2字节（可选4字节）同步字，紧接着是TX FIFO中的有效载荷；\n- 如果使能CRC，校验时计算TX FIFO中的所有数据，然后跟随有效数据发送2个附加字节；\n- 如果在完整的数据包发送完成之前TX FIFO变为空的，无线将进入TXFIFO_UNDERFLOW状态。退出该状态的唯一方法是运行SFTX命令；\n- 发送下溢后再向TX FIFO写入数据不能重启TX模式；\n- 如果whitening(白化)被使能，同步字后面的所有字节将被whitened。这必须在FEC/Interleaver之前完成。Whitening通过设置PKTCTRL0.WHITE_DATA=1使能；\n- 如果FEC/Interleaving(交错器)被使能，同步字后面的所有数据在调制之前将被interleaver 和 FEC编码加密。FEC通过设置MDMCFG1.FEC_EN=1使能；\n\n### 接收模式下的数据包处理\n- 在接收模式，解调器和数据包处理器将寻找一个有效的前导和同步字。\n- 当找到后，解调器将获得位和字节同步，并将接收第一个有效字节。 \n- 如果使能FEC/Interleaver，FEC解码器将开始解码第一个有效字节。Interleaver将在数据被其他任何处理之前解密。 \n- 如果使能whitening，在此基础上数据将被de-whitening(反白化)。 \n- 当使能可变数据包长度模式时，第一个字节是长度字节。数据包处理器储存该值为数据包长度并且通过该长度字节指示接收的字节数量。\n- 如果使用固定数据包长度模式，数据包处理器将接收预置数量的字节。 \n- 接下来，数据包处理器可选的检测地址并且只有地址匹配才继续接收。\n- 如果使能自动CRC校验，数据包处理器计算CRC并与CRC校验结果相匹配。 \n- 在有效载荷的结尾，数据包处理器将可选的写入两个复交数据包状态字节，包括CRC状态、LQI和RSSI\n\n![接收数据包状态字1](http://upload-images.jianshu.io/upload_images/1736256-7786a7bdca8c6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![接收数据包状态字2](http://upload-images.jianshu.io/upload_images/1736256-116e004500c41ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### MCU数据包处理\n如果在固件中执行一个数据包导向的无线协议，MCU需要知道一个数据包什么时候收到/发送。\n加之，超过64字节长度的数据包，当接收时需要读取RX FIFO和当发送时TX FIFO需要重新填充。\n这就意味着MCU必须知道有多少个字节可以从RX FIFO中读取或者可以向TX FIFO中写入。\n有两种方法可以获得必要的状态信息。\n- 中断驱动方法 \n  当同步字接收/发送完成或者完整的数据包接收/发送通过设置IOCFGx.GDOx_CFG=0x06，GDO脚可以用在RX和TX中产生一个中断。\n此外，\nIOCFGx.GDOx_CFG还有两个配置用来产生中断，源于有多少字节在RX FIFO或TX FIFO。\nIOCFGx.GDOx_CFG=0x00和IOCFGx.GDOx_CFG=0x01为RX FIFO，\nIOCFGx.GDOx_CFG=0x02和IOCFGx.GDOx_CFG=0x03为TX FIFO。\n\n- SPI轮询 \nPKTSTATUS可以使用给定的速率查询以获得GDO0和GDO2当前值。\nRXBYTES 和 TXBYTES可以使用给定的速率查询以获得RX FIFO或者TX FIFO中的字节数。\n合二为一的，RX FIFO和TX FIFO中的字节数量可以从每次头字节、数据字节或命令选通在SPI总线上发送时MISO引脚返回的芯片状态字节读取。 \n>**推荐使用中断驱动方法**因为高速率SPI轮询将减小RX的灵敏度。\n而且，在Section10.3和CC1101勘误表【4】中，当使用SPI轮询，单一读取PKTSTATUS、 RXBYTES和 TXBYTES有一个小的有限的错误的可能性。\n当读取芯片状态字节有同样的问题。 \n\n### RSSI\n- RSSI的值时在选择的通道中信号功率级别的估计。\n- 这个值基于RX中当前增益的设置和信道中的标准信号等级。 \n- 在RX模式，RSSI可以连续的从RSSI状态寄存器读取知道解调器检测到一个同步字（当同步字检测使能）。此时RSSI读取的值将被冻结知道芯片下一次进入RX状态。 \n>注意：从无线进入RX模式到在RSSI寄存器检测到一个正确的RSSI值需要一定的时间。查看DN505[15]获得RSSI响应时间估算的详细信息。 \nRSSI的值以dBm和1/2 dB给出。\nRSSI更新速率，fRSSI 依赖于接收滤波带宽和AGCCTRL0.FILTER_LENGTH。\n\n- 如果使能PKTCTRL1.APPEND_STATUS，数据包最后的RSSI值自动添加到有效载荷后面的第一个附加字节。 \n- 从RSSI状态寄存器读出的RSSI值时2个补足的数字。下面的程序可以将RSSI转换为完整的功率级别（RSSI_dBm）。 \n1) 读取RSSI状态寄存器 \n2) 将读到的数据从16进制数转换到二进制数（RSSI_dec） \n3)  如果RSSI_dec≧128，RSSI_dBm =(RSSI_dec - 256)/2 – RSSI_offset 4）\n4 )  如果RSSI_dec＜128，RSSI_dBm =RSSI_dec /2 – RSSI_offset\n\n### 净信道评估（CCA）\n- CCA用来显示当前信道是空闲还是繁忙。\n- 通过设定IOCFGx.GDOx_CFG=0x09，当前的CCA状态在任何一个GDO引脚都可以查看。 \n- MCSM1.CCA_MODE用来选择当确定CCA时使用的模式。 \n- 当CC1101在RX状态时给出STX 或 SFSTXON命令选通，仅能在净信道条件完成才能进入TX或FSTXON状态。\n- 此外，芯片将仍处于RX状态。如果信道接下来变为可用的，在一个新的命令选通通过SPI接口发送之前，无线不会进入TX或FSTXON状态。这个特性叫做**TX-if-CCA**。\n可以编程设置4种CCA条件：\n  - 始终（禁止CCA，总是进入TX）\n  - 如果RSSI低于门限值 \n  -  除非正常接收一个数据包 \n  - 以上两个（RSSI低于门限值和没有正常接收一个数据包）\n\n### 链路质量指示（LQI）\n- 信号链路质量指示是一个公制的接收信号的当前质量。\n- 若 PKTCTRL1.APPEND_STATUS启用，则这个值自动附加在接收数据包的末端。\n- 这个值也可从 LQI 状态寄存器上读取。\nLQI 由跟随同步词汇的 64 个符号（头 8 个数据包字节）计算得来。LQI 最好用作连接\n质量的一个相对的度量，因为这个值决定于调制格式。\n\n### 上电启动序列\n- 当电源给电，系统必须复位。\n- 通过下面描述的2个序列中的一个来完成，即自动上电复位（POR）或者手动复位。\n- 自动上电复位或手动复位之后，推荐转换GDO0引脚上输出的信号。\n- 默认设置是以CLK_XOSC/192的频率输出一个时钟信号。\n- 然而，为了在TX和RX中优化执行，必须**__GD0/1/2 引脚配置__**中的配置来配置GDO脚\n\n#### 自动POR\nCC1101内部包含上电复位电路。最小的需求见表15，完整的上电复位功能必须遵循。当CHIP_RDYn变低内部上电序列完成。在CSn拉低后在SO引脚上可以查看CHIP_RDYn。 \n当CC1101复位完成，芯片将进入IDLE状态，晶振开始运行。如果芯片在上电之后有足够的时间让晶振稳定，在捕获CSn变低之后SO引脚将马上变低。如果在复位完成之前CSn被拉低，SO引脚将首先变高，指示晶振没有稳定，变低之前见下图。\n![自动POR](http://upload-images.jianshu.io/upload_images/1736256-1dc0e7c8463d0096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 手动复位\nCC1101上的其它全部复位时使用SRES命令。通过执行这个命令，所有内部寄存器和状态恢复默认，IDLE状态。手动复位序列如下（图 手动复位）： \n- 设置SCLK=1，SI=0，避免引脚控制模式可能出现的问题。 \n-  选通CS低/高。 \n- 保持CS为低，然后拉高，至少40us才可以拉低 \n- 将CSn拉低等到SO拉低（CHIP_RDYn）。\n- 在SI线上发布SRES选通。 \n- 当SO再一次拉低，复位完成，芯片进入IDLE状态\n![手动复位](http://upload-images.jianshu.io/upload_images/1736256-e692bc860255aa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>注意：以上复位程序只需要在电源给电之后。如果用户在这之后想要复位CC1101，只需要执行SRES命令选通\n\n### 常规用途/ 测试输出控制引脚\n3 个数字输出引脚 GDO0 和 GDO1 和 GDO2为常规控制脚。它们的功能分别由\n- **IOCFG0.GDO0_CFG**\n- **IOCFG1.GDO1_CFG**\n- **IOCFG2.GDO3_CFG**\n控制;\n- GDO1 和在 SPI 接口上的SO 脚是同一脚，因此这个脚上控制的输出在 CSn 高时才有效。\n- GDO1 的默认值为 3状态，当 SPI 接口和其它设备一起使用时这是有效的。\n- GOO0 的默认值为125kHz-146kHz时钟输出（XOSC 频率除以 192）。当 XOSC 在重启\n功率下开启后，使用一个晶体，它就能用来为系统中的 MCU 计时。当 MCU 工作时，通过 IOCFG0.GDO0_CFG，它能改变时钟频率。不会造成时钟波形干扰。\n- 对 IOCFG0.GDO0_CFG 寄存器写入值 128（0x80h），芯片内模拟温度传感器启用。然后，GDO0 上的电压与温度成比例\n- 如果IOCFGx.GDOx_CFG的设置小于0x20并且IOCFGx_GDOx_INV为0（1），在SLEEP模式GDO0和GDO2将由硬件置0（1），GDO1将有硬件置1（0）。这些信号将由硬件保持知道CHIP_RDYn变低。 \n- 如果IOCFGx.GDOx_CFG设置为0x20或更高，GDO引脚在SLEEP状态也工作在设置的状态。例如，如果IOCFG1.GDO1_CFG=0x2E，GDO1在所有状态都是高阻抗。\n\n- - -\nGDO0_CFG[5:0] GDO1_CFG[5:0] GDO2_CFG[5:0] | 描述|\n----|------|\n0(0x00) |与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充时声明。当 RX FIFO 在RXFIFO THR 之下时被反声明\n1(0x01)  |与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充或到达数据包末端时声明。当RX FIFO 空时被反声明\n2(0x02)|与 TX FIFO 关联：当 TX FIFO 在 TXFIFO_THR 上被填充时声明。当 TX FIFO 在TXFIFO THR 之下时被反声明\n3(0x03)  |与 TX FIFO 关联：当 TX FIFO 满时声明。当 TX FIFO 在 TXFIFO_THR 之下为空时被反声明\n4(0x04) | 当 RX FIFO 已溢出时声明。当 FIFO 被淹没时被反声明\n5(0x05) |当 TX FIFO 已下溢时声明。当 FIFO 被淹没时被反声明\n6(0x06)  |当同步词汇被送出/收到时声明，在数据包末端时反声明。对 RX，当可选地址检测失败或 RX FIFO 溢出时，引脚被反声明。若 TX FIFO 下溢，这个引脚将同样被反声明\n7(0x07)  |当一个数据包被 OK CRC 收到时声明。当第一个字节从 RX FIFO 中读取时反声明\n8(0x08)  |前导质量达到。当 PQI 高于控制 PQT 值时声明\n9(0x09)  |清理信道评估。当 RSSI 等级低于门限时为高（决定于当前 CCA MODE 设置）\n10(0x0A)  |锁定检测器输出\n11(0x0B) | 连续时钟。与同步连续模式下的数据同步。数据在下降沿建立，在 SERIAL CLK 上升沿被读取。\n12(0x0C) | 连续同步数据输出。同步连续模式时使用。在 SERIAL_CLK 上升沿 MCU 必须读 DO。数据在下降沿由 CC2500 建立\n13(0x0D)  |连续透明数据输出。同步连续模式时使用。\n14(0x0E)|  载波感应。当 RSSI 等级低于门限时为高\n15(0x0F) | CRC OK。上一个 CRC 对比匹配。当进入/重启 RX 模式时清理。\n16(0x10) | 保留－测试用\n17(0x11) | 保留－测试用\n18(0x12) | 保留－测试用\n19(0x13) | 保留－测试用\n20(0x14) | 保留－测试用\n21(0x15) | 保留－测试用\n22(0x16) | RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。\n23(0x17) | RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。\n24(0x18) | 保留－测试用\n25(0x19)  |保留－测试用\n26(0x1A) | 保留－测试用\n27(0x1B)  |1 时 PA PD.PA 开启，0 时功率降低。能用来控制外部 PA 或 RX/TX 开关\n28(0x1C)  |1 时 LNA PD.LNA 开启，0 时功率降低。能用来控制外部 LNA 或 RX/TX 开关\n29(0x1D) | RX_SYMBOL_TICK。能同RX_HARD_DATA一起使用在交替连续RX输出上。\n30(0x1E) | 保留－测试用\n31(0x1F) | 保留－测试用\n32(0x20)  |保留－测试用\n33(0x21) | 保留－测试用\n34(0x22) | 保留－测试用\n35(0x23) | 保留－测试用\n36(0x24)| 保留－测试用\n37(0x25) | 保留－测试用\n38(0x26) | 保留－测试用\n39(0x27)  |保留－测试用\n40(0x28) | 保留－测试用\n41(0x29)  |CHIP RDY\n42(0x2A)  |保留－测试用\n43(0x2B)|  XOSC STABLE\n44(0x2C) | 保留－测试用\n45(0x2D)  |GDO0 Z EN N。当这个输出为 0 时，GDO0 配置为输入（为连续 TX 数据）\n46(0x2E)  |高阻抗（3-状态）\n47(0x2F)  |HW 到 0（HW1 同 INV 信号一起完成）\n48(0x30) | CLK XOSC/1\n49(0x31) | CLK XOSC/1.5\n50(0x32) | CLK XOSC/2\n51(0x33) | CLK XOSC/3\n52(0x34) | CLK XOSC/4\n53(0x35) | CLK XOSC/6\n54(0x36) | CLK XOSC/8\n55(0x37) | CLK XOSC/12\n56(0x38) | CLK XOSC/16\n57(0x39) | CLK XOSC/24\n58(0x3A)|  CLK XOSC/32\n59(0x3B)|  CLK XOSC/48\n60(0x3C) | CLK XOSC/64\n61(0x3D) | CLK XOSC/96\n62(0x3E)|  CLK XOSC/128\n63(0x3F) | CLK XOSC/192\n\n### 寄存器配置\nCC1101的配置通过编程8位寄存器来实现\n#### 命令寄存器(12个)\n访问这些寄存器将会发起内部状态或模式的改变\n- - -\n地址|名称|描述\n----|----|----\n0x30 |SRES |复位芯片\n0x31 |SFSTXON |使能和校准频率合成器（如果MCSM0.FS_AUTOCAL=1）。如果在RX(使能CCA)，仅当合成器运行时转到等待状态（RX/TX快速转换）\n0x32 |SXOFF |关闭晶振 \n0x33 |SCAL| 校准频率合成器并关闭。SCAL可以从IDLE模式执行而不需要设置收到校准模式（MCSM0.FS_AUTOCAL=0）。 \n0x34| SRX |使能RX。如果来自IDLE状态并且MCSM0.FS_AUTOCAL=1首先执行校准。 \n0x35| STX |在IDLE状态：使能TX。如果MCSM0.FS_AUTOCAL=1首先执行校准。如果在RX状态并使能CCA仅在信道为空时转到TX。 \n0x36 |SIDLE| 离开RX/TX模式，关闭频率合成器，如果可用离开WOR。\n0x38| SWOR| 如果WORCTRL.RC_PD=0像Section19.5的描述一样开始自动RX轮询序列（WOR）。 \n0x39| SPWD |当CSn拉高进入掉电模式。 \n0x3A |SFRX |清除RX FIFO缓冲器。只在IDLE 或 RXFIFO_OVERFLOW状态运行SFRX。\n0x3B |SFTX| 清除TX FIFO缓冲器。只在IDLE 或 TXFIFO_UNDERFLOW状态运行SFTX。 \n0x3C |SWORRST |复位实时时钟到Event1值。 \n0x3D |SMOP |无操作，可以用来访问获取芯片状态字节。\n\n#### 配置寄存器\n- - -\n地址|寄存器|描述|保持在休眠状态中\n----|----|----|----\n0x00 |IOCFG2 |GDO2输出引脚配置 |是 \n0x01 |IOCFG1 |GDO1输出引脚配置 |是\n0x02 |IOCFG0 |GDO0输出引脚配置 |是 \n0x03 |FIFOTHR| RX FIFO和TX FIFO门限| 是 \n0x04 |SYNC1| 同步字，高字节| 是 \n0x05 |SYNC0| 同步字，低字节 |是 \n0x06 |PKTLEN |数据包长度| 是 \n0x07 |PKTCTRL1| 数据包自动控制 |是\n0x08 |PKTCTRL0| 数据包自动控制 |是 \n0x09 |ADDR |设备地址 |是 \n0x0A |CHANNR| 信道号 |是 \n0x0B |FSCTRL1| 频率合成器控制 |是 \n0x0C |FSCTRL0| 频率合成器控制 |是 \n0x0D |FREQ2| 频率控制字，高字节| 是\n0x0E |FREQ1 |频率控制字，中间字节| 是 \n0x0F |FREQ0 |频率控制字，低字节 |是\n0x10| MDMCFG4| Modem配置| 是 \n0x11| MDMCFG3 |Modem配置 |是 、\n0x12| MDMCFG2 |Modem配置 |是 \n0x13| MDMCFG1| Modem配置 |是\n0x14| MDMCFG0| Modem配置 |是\n0x15 |DEVIATN |Modem背离设定 |是 \n0x16 |MCSM2 |主无线控制状态机配置 |是 \n0x17 |MCSM1 |主无线控制状态机配置 |是 \n0x18 |MCSM0 |主无线控制状态机配置 |是 \n0x19 |FOCCFG| 频率偏移补偿配置 |是 \n0x1A |BSCFG |位同步配置 |是\n0x1B| AGCTRL2| AGC控制 |是 \n0x1C| AGCTRL1| AGC控制 |是 \n0x1D| AGCTRL0| AGC控制 |是 \n0x1E |WOREVT1| 事件0超时高字节| 是 \n0x1F| WOREVT0 |事件0超时低字节 |是 \n0x20| WORCTRL |WOR控制 |是 \n0x21 |FREND1| 前端RX配置 |是 \n0x22 |FREND0 |前端TX配置 |是 \n0x23 |FSCAL3| 频率合成器校准 |是\n0x24 |SCAL2 |频率合成器校准 |是 \n0x25 |SCAL1| 频率合成器校准 |是 \n0x26 |SCAL0 |频率合成器校准 |是\n 0x27| RCCTRL1| RC振荡器配置 |是\n 0x28| RCCTRL0 |RC振荡器配置| 是 \n0x29| FSTEST |频率合成器校准控制| 否\n 0x2A| PTEST| 产品测试 |否 \n0x2B |AGCTEST |AGC测试 |否 \n0x2C |TEST2 |各方面测试设定 |否 \n0x2D |TEST1 |各方面测试设定 |否 \n0x2E |TEST0 |各方面测试设定 |否\n\n#### 状态寄存器总览\n- - -\n地址 |寄存器 |描述\n----|----|---\n0x30（0xF0）| PARTNUM |CC1101零件号 \n0x31（0xF1）| VERSION |当前版本号 \n0x32（0xF2） |FREQEST| 频率偏移评估\n0x33（0xF3）| LQI| 解调器链路质量估计 \n0x34（0xF4） |RSSI |接收信号强度指示 \n0x35（0xF5）| MARCSTATE| 控制状态机状态 \n0x36（0xF6）| WORTIME1 |WOR定时器高字节\n0x37（0xF7）| WORTIME0| WOR定时器低字节 \n0x38（0xF8） |PKTSTATUS |当前GDOx状态和数据包状态\n0x39（0xF9）| VCO_VC_DAC| PLL校准模块的当前设置 \n0x3A（0xFA）| TXBYTES |下溢和TX FIFO中的字节数 \n0x3B（0xFB） |RXBYTES |上溢和RX FIFO中的字节数 \n0x3C（0xFC） |RCCTRL1_STATUS |上一次RC振荡器校准结果\n0x3D（0xFD）| RCCTRL0_STATUS |上一次RC振荡器校准结果\n![寄存器总图](http://upload-images.jianshu.io/upload_images/1736256-32d8e78d15cce521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：https://wenku.baidu.com/view/c2b0081b227916888486d769.html","source":"_posts/CC1101笔记.md","raw":"---\ntitle: CC1101笔记\ndate: 2017-03-26 00:38:11\ntags: [无线,433MHZ,cc1101]\ncategories: 射频\n---\n- - -\n# 产品描述\n## 工作频段\n**CC1100: **400-464 MHz and 800-928MHz \n**CC1101:** 387-464 MHz and 779-928MHz\n## 芯片引脚\n\n![cc1101引脚](http://upload-images.jianshu.io/upload_images/1736256-bf9e764fcd560a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n<!--more-->\n### 引脚说明\n---\n|引脚编号  | 引脚名  |引脚类型|  描述\n|----|----|----|----|\n|1|  SCLK  |数字输入  |连续配置接口，时钟输入\n|2|  SO(GD01)| 数字输出  |连续配置接口，数据输出当 CSn 为高时为可选的一般输出脚\n|3 | GDO2 | 数字输出 | 一般用途的数字输出脚：**1>**测试信号；**2>**FIFO 状态信号;**3>**时钟输出，从 XOSC 向下分割;**4>**连续输入 TX 数据\n|4 | DVDD | 功率（数字）|  数字 I/O 和数字中心电压调节器的 1.8V-3.6V 数字功率供给输出\n|5| DCOUPL| 功率（数字）|  对退耦的 1.6V-2.0V 数字功率供给输出;**注意：这个引脚只对 CC2500 使用。不能用来对其他设备提供供给电压**\n|6|  GDO0(ATEST)|数字 I/O | 一般用途的数字输出脚：**1>** 测试信号;**2>**FIFO 状态信号;**3>**时钟输出，从 XOSC 向下分割;**4>**连续输入 TX 数据;**5>**也用作原型/产品测试的模拟测试 I/O\n|7 | CSn|  数字输入 | 连续配置接口，芯片选择\n|8 | XOSC_Q1| 模拟 I/O|  晶体振荡器脚 1，或外部时钟输入\n|9  |AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|10|  XOSC_Q2| 模拟 I/O|  晶体振荡器脚\n|11|  AVDD|  功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|12 | RF_P | RF I/O | 接收模式下对 LNA 的正 RF 输入信号发送模式下对 LNA 的正 RF 输出信号\n|13  |AVDD | RF I/O | 接收模式下对 LNA 的负 RF 输入信号发送模式下对 LNA 的负 RF 输出信号\n|14|  AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|15|  AVDD  |功率（模拟）|  1.8V-3.6V 模拟功率供给连接\n|16|  GND | 地(模拟) | 模拟接地\n|17|  RBIAS|  模拟 I/O | 参考电流的外部偏阻器\n|18 | DGUARD| 功率（数字）|  对数字噪声隔离的功率供给连接\n|19|  GND  |地（数字）|  数字噪声隔离的接地\n|20|  SI|  数字输入 | 连续配置接口，数据输入\n## 通讯方式以及配置方式---SPI\n- CC1101通过4线SPI兼容接口（MOSI,MISO,SCLK和CSn）进行配置，**CC1101作为从设备**。\n这个接口同时用作读写缓冲器数据。\nSPI接口上所有的数据传送都是先传送 **MSB**\n\n>**拓展知识:**\n**MSB:**高位前导\n**LSB:**低位前导。\n**big endian（大端）**是指低地址存放最高有效字节（MSB），\n**little endian（小端）**则是低地址存放最低有效字节（LSB）\n\n### SPI 读写注意事项\n- SPI接口上的所有传送都是以一个头字节（header byte）开始包含以下：\n - 一个**读写位(R/W)：**在读操作中该位置1，在写操作中该位置0；\n - 一个**(突发(burst access)访问位(B)**\n - **6位地址位(A5~A0)**。\n- 在SPI总线上传输数据时，CSn脚必须保持低电平。如果在发送头字节或者读写寄存器时CSn拉高，传送将被取消\n- 当 CSn 变低，在开始转换头字节之前，MCU必须等待，直到 MISO 脚变低。这表明电压调制器已经稳定，晶体正在运作中。除非芯片处在 SLEEP 或 XOFF 状态，MISO 脚在 CSn变低之后总会立即变低。\n\n#### **芯片状态字节**\n-  当头字节在 SPI 接口上被写入时，芯片状态字节在 MISO 脚上被 CC1100 写入。状态字节\n包含关键状态信号，对 MCU 是有用的。**(7)位**是 CHIP_RDYn 信号。在 SCLK 的在第一个正边缘之前，这个信号必须变低。CHIP_RDYn 信号表明晶体正处于工作中，调节数字供给电压是稳定的。\n- 状态字节中的**(6:4 )**位由状态值组成。这个值反映了芯片的状态。当使 XOSC 空闲并使数字中心的能量开启，所有其他模块处于功率降低状态。只有芯片处于此状态时，频率和信道配置才能被更新。当芯片处于接收模式时，RX状态是活动的。同样地，当芯片处于传输模式时，TX 状态是活动的。\n- 状态字节中的后四位**(3:0)**包含FIFO_BYTES_AVAILABLE。为了进行读操作，这个区域包含可从 RX FIFO 读取的字节数。为了进行写操作，这个区域包含可写入 TX  FIFO的字当FIFO_BYTES_AVAILABLE=15，15 或者更多的字节是可用/自由的。\n![状态字节概要](http://upload-images.jianshu.io/upload_images/1736256-043836467cbc7d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 寄存器访问\n- **CC1101 配置寄存器地址: ** 0x00到0x2E\n- 所有的配置寄存器均能读和写。读/写位控制寄存器是读或者写。当对寄存器写时，每当一个待写入的数据字节传输到 SI脚时，状态字节将被送至 SO 脚。\n- 通过在地址头设置突发位，连续地址的寄存器能高效地被访问。这个地址在内部计数器内设置起始地址。每增加一个新的字节（每8 个时钟脉冲），计数器值增加 1。突发访问，不管是读访问还是写访问，必须通过设置CSn 为高来终止。\n- 对 0x30-0x3D 间的地址来说，突发位用以在**状态寄存器**和**命令选通**间选择。状态寄存器只读。突发读取对状态寄存器是不可取的，故它们每次只能被读一个。\n**burst位置1：**选择状态寄存器；\n**burst置0：**选择命令选通（command strobes）;\n\n### 命令选通(command strobes)\n-  命令选通可以看做是CC1101的一个单字节指令。\n通过寻址一个命令选通寄存器，将启动内部序列。\n这些命令用来**禁止晶振**，**使能接收**，**使能无线唤醒** 等；\n- 命令选通寄存器的访问和一个寄存器的写操作一样，但没有数据被传输。就是说，只有 R/W 位（置为 0）突发访问（置为 0）和六个地址位（0x30 和 0x3D 之间）被写。一个命令滤波可能在任何其他 SPI 访问之后，而不需要将 CSn 拉至高电平。命令选通立即被执行，当 CSn 高时 SPWD 和 SXOFF 命令被执行是例外。\n\n### FIFO访问\n- 64 字节 TX FIFO 和 64 字节 RX FIFO 通过0x3F 被访问。\n - 读/写位为 0 时，TX FIFO被访问。\n - 读/写位为 1 时，RX FIFO 被访问。\n- TX FIFO 是只写的，而 RX FIFO 是只读的。\n- 突发位用来决定 FIFO 访问是单字节还是突发访问。\n - 单字节访问方式期望地址的突发位为 0 的头字节和一个数据字节。在数据字节之后跟随一个新的头字节，因此，CSn 继续保持低。\n - 突发访问方式允许一地址字节，然后是连续的数据字节，直到通过设置 CSn 为高来关断访问。\n   -  0x3F : 单字节访问 TX FIFO\n   - 0x7F : 突发访问 TX FIFO\n   - 0xBF : 单字节访问 RX FIFO\n   - 0XFF : 突发访问 RX FIFO\n\n### PATABLE 访问\n- **0x3E**地址用来访问 PATABLE。PATABLE用来选择 PA 能量控制设置。在接收此地址之后，SPI 等待至少 8 个字节。通过控制PATABLE，能实现可控的 PA 能量上升和下降，减少的带宽的 ASK 调制整型也如此。\n- PATABLE 是一个 8 字节表，定义了 PA 控制设 置 ， 为 8 个 PA 功 率 值 （ 由FRENDO.PA_POWER 的 3 个位的值所选择）的每一个所使用。这个表从最低位（0）到最高位（7）可读和写，一次一位。一个索引计数器用来控制对这个表的访问。每读出或写入表中的一个字节，计数器就加 1。当 CSn 为高时，计数值置为最小值。当达到最大值时，计数器由零重新开始计数。\n- 对 PATABLE 的访问是单字节或者突发访问，由突发位决定。当使用突发访问时，索引计数器的值增加；达到7时重新从0开始。读/写位控制访问是写访问（R/W=0）或者读访问(R/W=1)。\n- 如果一字节被写入 PATABLE，且这个值将要被读出，那么，为了设置索引计数器的值重为 0，CSn 必须在读访问之前置为高。注意，当 PATABLE 进入休眠状态时，所存储的内容会丢失，特别是第一个字节（索引\n为 0）。\n\n### 基本控制和状态脚\n- CC1101有2个专用配置脚（GDO0和GDO2）和一个共用脚（GDO1）可以向控制软件输出有用的内部状态信息。这些脚可以用来向MCU产生中断。\n- GDO1和SPI的SO引脚共用。\n - GDO1/SO的默认设置时3态输出。通过选择任何编程选项，GDO1/SO将变为普通引脚。当CSn拉低，该引脚将始终作为普通的SO功能引脚。\n- 在同步和异步串行模式，在发送模式下，GDO0引脚将作为串行TX数据输入引脚。\n- GDO0也可以用作片上模拟温度传感器。通过外部ADC测量GDO0脚的电压，可以计算出温度。温度传感器的详细说明见18页的Section 4.7。通过默认的PTEST寄存器设置（0x7F），如果频率合成器被允许温度传感器的的输出时可用的。（例如：MANCAL，FSTXON，RX和 TX状态）在IDLE状态向PTEST寄存器写入0xBF允许模拟温度传感器是必要的。离开IDLE状态之前，必须恢复PTEST寄存器为默认值（0x7F）。\n\n### 数据包处理的硬件支持\n#### 发送模式下\n>数据包的处理者可以配置增加下面的元素到TX FIFO中的数据包存储\n\n- 一个可编程数量的前导字节；\n-  两字节同步字，可复制为4字节同步字。只插入前导字节或者同步字节是不可能的；\n- 一个覆盖数据区域的CRC校验计算。 \n>推荐设置4字节前导和4字节同步字，除了500k波特率时推荐使用8字节前导。另外，在数据区域和附加的2字节CRC校验，以下可以被执行\n - 使用PN9序列Whitening数据。 \n - 通过使用交叉和编码数据（卷积编码）前向纠错。\n\n#### 接收模式下\n>数据包处理支持将是解构数据包，（如使能）以下可以被执行\n\n- 前导检测\n- 同步字检测\n- CRC计算和CRC检查\n- 一个字节地址检测\n- 包长度检查（根据设置的最大长度检查长度字节）\n- 反Whitening（如果使能）\n- 反交叉和解码( 如果使能 )\n另外，RSSI（接收信号强度指示）、LQI（链路质量指示）和CRC状态的两个状态字节可以附加在RX FIFO\n\n### 数据包格式 \n数据包的格式可以配置为由以下部分组成： \n- 前导 n 同步字 \n- 可选的长度字节 \n- 可选的地址字节 \n- 净荷 \n- 可选的2字节CRC\n![数据格式](http://upload-images.jianshu.io/upload_images/1736256-d71997128378e0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>前导形式是一个交互的0 /1 序 列（01010101...）前导的最小长度是可编程控制的。当启用 TX 时，调制器开始传送前导。当控制数目的前导字节被传送完毕，调制器开始发送同步词汇，然后传送来自 TX FIFO的可利用的数据。若 TX FIFO 为空，调制器将继续传送前导字节，直到第一个字节被写入 TX FIFO。调制器将随后传送同步词汇和数据字节;\n前导字节的长度由MDMCFG1.NU_PREAMBLE 值控制。\n\n### 数据包长度\n- CC1101 支持恒定长度数据包协议和可变长度协议。\n- **可变**或**固定数据包**长度模式能支持的长度可达 255 字节。\n- **大于255个字节**的数据包，必须使用**无限数据包长度模式**；\n>使用不同长度的配置来支持数据包格式。必须确保在发送前半个或任何字节的时候TX模式不被关闭\n\n#### 固定数据包长度\n- 固定数据包长度模式通过设定PKTCTRL0.LENGTH_CONFIG=0来选择。\n- 期望的数据包长度通过PKTLEN寄存器来设置，不包括长度字节和可选的CRC；\n\n#### 可变数据包长度\n- 可变数据包长度模式，PKTCTRL0.LENGTH_CONFIG=1，数据包长度由同步字后面的第一个字节配置。\n- 数据包长度定义为有效载荷，不包括长度字节和可选的CRC。\n- PKTLEN用来配置允许接收的最大数据包长度。\n- 任何接收的数据包长度大于PKTLEN的值都将被丢弃。\n\n##### 可变长数据包收发逻辑\n数据包长度寄存器PKTLEN，在接收和发送时可以重新编程。结合固定数据包长度模式(PKTCTRL0.LENGTH_CONFIG=0)，这使与变长数据包不同的长度配置成为可能。（在可变数据包长度模式下长度字节是同步字节后第一个字节）在接收开始，数据包长度设置为一个大的值。MCU读取足够多的字节来解析数据包中的长度区域。然后依照这个值对PKTLEN进行设置。当数据包处理器中的字节计数器等于PKTLEN寄存器的值时数据包结束。因此，MCU必须在内部计数器达到数据包长度之前确认正确的长度\n\n#### 无限数据包长度模式(大于255个字节)\n- PKTCTRL0.LENGTH_CONFIG=2，数据包长度将设置为无限长，发送和接收将持续到手动关闭。\n\n##### 无限数据包长度收发逻辑\n- 数据包自动控制寄存器PKTCTRL0，可以在TX和RX期间重新编程。这就使发送和接收数据包长度超过256字节并且仍然使用数据包处理器硬件支持成为可能。\n- 在数据包开始时，必须激活无限数据包长度模式（PKTCTRL0.LENGTH_CONFIG=2）。\n- 在发送端，PKTLEN寄存器设置为：mod(长度,256)。\n- 在接收端，MCU读出足够长度的字节来解析出数据包长度并设置PKTLEN寄存器为:mod(长度,256)。\n- 当数据包中还有少于256字节数据，MCU禁止数据包无限长度模式并且激活固定长度模式。\n- 当内部字节计数器到PKTLEN时，发送和接收结束。\n- （无线进入的状态由TXOFF_MODE 或 RXOFF_MODE决定）自动CRC添加/校验也可以使用（通过设置PKTCTRL0.CRC_EN=1）。\n\n>例子:发送一个600字节的数据包时，MCU必须按照以下执行：\n- 设置PKTCTRL0.LENGTH_CONFIG=2。 \n-  重新设置PKTLEN寄存器的值为:（600，256）=88. **(600%256 = 88)**\n-  至少发送345字节（600-255），例如通过填充64字节 TX FIFO 6次（发送384字节）。 \n- 设置PKTCTRL0.LENGTH_CONFIG=0。 \n- 当数据包计数器达到88发送完成。一共600字节被发送。 \n![600个字节发送](http://upload-images.jianshu.io/upload_images/1736256-d519a90a009de7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 接收模式下的数据包过滤\nCC1101支持三种不同类型的数据包过滤：\n- 地址过滤\n- 最大长度过滤\n- CRC过滤\n\n#### 地址过滤\n- 设置PKTCTRL1.ADR_CHK为任意大于0的值使能数据包地址过滤。\n- 数据包处理器启动后将比较数据包中的目标地址字节和在ADDR寄存器中设置的节点地址\n或者当PKTCTRL1.ADR_CHK=10时的广播地址0x00\n以及PKTCTRL1.ADR_CHK=11时的广播地址0x00和0xFF。\n如果接收的地址匹配到一个正确地址，数据包被接收并写入到RX FIFO。\n如果地址匹配失败，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。 \n- 如果当时用无限数据包长度模式和使能地址过滤时接收地址匹配到正确的地址，0xFF将被写入到RX FIFO，其次是地址字节和有效载荷。\n\n#### 最大长度过滤 \n在可变数据包模式，PKTCTRL0.LENGTH_CONFIG=1，PKTLEN.PACKET_LENGTH寄存器用来设置最大允许的数据包长度。如果接收的长度字节大于这个值，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。\n#### CRC过滤\n- 当CRC校验失败时过滤数据包，通过设置PKTCTRL1.CRC_AUTOFLUSH=1使能；\n- CRC自动清除功能将在CRC校验失败时清空所有RX FIFO；\n- 在自动清空RX FIFO后，下一个状态依赖于MCSM1.RXOFF_MODE的设置；\n- 当使用自动清除功能，在可变数据包长度模式下最大数据包长度为63字节，在定长数据包长度模式下是64字节；\n- 注意当PKTCTRL1.APPEND_STATUS使能，最大允许数据包长度将减少2个字节，以确保在数据包的结尾附加的2字节的状态字节在RX FIFO中占用的空间；\n- 当CRC校验错误以后全部RX FIFO被清空；\n- 在接收正确的数据包前之前接收到的数据包必须从FIFO中读出。直到CRC校验正确MCU才从正确的数据包中读取数据；\n\n### 发送模式下的数据包处理\n- 需要发送的有效载荷必须写入到TX FIFO；\n- 如果使能可变数据包长度第一个字节必须写长度字节；\n- 长度字节的值等于数据包的有效载荷（包含可选的地址字节）；\n- 如果在接收端使能地址识别，写入到TX FIFO中的第二个字节必须是地址字节；\n- 如果使能固定数据包长度，写入到TX FIFO中的第一个字节必须是地址字节（接收端使用地址识别）；\n- 调制器将首先发送预置数量的前导字节；\n- 如果TX FIFO中有可发送的数据，调制器将发送2字节（可选4字节）同步字，紧接着是TX FIFO中的有效载荷；\n- 如果使能CRC，校验时计算TX FIFO中的所有数据，然后跟随有效数据发送2个附加字节；\n- 如果在完整的数据包发送完成之前TX FIFO变为空的，无线将进入TXFIFO_UNDERFLOW状态。退出该状态的唯一方法是运行SFTX命令；\n- 发送下溢后再向TX FIFO写入数据不能重启TX模式；\n- 如果whitening(白化)被使能，同步字后面的所有字节将被whitened。这必须在FEC/Interleaver之前完成。Whitening通过设置PKTCTRL0.WHITE_DATA=1使能；\n- 如果FEC/Interleaving(交错器)被使能，同步字后面的所有数据在调制之前将被interleaver 和 FEC编码加密。FEC通过设置MDMCFG1.FEC_EN=1使能；\n\n### 接收模式下的数据包处理\n- 在接收模式，解调器和数据包处理器将寻找一个有效的前导和同步字。\n- 当找到后，解调器将获得位和字节同步，并将接收第一个有效字节。 \n- 如果使能FEC/Interleaver，FEC解码器将开始解码第一个有效字节。Interleaver将在数据被其他任何处理之前解密。 \n- 如果使能whitening，在此基础上数据将被de-whitening(反白化)。 \n- 当使能可变数据包长度模式时，第一个字节是长度字节。数据包处理器储存该值为数据包长度并且通过该长度字节指示接收的字节数量。\n- 如果使用固定数据包长度模式，数据包处理器将接收预置数量的字节。 \n- 接下来，数据包处理器可选的检测地址并且只有地址匹配才继续接收。\n- 如果使能自动CRC校验，数据包处理器计算CRC并与CRC校验结果相匹配。 \n- 在有效载荷的结尾，数据包处理器将可选的写入两个复交数据包状态字节，包括CRC状态、LQI和RSSI\n\n![接收数据包状态字1](http://upload-images.jianshu.io/upload_images/1736256-7786a7bdca8c6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![接收数据包状态字2](http://upload-images.jianshu.io/upload_images/1736256-116e004500c41ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### MCU数据包处理\n如果在固件中执行一个数据包导向的无线协议，MCU需要知道一个数据包什么时候收到/发送。\n加之，超过64字节长度的数据包，当接收时需要读取RX FIFO和当发送时TX FIFO需要重新填充。\n这就意味着MCU必须知道有多少个字节可以从RX FIFO中读取或者可以向TX FIFO中写入。\n有两种方法可以获得必要的状态信息。\n- 中断驱动方法 \n  当同步字接收/发送完成或者完整的数据包接收/发送通过设置IOCFGx.GDOx_CFG=0x06，GDO脚可以用在RX和TX中产生一个中断。\n此外，\nIOCFGx.GDOx_CFG还有两个配置用来产生中断，源于有多少字节在RX FIFO或TX FIFO。\nIOCFGx.GDOx_CFG=0x00和IOCFGx.GDOx_CFG=0x01为RX FIFO，\nIOCFGx.GDOx_CFG=0x02和IOCFGx.GDOx_CFG=0x03为TX FIFO。\n\n- SPI轮询 \nPKTSTATUS可以使用给定的速率查询以获得GDO0和GDO2当前值。\nRXBYTES 和 TXBYTES可以使用给定的速率查询以获得RX FIFO或者TX FIFO中的字节数。\n合二为一的，RX FIFO和TX FIFO中的字节数量可以从每次头字节、数据字节或命令选通在SPI总线上发送时MISO引脚返回的芯片状态字节读取。 \n>**推荐使用中断驱动方法**因为高速率SPI轮询将减小RX的灵敏度。\n而且，在Section10.3和CC1101勘误表【4】中，当使用SPI轮询，单一读取PKTSTATUS、 RXBYTES和 TXBYTES有一个小的有限的错误的可能性。\n当读取芯片状态字节有同样的问题。 \n\n### RSSI\n- RSSI的值时在选择的通道中信号功率级别的估计。\n- 这个值基于RX中当前增益的设置和信道中的标准信号等级。 \n- 在RX模式，RSSI可以连续的从RSSI状态寄存器读取知道解调器检测到一个同步字（当同步字检测使能）。此时RSSI读取的值将被冻结知道芯片下一次进入RX状态。 \n>注意：从无线进入RX模式到在RSSI寄存器检测到一个正确的RSSI值需要一定的时间。查看DN505[15]获得RSSI响应时间估算的详细信息。 \nRSSI的值以dBm和1/2 dB给出。\nRSSI更新速率，fRSSI 依赖于接收滤波带宽和AGCCTRL0.FILTER_LENGTH。\n\n- 如果使能PKTCTRL1.APPEND_STATUS，数据包最后的RSSI值自动添加到有效载荷后面的第一个附加字节。 \n- 从RSSI状态寄存器读出的RSSI值时2个补足的数字。下面的程序可以将RSSI转换为完整的功率级别（RSSI_dBm）。 \n1) 读取RSSI状态寄存器 \n2) 将读到的数据从16进制数转换到二进制数（RSSI_dec） \n3)  如果RSSI_dec≧128，RSSI_dBm =(RSSI_dec - 256)/2 – RSSI_offset 4）\n4 )  如果RSSI_dec＜128，RSSI_dBm =RSSI_dec /2 – RSSI_offset\n\n### 净信道评估（CCA）\n- CCA用来显示当前信道是空闲还是繁忙。\n- 通过设定IOCFGx.GDOx_CFG=0x09，当前的CCA状态在任何一个GDO引脚都可以查看。 \n- MCSM1.CCA_MODE用来选择当确定CCA时使用的模式。 \n- 当CC1101在RX状态时给出STX 或 SFSTXON命令选通，仅能在净信道条件完成才能进入TX或FSTXON状态。\n- 此外，芯片将仍处于RX状态。如果信道接下来变为可用的，在一个新的命令选通通过SPI接口发送之前，无线不会进入TX或FSTXON状态。这个特性叫做**TX-if-CCA**。\n可以编程设置4种CCA条件：\n  - 始终（禁止CCA，总是进入TX）\n  - 如果RSSI低于门限值 \n  -  除非正常接收一个数据包 \n  - 以上两个（RSSI低于门限值和没有正常接收一个数据包）\n\n### 链路质量指示（LQI）\n- 信号链路质量指示是一个公制的接收信号的当前质量。\n- 若 PKTCTRL1.APPEND_STATUS启用，则这个值自动附加在接收数据包的末端。\n- 这个值也可从 LQI 状态寄存器上读取。\nLQI 由跟随同步词汇的 64 个符号（头 8 个数据包字节）计算得来。LQI 最好用作连接\n质量的一个相对的度量，因为这个值决定于调制格式。\n\n### 上电启动序列\n- 当电源给电，系统必须复位。\n- 通过下面描述的2个序列中的一个来完成，即自动上电复位（POR）或者手动复位。\n- 自动上电复位或手动复位之后，推荐转换GDO0引脚上输出的信号。\n- 默认设置是以CLK_XOSC/192的频率输出一个时钟信号。\n- 然而，为了在TX和RX中优化执行，必须**__GD0/1/2 引脚配置__**中的配置来配置GDO脚\n\n#### 自动POR\nCC1101内部包含上电复位电路。最小的需求见表15，完整的上电复位功能必须遵循。当CHIP_RDYn变低内部上电序列完成。在CSn拉低后在SO引脚上可以查看CHIP_RDYn。 \n当CC1101复位完成，芯片将进入IDLE状态，晶振开始运行。如果芯片在上电之后有足够的时间让晶振稳定，在捕获CSn变低之后SO引脚将马上变低。如果在复位完成之前CSn被拉低，SO引脚将首先变高，指示晶振没有稳定，变低之前见下图。\n![自动POR](http://upload-images.jianshu.io/upload_images/1736256-1dc0e7c8463d0096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 手动复位\nCC1101上的其它全部复位时使用SRES命令。通过执行这个命令，所有内部寄存器和状态恢复默认，IDLE状态。手动复位序列如下（图 手动复位）： \n- 设置SCLK=1，SI=0，避免引脚控制模式可能出现的问题。 \n-  选通CS低/高。 \n- 保持CS为低，然后拉高，至少40us才可以拉低 \n- 将CSn拉低等到SO拉低（CHIP_RDYn）。\n- 在SI线上发布SRES选通。 \n- 当SO再一次拉低，复位完成，芯片进入IDLE状态\n![手动复位](http://upload-images.jianshu.io/upload_images/1736256-e692bc860255aa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>注意：以上复位程序只需要在电源给电之后。如果用户在这之后想要复位CC1101，只需要执行SRES命令选通\n\n### 常规用途/ 测试输出控制引脚\n3 个数字输出引脚 GDO0 和 GDO1 和 GDO2为常规控制脚。它们的功能分别由\n- **IOCFG0.GDO0_CFG**\n- **IOCFG1.GDO1_CFG**\n- **IOCFG2.GDO3_CFG**\n控制;\n- GDO1 和在 SPI 接口上的SO 脚是同一脚，因此这个脚上控制的输出在 CSn 高时才有效。\n- GDO1 的默认值为 3状态，当 SPI 接口和其它设备一起使用时这是有效的。\n- GOO0 的默认值为125kHz-146kHz时钟输出（XOSC 频率除以 192）。当 XOSC 在重启\n功率下开启后，使用一个晶体，它就能用来为系统中的 MCU 计时。当 MCU 工作时，通过 IOCFG0.GDO0_CFG，它能改变时钟频率。不会造成时钟波形干扰。\n- 对 IOCFG0.GDO0_CFG 寄存器写入值 128（0x80h），芯片内模拟温度传感器启用。然后，GDO0 上的电压与温度成比例\n- 如果IOCFGx.GDOx_CFG的设置小于0x20并且IOCFGx_GDOx_INV为0（1），在SLEEP模式GDO0和GDO2将由硬件置0（1），GDO1将有硬件置1（0）。这些信号将由硬件保持知道CHIP_RDYn变低。 \n- 如果IOCFGx.GDOx_CFG设置为0x20或更高，GDO引脚在SLEEP状态也工作在设置的状态。例如，如果IOCFG1.GDO1_CFG=0x2E，GDO1在所有状态都是高阻抗。\n\n- - -\nGDO0_CFG[5:0] GDO1_CFG[5:0] GDO2_CFG[5:0] | 描述|\n----|------|\n0(0x00) |与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充时声明。当 RX FIFO 在RXFIFO THR 之下时被反声明\n1(0x01)  |与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充或到达数据包末端时声明。当RX FIFO 空时被反声明\n2(0x02)|与 TX FIFO 关联：当 TX FIFO 在 TXFIFO_THR 上被填充时声明。当 TX FIFO 在TXFIFO THR 之下时被反声明\n3(0x03)  |与 TX FIFO 关联：当 TX FIFO 满时声明。当 TX FIFO 在 TXFIFO_THR 之下为空时被反声明\n4(0x04) | 当 RX FIFO 已溢出时声明。当 FIFO 被淹没时被反声明\n5(0x05) |当 TX FIFO 已下溢时声明。当 FIFO 被淹没时被反声明\n6(0x06)  |当同步词汇被送出/收到时声明，在数据包末端时反声明。对 RX，当可选地址检测失败或 RX FIFO 溢出时，引脚被反声明。若 TX FIFO 下溢，这个引脚将同样被反声明\n7(0x07)  |当一个数据包被 OK CRC 收到时声明。当第一个字节从 RX FIFO 中读取时反声明\n8(0x08)  |前导质量达到。当 PQI 高于控制 PQT 值时声明\n9(0x09)  |清理信道评估。当 RSSI 等级低于门限时为高（决定于当前 CCA MODE 设置）\n10(0x0A)  |锁定检测器输出\n11(0x0B) | 连续时钟。与同步连续模式下的数据同步。数据在下降沿建立，在 SERIAL CLK 上升沿被读取。\n12(0x0C) | 连续同步数据输出。同步连续模式时使用。在 SERIAL_CLK 上升沿 MCU 必须读 DO。数据在下降沿由 CC2500 建立\n13(0x0D)  |连续透明数据输出。同步连续模式时使用。\n14(0x0E)|  载波感应。当 RSSI 等级低于门限时为高\n15(0x0F) | CRC OK。上一个 CRC 对比匹配。当进入/重启 RX 模式时清理。\n16(0x10) | 保留－测试用\n17(0x11) | 保留－测试用\n18(0x12) | 保留－测试用\n19(0x13) | 保留－测试用\n20(0x14) | 保留－测试用\n21(0x15) | 保留－测试用\n22(0x16) | RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。\n23(0x17) | RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。\n24(0x18) | 保留－测试用\n25(0x19)  |保留－测试用\n26(0x1A) | 保留－测试用\n27(0x1B)  |1 时 PA PD.PA 开启，0 时功率降低。能用来控制外部 PA 或 RX/TX 开关\n28(0x1C)  |1 时 LNA PD.LNA 开启，0 时功率降低。能用来控制外部 LNA 或 RX/TX 开关\n29(0x1D) | RX_SYMBOL_TICK。能同RX_HARD_DATA一起使用在交替连续RX输出上。\n30(0x1E) | 保留－测试用\n31(0x1F) | 保留－测试用\n32(0x20)  |保留－测试用\n33(0x21) | 保留－测试用\n34(0x22) | 保留－测试用\n35(0x23) | 保留－测试用\n36(0x24)| 保留－测试用\n37(0x25) | 保留－测试用\n38(0x26) | 保留－测试用\n39(0x27)  |保留－测试用\n40(0x28) | 保留－测试用\n41(0x29)  |CHIP RDY\n42(0x2A)  |保留－测试用\n43(0x2B)|  XOSC STABLE\n44(0x2C) | 保留－测试用\n45(0x2D)  |GDO0 Z EN N。当这个输出为 0 时，GDO0 配置为输入（为连续 TX 数据）\n46(0x2E)  |高阻抗（3-状态）\n47(0x2F)  |HW 到 0（HW1 同 INV 信号一起完成）\n48(0x30) | CLK XOSC/1\n49(0x31) | CLK XOSC/1.5\n50(0x32) | CLK XOSC/2\n51(0x33) | CLK XOSC/3\n52(0x34) | CLK XOSC/4\n53(0x35) | CLK XOSC/6\n54(0x36) | CLK XOSC/8\n55(0x37) | CLK XOSC/12\n56(0x38) | CLK XOSC/16\n57(0x39) | CLK XOSC/24\n58(0x3A)|  CLK XOSC/32\n59(0x3B)|  CLK XOSC/48\n60(0x3C) | CLK XOSC/64\n61(0x3D) | CLK XOSC/96\n62(0x3E)|  CLK XOSC/128\n63(0x3F) | CLK XOSC/192\n\n### 寄存器配置\nCC1101的配置通过编程8位寄存器来实现\n#### 命令寄存器(12个)\n访问这些寄存器将会发起内部状态或模式的改变\n- - -\n地址|名称|描述\n----|----|----\n0x30 |SRES |复位芯片\n0x31 |SFSTXON |使能和校准频率合成器（如果MCSM0.FS_AUTOCAL=1）。如果在RX(使能CCA)，仅当合成器运行时转到等待状态（RX/TX快速转换）\n0x32 |SXOFF |关闭晶振 \n0x33 |SCAL| 校准频率合成器并关闭。SCAL可以从IDLE模式执行而不需要设置收到校准模式（MCSM0.FS_AUTOCAL=0）。 \n0x34| SRX |使能RX。如果来自IDLE状态并且MCSM0.FS_AUTOCAL=1首先执行校准。 \n0x35| STX |在IDLE状态：使能TX。如果MCSM0.FS_AUTOCAL=1首先执行校准。如果在RX状态并使能CCA仅在信道为空时转到TX。 \n0x36 |SIDLE| 离开RX/TX模式，关闭频率合成器，如果可用离开WOR。\n0x38| SWOR| 如果WORCTRL.RC_PD=0像Section19.5的描述一样开始自动RX轮询序列（WOR）。 \n0x39| SPWD |当CSn拉高进入掉电模式。 \n0x3A |SFRX |清除RX FIFO缓冲器。只在IDLE 或 RXFIFO_OVERFLOW状态运行SFRX。\n0x3B |SFTX| 清除TX FIFO缓冲器。只在IDLE 或 TXFIFO_UNDERFLOW状态运行SFTX。 \n0x3C |SWORRST |复位实时时钟到Event1值。 \n0x3D |SMOP |无操作，可以用来访问获取芯片状态字节。\n\n#### 配置寄存器\n- - -\n地址|寄存器|描述|保持在休眠状态中\n----|----|----|----\n0x00 |IOCFG2 |GDO2输出引脚配置 |是 \n0x01 |IOCFG1 |GDO1输出引脚配置 |是\n0x02 |IOCFG0 |GDO0输出引脚配置 |是 \n0x03 |FIFOTHR| RX FIFO和TX FIFO门限| 是 \n0x04 |SYNC1| 同步字，高字节| 是 \n0x05 |SYNC0| 同步字，低字节 |是 \n0x06 |PKTLEN |数据包长度| 是 \n0x07 |PKTCTRL1| 数据包自动控制 |是\n0x08 |PKTCTRL0| 数据包自动控制 |是 \n0x09 |ADDR |设备地址 |是 \n0x0A |CHANNR| 信道号 |是 \n0x0B |FSCTRL1| 频率合成器控制 |是 \n0x0C |FSCTRL0| 频率合成器控制 |是 \n0x0D |FREQ2| 频率控制字，高字节| 是\n0x0E |FREQ1 |频率控制字，中间字节| 是 \n0x0F |FREQ0 |频率控制字，低字节 |是\n0x10| MDMCFG4| Modem配置| 是 \n0x11| MDMCFG3 |Modem配置 |是 、\n0x12| MDMCFG2 |Modem配置 |是 \n0x13| MDMCFG1| Modem配置 |是\n0x14| MDMCFG0| Modem配置 |是\n0x15 |DEVIATN |Modem背离设定 |是 \n0x16 |MCSM2 |主无线控制状态机配置 |是 \n0x17 |MCSM1 |主无线控制状态机配置 |是 \n0x18 |MCSM0 |主无线控制状态机配置 |是 \n0x19 |FOCCFG| 频率偏移补偿配置 |是 \n0x1A |BSCFG |位同步配置 |是\n0x1B| AGCTRL2| AGC控制 |是 \n0x1C| AGCTRL1| AGC控制 |是 \n0x1D| AGCTRL0| AGC控制 |是 \n0x1E |WOREVT1| 事件0超时高字节| 是 \n0x1F| WOREVT0 |事件0超时低字节 |是 \n0x20| WORCTRL |WOR控制 |是 \n0x21 |FREND1| 前端RX配置 |是 \n0x22 |FREND0 |前端TX配置 |是 \n0x23 |FSCAL3| 频率合成器校准 |是\n0x24 |SCAL2 |频率合成器校准 |是 \n0x25 |SCAL1| 频率合成器校准 |是 \n0x26 |SCAL0 |频率合成器校准 |是\n 0x27| RCCTRL1| RC振荡器配置 |是\n 0x28| RCCTRL0 |RC振荡器配置| 是 \n0x29| FSTEST |频率合成器校准控制| 否\n 0x2A| PTEST| 产品测试 |否 \n0x2B |AGCTEST |AGC测试 |否 \n0x2C |TEST2 |各方面测试设定 |否 \n0x2D |TEST1 |各方面测试设定 |否 \n0x2E |TEST0 |各方面测试设定 |否\n\n#### 状态寄存器总览\n- - -\n地址 |寄存器 |描述\n----|----|---\n0x30（0xF0）| PARTNUM |CC1101零件号 \n0x31（0xF1）| VERSION |当前版本号 \n0x32（0xF2） |FREQEST| 频率偏移评估\n0x33（0xF3）| LQI| 解调器链路质量估计 \n0x34（0xF4） |RSSI |接收信号强度指示 \n0x35（0xF5）| MARCSTATE| 控制状态机状态 \n0x36（0xF6）| WORTIME1 |WOR定时器高字节\n0x37（0xF7）| WORTIME0| WOR定时器低字节 \n0x38（0xF8） |PKTSTATUS |当前GDOx状态和数据包状态\n0x39（0xF9）| VCO_VC_DAC| PLL校准模块的当前设置 \n0x3A（0xFA）| TXBYTES |下溢和TX FIFO中的字节数 \n0x3B（0xFB） |RXBYTES |上溢和RX FIFO中的字节数 \n0x3C（0xFC） |RCCTRL1_STATUS |上一次RC振荡器校准结果\n0x3D（0xFD）| RCCTRL0_STATUS |上一次RC振荡器校准结果\n![寄存器总图](http://upload-images.jianshu.io/upload_images/1736256-32d8e78d15cce521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：https://wenku.baidu.com/view/c2b0081b227916888486d769.html","slug":"CC1101笔记","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt770005tns1gt9d29f4","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h1 id=\"产品描述\"><a href=\"#产品描述\" class=\"headerlink\" title=\"产品描述\"></a>产品描述</h1><h2 id=\"工作频段\"><a href=\"#工作频段\" class=\"headerlink\" title=\"工作频段\"></a>工作频段</h2><p><strong>CC1100: </strong>400-464 MHz and 800-928MHz<br><strong>CC1101:</strong> 387-464 MHz and 779-928MHz</p>\n<h2 id=\"芯片引脚\"><a href=\"#芯片引脚\" class=\"headerlink\" title=\"芯片引脚\"></a>芯片引脚</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-bf9e764fcd560a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"cc1101引脚\"><br><a id=\"more\"></a></p>\n<h3 id=\"引脚说明\"><a href=\"#引脚说明\" class=\"headerlink\" title=\"引脚说明\"></a>引脚说明</h3><hr>\n<table>\n<thead>\n<tr>\n<th>引脚编号</th>\n<th>引脚名</th>\n<th>引脚类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>SCLK</td>\n<td>数字输入</td>\n<td>连续配置接口，时钟输入</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SO(GD01)</td>\n<td>数字输出</td>\n<td>连续配置接口，数据输出当 CSn 为高时为可选的一般输出脚</td>\n</tr>\n<tr>\n<td>3</td>\n<td>GDO2</td>\n<td>数字输出</td>\n<td>一般用途的数字输出脚：<strong>1&gt;</strong>测试信号；<strong>2&gt;</strong>FIFO 状态信号;<strong>3&gt;</strong>时钟输出，从 XOSC 向下分割;<strong>4&gt;</strong>连续输入 TX 数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DVDD</td>\n<td>功率（数字）</td>\n<td>数字 I/O 和数字中心电压调节器的 1.8V-3.6V 数字功率供给输出</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DCOUPL</td>\n<td>功率（数字）</td>\n<td>对退耦的 1.6V-2.0V 数字功率供给输出;<strong>注意：这个引脚只对 CC2500 使用。不能用来对其他设备提供供给电压</strong></td>\n</tr>\n<tr>\n<td>6</td>\n<td>GDO0(ATEST)</td>\n<td>数字 I/O</td>\n<td>一般用途的数字输出脚：<strong>1&gt;</strong> 测试信号;<strong>2&gt;</strong>FIFO 状态信号;<strong>3&gt;</strong>时钟输出，从 XOSC 向下分割;<strong>4&gt;</strong>连续输入 TX 数据;<strong>5&gt;</strong>也用作原型/产品测试的模拟测试 I/O</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CSn</td>\n<td>数字输入</td>\n<td>连续配置接口，芯片选择</td>\n</tr>\n<tr>\n<td>8</td>\n<td>XOSC_Q1</td>\n<td>模拟 I/O</td>\n<td>晶体振荡器脚 1，或外部时钟输入</td>\n</tr>\n<tr>\n<td>9</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>10</td>\n<td>XOSC_Q2</td>\n<td>模拟 I/O</td>\n<td>晶体振荡器脚</td>\n</tr>\n<tr>\n<td>11</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>12</td>\n<td>RF_P</td>\n<td>RF I/O</td>\n<td>接收模式下对 LNA 的正 RF 输入信号发送模式下对 LNA 的正 RF 输出信号</td>\n</tr>\n<tr>\n<td>13</td>\n<td>AVDD</td>\n<td>RF I/O</td>\n<td>接收模式下对 LNA 的负 RF 输入信号发送模式下对 LNA 的负 RF 输出信号</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>15</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>16</td>\n<td>GND</td>\n<td>地(模拟)</td>\n<td>模拟接地</td>\n</tr>\n<tr>\n<td>17</td>\n<td>RBIAS</td>\n<td>模拟 I/O</td>\n<td>参考电流的外部偏阻器</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DGUARD</td>\n<td>功率（数字）</td>\n<td>对数字噪声隔离的功率供给连接</td>\n</tr>\n<tr>\n<td>19</td>\n<td>GND</td>\n<td>地（数字）</td>\n<td>数字噪声隔离的接地</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SI</td>\n<td>数字输入</td>\n<td>连续配置接口，数据输入</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"通讯方式以及配置方式—SPI\"><a href=\"#通讯方式以及配置方式—SPI\" class=\"headerlink\" title=\"通讯方式以及配置方式—SPI\"></a>通讯方式以及配置方式—SPI</h2><ul>\n<li>CC1101通过4线SPI兼容接口（MOSI,MISO,SCLK和CSn）进行配置，<strong>CC1101作为从设备</strong>。<br>这个接口同时用作读写缓冲器数据。<br>SPI接口上所有的数据传送都是先传送 <strong>MSB</strong></li>\n</ul>\n<blockquote>\n<p><strong>拓展知识:</strong><br><strong>MSB:</strong>高位前导<br><strong>LSB:</strong>低位前导。<br><strong>big endian（大端）</strong>是指低地址存放最高有效字节（MSB），<br><strong>little endian（小端）</strong>则是低地址存放最低有效字节（LSB）</p>\n</blockquote>\n<h3 id=\"SPI-读写注意事项\"><a href=\"#SPI-读写注意事项\" class=\"headerlink\" title=\"SPI 读写注意事项\"></a>SPI 读写注意事项</h3><ul>\n<li>SPI接口上的所有传送都是以一个头字节（header byte）开始包含以下：<ul>\n<li>一个<strong>读写位(R/W)：</strong>在读操作中该位置1，在写操作中该位置0；</li>\n<li>一个<strong>(突发(burst access)访问位(B)</strong></li>\n<li><strong>6位地址位(A5~A0)</strong>。</li>\n</ul>\n</li>\n<li>在SPI总线上传输数据时，CSn脚必须保持低电平。如果在发送头字节或者读写寄存器时CSn拉高，传送将被取消</li>\n<li>当 CSn 变低，在开始转换头字节之前，MCU必须等待，直到 MISO 脚变低。这表明电压调制器已经稳定，晶体正在运作中。除非芯片处在 SLEEP 或 XOFF 状态，MISO 脚在 CSn变低之后总会立即变低。</li>\n</ul>\n<h4 id=\"芯片状态字节\"><a href=\"#芯片状态字节\" class=\"headerlink\" title=\"芯片状态字节\"></a><strong>芯片状态字节</strong></h4><ul>\n<li>当头字节在 SPI 接口上被写入时，芯片状态字节在 MISO 脚上被 CC1100 写入。状态字节<br>包含关键状态信号，对 MCU 是有用的。<strong>(7)位</strong>是 CHIP_RDYn 信号。在 SCLK 的在第一个正边缘之前，这个信号必须变低。CHIP_RDYn 信号表明晶体正处于工作中，调节数字供给电压是稳定的。</li>\n<li>状态字节中的<strong>(6:4 )</strong>位由状态值组成。这个值反映了芯片的状态。当使 XOSC 空闲并使数字中心的能量开启，所有其他模块处于功率降低状态。只有芯片处于此状态时，频率和信道配置才能被更新。当芯片处于接收模式时，RX状态是活动的。同样地，当芯片处于传输模式时，TX 状态是活动的。</li>\n<li>状态字节中的后四位<strong>(3:0)</strong>包含FIFO_BYTES_AVAILABLE。为了进行读操作，这个区域包含可从 RX FIFO 读取的字节数。为了进行写操作，这个区域包含可写入 TX  FIFO的字当FIFO_BYTES_AVAILABLE=15，15 或者更多的字节是可用/自由的。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-043836467cbc7d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"状态字节概要\"></li>\n</ul>\n<h3 id=\"寄存器访问\"><a href=\"#寄存器访问\" class=\"headerlink\" title=\"寄存器访问\"></a>寄存器访问</h3><ul>\n<li><strong>CC1101 配置寄存器地址: </strong> 0x00到0x2E</li>\n<li>所有的配置寄存器均能读和写。读/写位控制寄存器是读或者写。当对寄存器写时，每当一个待写入的数据字节传输到 SI脚时，状态字节将被送至 SO 脚。</li>\n<li>通过在地址头设置突发位，连续地址的寄存器能高效地被访问。这个地址在内部计数器内设置起始地址。每增加一个新的字节（每8 个时钟脉冲），计数器值增加 1。突发访问，不管是读访问还是写访问，必须通过设置CSn 为高来终止。</li>\n<li>对 0x30-0x3D 间的地址来说，突发位用以在<strong>状态寄存器</strong>和<strong>命令选通</strong>间选择。状态寄存器只读。突发读取对状态寄存器是不可取的，故它们每次只能被读一个。<br><strong>burst位置1：</strong>选择状态寄存器；<br><strong>burst置0：</strong>选择命令选通（command strobes）;</li>\n</ul>\n<h3 id=\"命令选通-command-strobes\"><a href=\"#命令选通-command-strobes\" class=\"headerlink\" title=\"命令选通(command strobes)\"></a>命令选通(command strobes)</h3><ul>\n<li>命令选通可以看做是CC1101的一个单字节指令。<br>通过寻址一个命令选通寄存器，将启动内部序列。<br>这些命令用来<strong>禁止晶振</strong>，<strong>使能接收</strong>，<strong>使能无线唤醒</strong> 等；</li>\n<li>命令选通寄存器的访问和一个寄存器的写操作一样，但没有数据被传输。就是说，只有 R/W 位（置为 0）突发访问（置为 0）和六个地址位（0x30 和 0x3D 之间）被写。一个命令滤波可能在任何其他 SPI 访问之后，而不需要将 CSn 拉至高电平。命令选通立即被执行，当 CSn 高时 SPWD 和 SXOFF 命令被执行是例外。</li>\n</ul>\n<h3 id=\"FIFO访问\"><a href=\"#FIFO访问\" class=\"headerlink\" title=\"FIFO访问\"></a>FIFO访问</h3><ul>\n<li>64 字节 TX FIFO 和 64 字节 RX FIFO 通过0x3F 被访问。<ul>\n<li>读/写位为 0 时，TX FIFO被访问。</li>\n<li>读/写位为 1 时，RX FIFO 被访问。</li>\n</ul>\n</li>\n<li>TX FIFO 是只写的，而 RX FIFO 是只读的。</li>\n<li>突发位用来决定 FIFO 访问是单字节还是突发访问。<ul>\n<li>单字节访问方式期望地址的突发位为 0 的头字节和一个数据字节。在数据字节之后跟随一个新的头字节，因此，CSn 继续保持低。</li>\n<li>突发访问方式允许一地址字节，然后是连续的数据字节，直到通过设置 CSn 为高来关断访问。<ul>\n<li>0x3F : 单字节访问 TX FIFO</li>\n<li>0x7F : 突发访问 TX FIFO</li>\n<li>0xBF : 单字节访问 RX FIFO</li>\n<li>0XFF : 突发访问 RX FIFO</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"PATABLE-访问\"><a href=\"#PATABLE-访问\" class=\"headerlink\" title=\"PATABLE 访问\"></a>PATABLE 访问</h3><ul>\n<li><strong>0x3E</strong>地址用来访问 PATABLE。PATABLE用来选择 PA 能量控制设置。在接收此地址之后，SPI 等待至少 8 个字节。通过控制PATABLE，能实现可控的 PA 能量上升和下降，减少的带宽的 ASK 调制整型也如此。</li>\n<li>PATABLE 是一个 8 字节表，定义了 PA 控制设 置 ， 为 8 个 PA 功 率 值 （ 由FRENDO.PA_POWER 的 3 个位的值所选择）的每一个所使用。这个表从最低位（0）到最高位（7）可读和写，一次一位。一个索引计数器用来控制对这个表的访问。每读出或写入表中的一个字节，计数器就加 1。当 CSn 为高时，计数值置为最小值。当达到最大值时，计数器由零重新开始计数。</li>\n<li>对 PATABLE 的访问是单字节或者突发访问，由突发位决定。当使用突发访问时，索引计数器的值增加；达到7时重新从0开始。读/写位控制访问是写访问（R/W=0）或者读访问(R/W=1)。</li>\n<li>如果一字节被写入 PATABLE，且这个值将要被读出，那么，为了设置索引计数器的值重为 0，CSn 必须在读访问之前置为高。注意，当 PATABLE 进入休眠状态时，所存储的内容会丢失，特别是第一个字节（索引<br>为 0）。</li>\n</ul>\n<h3 id=\"基本控制和状态脚\"><a href=\"#基本控制和状态脚\" class=\"headerlink\" title=\"基本控制和状态脚\"></a>基本控制和状态脚</h3><ul>\n<li>CC1101有2个专用配置脚（GDO0和GDO2）和一个共用脚（GDO1）可以向控制软件输出有用的内部状态信息。这些脚可以用来向MCU产生中断。</li>\n<li>GDO1和SPI的SO引脚共用。<ul>\n<li>GDO1/SO的默认设置时3态输出。通过选择任何编程选项，GDO1/SO将变为普通引脚。当CSn拉低，该引脚将始终作为普通的SO功能引脚。</li>\n</ul>\n</li>\n<li>在同步和异步串行模式，在发送模式下，GDO0引脚将作为串行TX数据输入引脚。</li>\n<li>GDO0也可以用作片上模拟温度传感器。通过外部ADC测量GDO0脚的电压，可以计算出温度。温度传感器的详细说明见18页的Section 4.7。通过默认的PTEST寄存器设置（0x7F），如果频率合成器被允许温度传感器的的输出时可用的。（例如：MANCAL，FSTXON，RX和 TX状态）在IDLE状态向PTEST寄存器写入0xBF允许模拟温度传感器是必要的。离开IDLE状态之前，必须恢复PTEST寄存器为默认值（0x7F）。</li>\n</ul>\n<h3 id=\"数据包处理的硬件支持\"><a href=\"#数据包处理的硬件支持\" class=\"headerlink\" title=\"数据包处理的硬件支持\"></a>数据包处理的硬件支持</h3><h4 id=\"发送模式下\"><a href=\"#发送模式下\" class=\"headerlink\" title=\"发送模式下\"></a>发送模式下</h4><blockquote>\n<p>数据包的处理者可以配置增加下面的元素到TX FIFO中的数据包存储</p>\n</blockquote>\n<ul>\n<li>一个可编程数量的前导字节；</li>\n<li>两字节同步字，可复制为4字节同步字。只插入前导字节或者同步字节是不可能的；</li>\n<li>一个覆盖数据区域的CRC校验计算。 <blockquote>\n<p>推荐设置4字节前导和4字节同步字，除了500k波特率时推荐使用8字节前导。另外，在数据区域和附加的2字节CRC校验，以下可以被执行</p>\n<ul>\n<li>使用PN9序列Whitening数据。 </li>\n<li>通过使用交叉和编码数据（卷积编码）前向纠错。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"接收模式下\"><a href=\"#接收模式下\" class=\"headerlink\" title=\"接收模式下\"></a>接收模式下</h4><blockquote>\n<p>数据包处理支持将是解构数据包，（如使能）以下可以被执行</p>\n</blockquote>\n<ul>\n<li>前导检测</li>\n<li>同步字检测</li>\n<li>CRC计算和CRC检查</li>\n<li>一个字节地址检测</li>\n<li>包长度检查（根据设置的最大长度检查长度字节）</li>\n<li>反Whitening（如果使能）</li>\n<li>反交叉和解码( 如果使能 )<br>另外，RSSI（接收信号强度指示）、LQI（链路质量指示）和CRC状态的两个状态字节可以附加在RX FIFO</li>\n</ul>\n<h3 id=\"数据包格式\"><a href=\"#数据包格式\" class=\"headerlink\" title=\"数据包格式\"></a>数据包格式</h3><p>数据包的格式可以配置为由以下部分组成： </p>\n<ul>\n<li>前导 n 同步字 </li>\n<li>可选的长度字节 </li>\n<li>可选的地址字节 </li>\n<li>净荷 </li>\n<li>可选的2字节CRC<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d71997128378e0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"数据格式\"></li>\n</ul>\n<blockquote>\n<p>前导形式是一个交互的0 /1 序 列（01010101…）前导的最小长度是可编程控制的。当启用 TX 时，调制器开始传送前导。当控制数目的前导字节被传送完毕，调制器开始发送同步词汇，然后传送来自 TX FIFO的可利用的数据。若 TX FIFO 为空，调制器将继续传送前导字节，直到第一个字节被写入 TX FIFO。调制器将随后传送同步词汇和数据字节;<br>前导字节的长度由MDMCFG1.NU_PREAMBLE 值控制。</p>\n</blockquote>\n<h3 id=\"数据包长度\"><a href=\"#数据包长度\" class=\"headerlink\" title=\"数据包长度\"></a>数据包长度</h3><ul>\n<li>CC1101 支持恒定长度数据包协议和可变长度协议。</li>\n<li><strong>可变</strong>或<strong>固定数据包</strong>长度模式能支持的长度可达 255 字节。</li>\n<li><strong>大于255个字节</strong>的数据包，必须使用<strong>无限数据包长度模式</strong>；<blockquote>\n<p>使用不同长度的配置来支持数据包格式。必须确保在发送前半个或任何字节的时候TX模式不被关闭</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"固定数据包长度\"><a href=\"#固定数据包长度\" class=\"headerlink\" title=\"固定数据包长度\"></a>固定数据包长度</h4><ul>\n<li>固定数据包长度模式通过设定PKTCTRL0.LENGTH_CONFIG=0来选择。</li>\n<li>期望的数据包长度通过PKTLEN寄存器来设置，不包括长度字节和可选的CRC；</li>\n</ul>\n<h4 id=\"可变数据包长度\"><a href=\"#可变数据包长度\" class=\"headerlink\" title=\"可变数据包长度\"></a>可变数据包长度</h4><ul>\n<li>可变数据包长度模式，PKTCTRL0.LENGTH_CONFIG=1，数据包长度由同步字后面的第一个字节配置。</li>\n<li>数据包长度定义为有效载荷，不包括长度字节和可选的CRC。</li>\n<li>PKTLEN用来配置允许接收的最大数据包长度。</li>\n<li>任何接收的数据包长度大于PKTLEN的值都将被丢弃。</li>\n</ul>\n<h5 id=\"可变长数据包收发逻辑\"><a href=\"#可变长数据包收发逻辑\" class=\"headerlink\" title=\"可变长数据包收发逻辑\"></a>可变长数据包收发逻辑</h5><p>数据包长度寄存器PKTLEN，在接收和发送时可以重新编程。结合固定数据包长度模式(PKTCTRL0.LENGTH_CONFIG=0)，这使与变长数据包不同的长度配置成为可能。（在可变数据包长度模式下长度字节是同步字节后第一个字节）在接收开始，数据包长度设置为一个大的值。MCU读取足够多的字节来解析数据包中的长度区域。然后依照这个值对PKTLEN进行设置。当数据包处理器中的字节计数器等于PKTLEN寄存器的值时数据包结束。因此，MCU必须在内部计数器达到数据包长度之前确认正确的长度</p>\n<h4 id=\"无限数据包长度模式-大于255个字节\"><a href=\"#无限数据包长度模式-大于255个字节\" class=\"headerlink\" title=\"无限数据包长度模式(大于255个字节)\"></a>无限数据包长度模式(大于255个字节)</h4><ul>\n<li>PKTCTRL0.LENGTH_CONFIG=2，数据包长度将设置为无限长，发送和接收将持续到手动关闭。</li>\n</ul>\n<h5 id=\"无限数据包长度收发逻辑\"><a href=\"#无限数据包长度收发逻辑\" class=\"headerlink\" title=\"无限数据包长度收发逻辑\"></a>无限数据包长度收发逻辑</h5><ul>\n<li>数据包自动控制寄存器PKTCTRL0，可以在TX和RX期间重新编程。这就使发送和接收数据包长度超过256字节并且仍然使用数据包处理器硬件支持成为可能。</li>\n<li>在数据包开始时，必须激活无限数据包长度模式（PKTCTRL0.LENGTH_CONFIG=2）。</li>\n<li>在发送端，PKTLEN寄存器设置为：mod(长度,256)。</li>\n<li>在接收端，MCU读出足够长度的字节来解析出数据包长度并设置PKTLEN寄存器为:mod(长度,256)。</li>\n<li>当数据包中还有少于256字节数据，MCU禁止数据包无限长度模式并且激活固定长度模式。</li>\n<li>当内部字节计数器到PKTLEN时，发送和接收结束。</li>\n<li>（无线进入的状态由TXOFF_MODE 或 RXOFF_MODE决定）自动CRC添加/校验也可以使用（通过设置PKTCTRL0.CRC_EN=1）。</li>\n</ul>\n<blockquote>\n<p>例子:发送一个600字节的数据包时，MCU必须按照以下执行：</p>\n<ul>\n<li>设置PKTCTRL0.LENGTH_CONFIG=2。 </li>\n<li>重新设置PKTLEN寄存器的值为:（600，256）=88. <strong>(600%256 = 88)</strong></li>\n<li>至少发送345字节（600-255），例如通过填充64字节 TX FIFO 6次（发送384字节）。 </li>\n<li>设置PKTCTRL0.LENGTH_CONFIG=0。 </li>\n<li>当数据包计数器达到88发送完成。一共600字节被发送。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d519a90a009de7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"600个字节发送\"></li>\n</ul>\n</blockquote>\n<h3 id=\"接收模式下的数据包过滤\"><a href=\"#接收模式下的数据包过滤\" class=\"headerlink\" title=\"接收模式下的数据包过滤\"></a>接收模式下的数据包过滤</h3><p>CC1101支持三种不同类型的数据包过滤：</p>\n<ul>\n<li>地址过滤</li>\n<li>最大长度过滤</li>\n<li>CRC过滤</li>\n</ul>\n<h4 id=\"地址过滤\"><a href=\"#地址过滤\" class=\"headerlink\" title=\"地址过滤\"></a>地址过滤</h4><ul>\n<li>设置PKTCTRL1.ADR_CHK为任意大于0的值使能数据包地址过滤。</li>\n<li>数据包处理器启动后将比较数据包中的目标地址字节和在ADDR寄存器中设置的节点地址<br>或者当PKTCTRL1.ADR_CHK=10时的广播地址0x00<br>以及PKTCTRL1.ADR_CHK=11时的广播地址0x00和0xFF。<br>如果接收的地址匹配到一个正确地址，数据包被接收并写入到RX FIFO。<br>如果地址匹配失败，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。 </li>\n<li>如果当时用无限数据包长度模式和使能地址过滤时接收地址匹配到正确的地址，0xFF将被写入到RX FIFO，其次是地址字节和有效载荷。</li>\n</ul>\n<h4 id=\"最大长度过滤\"><a href=\"#最大长度过滤\" class=\"headerlink\" title=\"最大长度过滤\"></a>最大长度过滤</h4><p>在可变数据包模式，PKTCTRL0.LENGTH_CONFIG=1，PKTLEN.PACKET_LENGTH寄存器用来设置最大允许的数据包长度。如果接收的长度字节大于这个值，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。</p>\n<h4 id=\"CRC过滤\"><a href=\"#CRC过滤\" class=\"headerlink\" title=\"CRC过滤\"></a>CRC过滤</h4><ul>\n<li>当CRC校验失败时过滤数据包，通过设置PKTCTRL1.CRC_AUTOFLUSH=1使能；</li>\n<li>CRC自动清除功能将在CRC校验失败时清空所有RX FIFO；</li>\n<li>在自动清空RX FIFO后，下一个状态依赖于MCSM1.RXOFF_MODE的设置；</li>\n<li>当使用自动清除功能，在可变数据包长度模式下最大数据包长度为63字节，在定长数据包长度模式下是64字节；</li>\n<li>注意当PKTCTRL1.APPEND_STATUS使能，最大允许数据包长度将减少2个字节，以确保在数据包的结尾附加的2字节的状态字节在RX FIFO中占用的空间；</li>\n<li>当CRC校验错误以后全部RX FIFO被清空；</li>\n<li>在接收正确的数据包前之前接收到的数据包必须从FIFO中读出。直到CRC校验正确MCU才从正确的数据包中读取数据；</li>\n</ul>\n<h3 id=\"发送模式下的数据包处理\"><a href=\"#发送模式下的数据包处理\" class=\"headerlink\" title=\"发送模式下的数据包处理\"></a>发送模式下的数据包处理</h3><ul>\n<li>需要发送的有效载荷必须写入到TX FIFO；</li>\n<li>如果使能可变数据包长度第一个字节必须写长度字节；</li>\n<li>长度字节的值等于数据包的有效载荷（包含可选的地址字节）；</li>\n<li>如果在接收端使能地址识别，写入到TX FIFO中的第二个字节必须是地址字节；</li>\n<li>如果使能固定数据包长度，写入到TX FIFO中的第一个字节必须是地址字节（接收端使用地址识别）；</li>\n<li>调制器将首先发送预置数量的前导字节；</li>\n<li>如果TX FIFO中有可发送的数据，调制器将发送2字节（可选4字节）同步字，紧接着是TX FIFO中的有效载荷；</li>\n<li>如果使能CRC，校验时计算TX FIFO中的所有数据，然后跟随有效数据发送2个附加字节；</li>\n<li>如果在完整的数据包发送完成之前TX FIFO变为空的，无线将进入TXFIFO_UNDERFLOW状态。退出该状态的唯一方法是运行SFTX命令；</li>\n<li>发送下溢后再向TX FIFO写入数据不能重启TX模式；</li>\n<li>如果whitening(白化)被使能，同步字后面的所有字节将被whitened。这必须在FEC/Interleaver之前完成。Whitening通过设置PKTCTRL0.WHITE_DATA=1使能；</li>\n<li>如果FEC/Interleaving(交错器)被使能，同步字后面的所有数据在调制之前将被interleaver 和 FEC编码加密。FEC通过设置MDMCFG1.FEC_EN=1使能；</li>\n</ul>\n<h3 id=\"接收模式下的数据包处理\"><a href=\"#接收模式下的数据包处理\" class=\"headerlink\" title=\"接收模式下的数据包处理\"></a>接收模式下的数据包处理</h3><ul>\n<li>在接收模式，解调器和数据包处理器将寻找一个有效的前导和同步字。</li>\n<li>当找到后，解调器将获得位和字节同步，并将接收第一个有效字节。 </li>\n<li>如果使能FEC/Interleaver，FEC解码器将开始解码第一个有效字节。Interleaver将在数据被其他任何处理之前解密。 </li>\n<li>如果使能whitening，在此基础上数据将被de-whitening(反白化)。 </li>\n<li>当使能可变数据包长度模式时，第一个字节是长度字节。数据包处理器储存该值为数据包长度并且通过该长度字节指示接收的字节数量。</li>\n<li>如果使用固定数据包长度模式，数据包处理器将接收预置数量的字节。 </li>\n<li>接下来，数据包处理器可选的检测地址并且只有地址匹配才继续接收。</li>\n<li>如果使能自动CRC校验，数据包处理器计算CRC并与CRC校验结果相匹配。 </li>\n<li>在有效载荷的结尾，数据包处理器将可选的写入两个复交数据包状态字节，包括CRC状态、LQI和RSSI</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-7786a7bdca8c6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"接收数据包状态字1\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-116e004500c41ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"接收数据包状态字2\"></p>\n<h3 id=\"MCU数据包处理\"><a href=\"#MCU数据包处理\" class=\"headerlink\" title=\"MCU数据包处理\"></a>MCU数据包处理</h3><p>如果在固件中执行一个数据包导向的无线协议，MCU需要知道一个数据包什么时候收到/发送。<br>加之，超过64字节长度的数据包，当接收时需要读取RX FIFO和当发送时TX FIFO需要重新填充。<br>这就意味着MCU必须知道有多少个字节可以从RX FIFO中读取或者可以向TX FIFO中写入。<br>有两种方法可以获得必要的状态信息。</p>\n<ul>\n<li><p>中断驱动方法<br>当同步字接收/发送完成或者完整的数据包接收/发送通过设置IOCFGx.GDOx_CFG=0x06，GDO脚可以用在RX和TX中产生一个中断。<br>此外，<br>IOCFGx.GDOx_CFG还有两个配置用来产生中断，源于有多少字节在RX FIFO或TX FIFO。<br>IOCFGx.GDOx_CFG=0x00和IOCFGx.GDOx_CFG=0x01为RX FIFO，<br>IOCFGx.GDOx_CFG=0x02和IOCFGx.GDOx_CFG=0x03为TX FIFO。</p>\n</li>\n<li><p>SPI轮询<br>PKTSTATUS可以使用给定的速率查询以获得GDO0和GDO2当前值。<br>RXBYTES 和 TXBYTES可以使用给定的速率查询以获得RX FIFO或者TX FIFO中的字节数。<br>合二为一的，RX FIFO和TX FIFO中的字节数量可以从每次头字节、数据字节或命令选通在SPI总线上发送时MISO引脚返回的芯片状态字节读取。 </p>\n<blockquote>\n<p><strong>推荐使用中断驱动方法</strong>因为高速率SPI轮询将减小RX的灵敏度。<br>而且，在Section10.3和CC1101勘误表【4】中，当使用SPI轮询，单一读取PKTSTATUS、 RXBYTES和 TXBYTES有一个小的有限的错误的可能性。<br>当读取芯片状态字节有同样的问题。 </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"RSSI\"><a href=\"#RSSI\" class=\"headerlink\" title=\"RSSI\"></a>RSSI</h3><ul>\n<li>RSSI的值时在选择的通道中信号功率级别的估计。</li>\n<li>这个值基于RX中当前增益的设置和信道中的标准信号等级。 </li>\n<li><p>在RX模式，RSSI可以连续的从RSSI状态寄存器读取知道解调器检测到一个同步字（当同步字检测使能）。此时RSSI读取的值将被冻结知道芯片下一次进入RX状态。 </p>\n<blockquote>\n<p>注意：从无线进入RX模式到在RSSI寄存器检测到一个正确的RSSI值需要一定的时间。查看DN505[15]获得RSSI响应时间估算的详细信息。<br>RSSI的值以dBm和1/2 dB给出。<br>RSSI更新速率，fRSSI 依赖于接收滤波带宽和AGCCTRL0.FILTER_LENGTH。</p>\n</blockquote>\n</li>\n<li><p>如果使能PKTCTRL1.APPEND_STATUS，数据包最后的RSSI值自动添加到有效载荷后面的第一个附加字节。 </p>\n</li>\n<li>从RSSI状态寄存器读出的RSSI值时2个补足的数字。下面的程序可以将RSSI转换为完整的功率级别（RSSI_dBm）。<br>1) 读取RSSI状态寄存器<br>2) 将读到的数据从16进制数转换到二进制数（RSSI_dec）<br>3)  如果RSSI_dec≧128，RSSI_dBm =(RSSI_dec - 256)/2 – RSSI_offset 4）<br>4 )  如果RSSI_dec＜128，RSSI_dBm =RSSI_dec /2 – RSSI_offset</li>\n</ul>\n<h3 id=\"净信道评估（CCA）\"><a href=\"#净信道评估（CCA）\" class=\"headerlink\" title=\"净信道评估（CCA）\"></a>净信道评估（CCA）</h3><ul>\n<li>CCA用来显示当前信道是空闲还是繁忙。</li>\n<li>通过设定IOCFGx.GDOx_CFG=0x09，当前的CCA状态在任何一个GDO引脚都可以查看。 </li>\n<li>MCSM1.CCA_MODE用来选择当确定CCA时使用的模式。 </li>\n<li>当CC1101在RX状态时给出STX 或 SFSTXON命令选通，仅能在净信道条件完成才能进入TX或FSTXON状态。</li>\n<li>此外，芯片将仍处于RX状态。如果信道接下来变为可用的，在一个新的命令选通通过SPI接口发送之前，无线不会进入TX或FSTXON状态。这个特性叫做<strong>TX-if-CCA</strong>。<br>可以编程设置4种CCA条件：<ul>\n<li>始终（禁止CCA，总是进入TX）</li>\n<li>如果RSSI低于门限值 </li>\n<li>除非正常接收一个数据包 </li>\n<li>以上两个（RSSI低于门限值和没有正常接收一个数据包）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"链路质量指示（LQI）\"><a href=\"#链路质量指示（LQI）\" class=\"headerlink\" title=\"链路质量指示（LQI）\"></a>链路质量指示（LQI）</h3><ul>\n<li>信号链路质量指示是一个公制的接收信号的当前质量。</li>\n<li>若 PKTCTRL1.APPEND_STATUS启用，则这个值自动附加在接收数据包的末端。</li>\n<li>这个值也可从 LQI 状态寄存器上读取。<br>LQI 由跟随同步词汇的 64 个符号（头 8 个数据包字节）计算得来。LQI 最好用作连接<br>质量的一个相对的度量，因为这个值决定于调制格式。</li>\n</ul>\n<h3 id=\"上电启动序列\"><a href=\"#上电启动序列\" class=\"headerlink\" title=\"上电启动序列\"></a>上电启动序列</h3><ul>\n<li>当电源给电，系统必须复位。</li>\n<li>通过下面描述的2个序列中的一个来完成，即自动上电复位（POR）或者手动复位。</li>\n<li>自动上电复位或手动复位之后，推荐转换GDO0引脚上输出的信号。</li>\n<li>默认设置是以CLK_XOSC/192的频率输出一个时钟信号。</li>\n<li>然而，为了在TX和RX中优化执行，必须<strong><strong>GD0/1/2 引脚配置</strong></strong>中的配置来配置GDO脚</li>\n</ul>\n<h4 id=\"自动POR\"><a href=\"#自动POR\" class=\"headerlink\" title=\"自动POR\"></a>自动POR</h4><p>CC1101内部包含上电复位电路。最小的需求见表15，完整的上电复位功能必须遵循。当CHIP_RDYn变低内部上电序列完成。在CSn拉低后在SO引脚上可以查看CHIP_RDYn。<br>当CC1101复位完成，芯片将进入IDLE状态，晶振开始运行。如果芯片在上电之后有足够的时间让晶振稳定，在捕获CSn变低之后SO引脚将马上变低。如果在复位完成之前CSn被拉低，SO引脚将首先变高，指示晶振没有稳定，变低之前见下图。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-1dc0e7c8463d0096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自动POR\"></p>\n<h4 id=\"手动复位\"><a href=\"#手动复位\" class=\"headerlink\" title=\"手动复位\"></a>手动复位</h4><p>CC1101上的其它全部复位时使用SRES命令。通过执行这个命令，所有内部寄存器和状态恢复默认，IDLE状态。手动复位序列如下（图 手动复位）： </p>\n<ul>\n<li>设置SCLK=1，SI=0，避免引脚控制模式可能出现的问题。 </li>\n<li>选通CS低/高。 </li>\n<li>保持CS为低，然后拉高，至少40us才可以拉低 </li>\n<li>将CSn拉低等到SO拉低（CHIP_RDYn）。</li>\n<li>在SI线上发布SRES选通。 </li>\n<li>当SO再一次拉低，复位完成，芯片进入IDLE状态<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-e692bc860255aa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"手动复位\"><blockquote>\n<p>注意：以上复位程序只需要在电源给电之后。如果用户在这之后想要复位CC1101，只需要执行SRES命令选通</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"常规用途-测试输出控制引脚\"><a href=\"#常规用途-测试输出控制引脚\" class=\"headerlink\" title=\"常规用途/ 测试输出控制引脚\"></a>常规用途/ 测试输出控制引脚</h3><p>3 个数字输出引脚 GDO0 和 GDO1 和 GDO2为常规控制脚。它们的功能分别由</p>\n<ul>\n<li><strong>IOCFG0.GDO0_CFG</strong></li>\n<li><strong>IOCFG1.GDO1_CFG</strong></li>\n<li><strong>IOCFG2.GDO3_CFG</strong><br>控制;</li>\n<li>GDO1 和在 SPI 接口上的SO 脚是同一脚，因此这个脚上控制的输出在 CSn 高时才有效。</li>\n<li>GDO1 的默认值为 3状态，当 SPI 接口和其它设备一起使用时这是有效的。</li>\n<li>GOO0 的默认值为125kHz-146kHz时钟输出（XOSC 频率除以 192）。当 XOSC 在重启<br>功率下开启后，使用一个晶体，它就能用来为系统中的 MCU 计时。当 MCU 工作时，通过 IOCFG0.GDO0_CFG，它能改变时钟频率。不会造成时钟波形干扰。</li>\n<li>对 IOCFG0.GDO0_CFG 寄存器写入值 128（0x80h），芯片内模拟温度传感器启用。然后，GDO0 上的电压与温度成比例</li>\n<li>如果IOCFGx.GDOx_CFG的设置小于0x20并且IOCFGx_GDOx_INV为0（1），在SLEEP模式GDO0和GDO2将由硬件置0（1），GDO1将有硬件置1（0）。这些信号将由硬件保持知道CHIP_RDYn变低。 </li>\n<li>如果IOCFGx.GDOx_CFG设置为0x20或更高，GDO引脚在SLEEP状态也工作在设置的状态。例如，如果IOCFG1.GDO1_CFG=0x2E，GDO1在所有状态都是高阻抗。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>GDO0_CFG[5:0] GDO1_CFG[5:0] GDO2_CFG[5:0]</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0(0x00)</td>\n<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充时声明。当 RX FIFO 在RXFIFO THR 之下时被反声明</td>\n</tr>\n<tr>\n<td>1(0x01)</td>\n<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充或到达数据包末端时声明。当RX FIFO 空时被反声明</td>\n</tr>\n<tr>\n<td>2(0x02)</td>\n<td>与 TX FIFO 关联：当 TX FIFO 在 TXFIFO_THR 上被填充时声明。当 TX FIFO 在TXFIFO THR 之下时被反声明</td>\n</tr>\n<tr>\n<td>3(0x03)</td>\n<td>与 TX FIFO 关联：当 TX FIFO 满时声明。当 TX FIFO 在 TXFIFO_THR 之下为空时被反声明</td>\n</tr>\n<tr>\n<td>4(0x04)</td>\n<td>当 RX FIFO 已溢出时声明。当 FIFO 被淹没时被反声明</td>\n</tr>\n<tr>\n<td>5(0x05)</td>\n<td>当 TX FIFO 已下溢时声明。当 FIFO 被淹没时被反声明</td>\n</tr>\n<tr>\n<td>6(0x06)</td>\n<td>当同步词汇被送出/收到时声明，在数据包末端时反声明。对 RX，当可选地址检测失败或 RX FIFO 溢出时，引脚被反声明。若 TX FIFO 下溢，这个引脚将同样被反声明</td>\n</tr>\n<tr>\n<td>7(0x07)</td>\n<td>当一个数据包被 OK CRC 收到时声明。当第一个字节从 RX FIFO 中读取时反声明</td>\n</tr>\n<tr>\n<td>8(0x08)</td>\n<td>前导质量达到。当 PQI 高于控制 PQT 值时声明</td>\n</tr>\n<tr>\n<td>9(0x09)</td>\n<td>清理信道评估。当 RSSI 等级低于门限时为高（决定于当前 CCA MODE 设置）</td>\n</tr>\n<tr>\n<td>10(0x0A)</td>\n<td>锁定检测器输出</td>\n</tr>\n<tr>\n<td>11(0x0B)</td>\n<td>连续时钟。与同步连续模式下的数据同步。数据在下降沿建立，在 SERIAL CLK 上升沿被读取。</td>\n</tr>\n<tr>\n<td>12(0x0C)</td>\n<td>连续同步数据输出。同步连续模式时使用。在 SERIAL_CLK 上升沿 MCU 必须读 DO。数据在下降沿由 CC2500 建立</td>\n</tr>\n<tr>\n<td>13(0x0D)</td>\n<td>连续透明数据输出。同步连续模式时使用。</td>\n</tr>\n<tr>\n<td>14(0x0E)</td>\n<td>载波感应。当 RSSI 等级低于门限时为高</td>\n</tr>\n<tr>\n<td>15(0x0F)</td>\n<td>CRC OK。上一个 CRC 对比匹配。当进入/重启 RX 模式时清理。</td>\n</tr>\n<tr>\n<td>16(0x10)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>17(0x11)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>18(0x12)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>19(0x13)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>20(0x14)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>21(0x15)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>22(0x16)</td>\n<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>23(0x17)</td>\n<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>24(0x18)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>25(0x19)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>26(0x1A)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>27(0x1B)</td>\n<td>1 时 PA PD.PA 开启，0 时功率降低。能用来控制外部 PA 或 RX/TX 开关</td>\n</tr>\n<tr>\n<td>28(0x1C)</td>\n<td>1 时 LNA PD.LNA 开启，0 时功率降低。能用来控制外部 LNA 或 RX/TX 开关</td>\n</tr>\n<tr>\n<td>29(0x1D)</td>\n<td>RX_SYMBOL_TICK。能同RX_HARD_DATA一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>30(0x1E)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>31(0x1F)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>32(0x20)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>33(0x21)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>34(0x22)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>35(0x23)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>36(0x24)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>37(0x25)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>38(0x26)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>39(0x27)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>40(0x28)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>41(0x29)</td>\n<td>CHIP RDY</td>\n</tr>\n<tr>\n<td>42(0x2A)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>43(0x2B)</td>\n<td>XOSC STABLE</td>\n</tr>\n<tr>\n<td>44(0x2C)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>45(0x2D)</td>\n<td>GDO0 Z EN N。当这个输出为 0 时，GDO0 配置为输入（为连续 TX 数据）</td>\n</tr>\n<tr>\n<td>46(0x2E)</td>\n<td>高阻抗（3-状态）</td>\n</tr>\n<tr>\n<td>47(0x2F)</td>\n<td>HW 到 0（HW1 同 INV 信号一起完成）</td>\n</tr>\n<tr>\n<td>48(0x30)</td>\n<td>CLK XOSC/1</td>\n</tr>\n<tr>\n<td>49(0x31)</td>\n<td>CLK XOSC/1.5</td>\n</tr>\n<tr>\n<td>50(0x32)</td>\n<td>CLK XOSC/2</td>\n</tr>\n<tr>\n<td>51(0x33)</td>\n<td>CLK XOSC/3</td>\n</tr>\n<tr>\n<td>52(0x34)</td>\n<td>CLK XOSC/4</td>\n</tr>\n<tr>\n<td>53(0x35)</td>\n<td>CLK XOSC/6</td>\n</tr>\n<tr>\n<td>54(0x36)</td>\n<td>CLK XOSC/8</td>\n</tr>\n<tr>\n<td>55(0x37)</td>\n<td>CLK XOSC/12</td>\n</tr>\n<tr>\n<td>56(0x38)</td>\n<td>CLK XOSC/16</td>\n</tr>\n<tr>\n<td>57(0x39)</td>\n<td>CLK XOSC/24</td>\n</tr>\n<tr>\n<td>58(0x3A)</td>\n<td>CLK XOSC/32</td>\n</tr>\n<tr>\n<td>59(0x3B)</td>\n<td>CLK XOSC/48</td>\n</tr>\n<tr>\n<td>60(0x3C)</td>\n<td>CLK XOSC/64</td>\n</tr>\n<tr>\n<td>61(0x3D)</td>\n<td>CLK XOSC/96</td>\n</tr>\n<tr>\n<td>62(0x3E)</td>\n<td>CLK XOSC/128</td>\n</tr>\n<tr>\n<td>63(0x3F)</td>\n<td>CLK XOSC/192</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"寄存器配置\"><a href=\"#寄存器配置\" class=\"headerlink\" title=\"寄存器配置\"></a>寄存器配置</h3><p>CC1101的配置通过编程8位寄存器来实现</p>\n<h4 id=\"命令寄存器-12个\"><a href=\"#命令寄存器-12个\" class=\"headerlink\" title=\"命令寄存器(12个)\"></a>命令寄存器(12个)</h4><p>访问这些寄存器将会发起内部状态或模式的改变</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x30</td>\n<td>SRES</td>\n<td>复位芯片</td>\n</tr>\n<tr>\n<td>0x31</td>\n<td>SFSTXON</td>\n<td>使能和校准频率合成器（如果MCSM0.FS_AUTOCAL=1）。如果在RX(使能CCA)，仅当合成器运行时转到等待状态（RX/TX快速转换）</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>SXOFF</td>\n<td>关闭晶振 </td>\n</tr>\n<tr>\n<td>0x33</td>\n<td>SCAL</td>\n<td>校准频率合成器并关闭。SCAL可以从IDLE模式执行而不需要设置收到校准模式（MCSM0.FS_AUTOCAL=0）。 </td>\n</tr>\n<tr>\n<td>0x34</td>\n<td>SRX</td>\n<td>使能RX。如果来自IDLE状态并且MCSM0.FS_AUTOCAL=1首先执行校准。 </td>\n</tr>\n<tr>\n<td>0x35</td>\n<td>STX</td>\n<td>在IDLE状态：使能TX。如果MCSM0.FS_AUTOCAL=1首先执行校准。如果在RX状态并使能CCA仅在信道为空时转到TX。 </td>\n</tr>\n<tr>\n<td>0x36</td>\n<td>SIDLE</td>\n<td>离开RX/TX模式，关闭频率合成器，如果可用离开WOR。</td>\n</tr>\n<tr>\n<td>0x38</td>\n<td>SWOR</td>\n<td>如果WORCTRL.RC_PD=0像Section19.5的描述一样开始自动RX轮询序列（WOR）。 </td>\n</tr>\n<tr>\n<td>0x39</td>\n<td>SPWD</td>\n<td>当CSn拉高进入掉电模式。 </td>\n</tr>\n<tr>\n<td>0x3A</td>\n<td>SFRX</td>\n<td>清除RX FIFO缓冲器。只在IDLE 或 RXFIFO_OVERFLOW状态运行SFRX。</td>\n</tr>\n<tr>\n<td>0x3B</td>\n<td>SFTX</td>\n<td>清除TX FIFO缓冲器。只在IDLE 或 TXFIFO_UNDERFLOW状态运行SFTX。 </td>\n</tr>\n<tr>\n<td>0x3C</td>\n<td>SWORRST</td>\n<td>复位实时时钟到Event1值。 </td>\n</tr>\n<tr>\n<td>0x3D</td>\n<td>SMOP</td>\n<td>无操作，可以用来访问获取芯片状态字节。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置寄存器\"><a href=\"#配置寄存器\" class=\"headerlink\" title=\"配置寄存器\"></a>配置寄存器</h4><hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>寄存器</th>\n<th>描述</th>\n<th>保持在休眠状态中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>IOCFG2</td>\n<td>GDO2输出引脚配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>IOCFG1</td>\n<td>GDO1输出引脚配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x02</td>\n<td>IOCFG0</td>\n<td>GDO0输出引脚配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x03</td>\n<td>FIFOTHR</td>\n<td>RX FIFO和TX FIFO门限</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x04</td>\n<td>SYNC1</td>\n<td>同步字，高字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x05</td>\n<td>SYNC0</td>\n<td>同步字，低字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x06</td>\n<td>PKTLEN</td>\n<td>数据包长度</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x07</td>\n<td>PKTCTRL1</td>\n<td>数据包自动控制</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x08</td>\n<td>PKTCTRL0</td>\n<td>数据包自动控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x09</td>\n<td>ADDR</td>\n<td>设备地址</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0A</td>\n<td>CHANNR</td>\n<td>信道号</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0B</td>\n<td>FSCTRL1</td>\n<td>频率合成器控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0C</td>\n<td>FSCTRL0</td>\n<td>频率合成器控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0D</td>\n<td>FREQ2</td>\n<td>频率控制字，高字节</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x0E</td>\n<td>FREQ1</td>\n<td>频率控制字，中间字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0F</td>\n<td>FREQ0</td>\n<td>频率控制字，低字节</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td>MDMCFG4</td>\n<td>Modem配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x11</td>\n<td>MDMCFG3</td>\n<td>Modem配置</td>\n<td>是 、</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td>MDMCFG2</td>\n<td>Modem配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x13</td>\n<td>MDMCFG1</td>\n<td>Modem配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x14</td>\n<td>MDMCFG0</td>\n<td>Modem配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x15</td>\n<td>DEVIATN</td>\n<td>Modem背离设定</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x16</td>\n<td>MCSM2</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x17</td>\n<td>MCSM1</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x18</td>\n<td>MCSM0</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x19</td>\n<td>FOCCFG</td>\n<td>频率偏移补偿配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1A</td>\n<td>BSCFG</td>\n<td>位同步配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x1B</td>\n<td>AGCTRL2</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1C</td>\n<td>AGCTRL1</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1D</td>\n<td>AGCTRL0</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1E</td>\n<td>WOREVT1</td>\n<td>事件0超时高字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1F</td>\n<td>WOREVT0</td>\n<td>事件0超时低字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x20</td>\n<td>WORCTRL</td>\n<td>WOR控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x21</td>\n<td>FREND1</td>\n<td>前端RX配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>FREND0</td>\n<td>前端TX配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x23</td>\n<td>FSCAL3</td>\n<td>频率合成器校准</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x24</td>\n<td>SCAL2</td>\n<td>频率合成器校准</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x25</td>\n<td>SCAL1</td>\n<td>频率合成器校准</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x26</td>\n<td>SCAL0</td>\n<td>频率合成器校准</td>\n<td>是</td>\n</tr>\n<tr>\n<td> 0x27</td>\n<td>RCCTRL1</td>\n<td>RC振荡器配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td> 0x28</td>\n<td>RCCTRL0</td>\n<td>RC振荡器配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x29</td>\n<td>FSTEST</td>\n<td>频率合成器校准控制</td>\n<td>否</td>\n</tr>\n<tr>\n<td> 0x2A</td>\n<td>PTEST</td>\n<td>产品测试</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2B</td>\n<td>AGCTEST</td>\n<td>AGC测试</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2C</td>\n<td>TEST2</td>\n<td>各方面测试设定</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2D</td>\n<td>TEST1</td>\n<td>各方面测试设定</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2E</td>\n<td>TEST0</td>\n<td>各方面测试设定</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"状态寄存器总览\"><a href=\"#状态寄存器总览\" class=\"headerlink\" title=\"状态寄存器总览\"></a>状态寄存器总览</h4><hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>寄存器</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x30（0xF0）</td>\n<td>PARTNUM</td>\n<td>CC1101零件号 </td>\n</tr>\n<tr>\n<td>0x31（0xF1）</td>\n<td>VERSION</td>\n<td>当前版本号 </td>\n</tr>\n<tr>\n<td>0x32（0xF2）</td>\n<td>FREQEST</td>\n<td>频率偏移评估</td>\n</tr>\n<tr>\n<td>0x33（0xF3）</td>\n<td>LQI</td>\n<td>解调器链路质量估计 </td>\n</tr>\n<tr>\n<td>0x34（0xF4）</td>\n<td>RSSI</td>\n<td>接收信号强度指示 </td>\n</tr>\n<tr>\n<td>0x35（0xF5）</td>\n<td>MARCSTATE</td>\n<td>控制状态机状态 </td>\n</tr>\n<tr>\n<td>0x36（0xF6）</td>\n<td>WORTIME1</td>\n<td>WOR定时器高字节</td>\n</tr>\n<tr>\n<td>0x37（0xF7）</td>\n<td>WORTIME0</td>\n<td>WOR定时器低字节 </td>\n</tr>\n<tr>\n<td>0x38（0xF8）</td>\n<td>PKTSTATUS</td>\n<td>当前GDOx状态和数据包状态</td>\n</tr>\n<tr>\n<td>0x39（0xF9）</td>\n<td>VCO_VC_DAC</td>\n<td>PLL校准模块的当前设置 </td>\n</tr>\n<tr>\n<td>0x3A（0xFA）</td>\n<td>TXBYTES</td>\n<td>下溢和TX FIFO中的字节数 </td>\n</tr>\n<tr>\n<td>0x3B（0xFB）</td>\n<td>RXBYTES</td>\n<td>上溢和RX FIFO中的字节数 </td>\n</tr>\n<tr>\n<td>0x3C（0xFC）</td>\n<td>RCCTRL1_STATUS</td>\n<td>上一次RC振荡器校准结果</td>\n</tr>\n<tr>\n<td>0x3D（0xFD）</td>\n<td>RCCTRL0_STATUS</td>\n<td>上一次RC振荡器校准结果</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-32d8e78d15cce521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"寄存器总图\"></p>\n<p>参考：<a href=\"https://wenku.baidu.com/view/c2b0081b227916888486d769.html\" target=\"_blank\" rel=\"external\">https://wenku.baidu.com/view/c2b0081b227916888486d769.html</a></p>\n","excerpt":"<hr>\n<h1 id=\"产品描述\"><a href=\"#产品描述\" class=\"headerlink\" title=\"产品描述\"></a>产品描述</h1><h2 id=\"工作频段\"><a href=\"#工作频段\" class=\"headerlink\" title=\"工作频段\"></a>工作频段</h2><p><strong>CC1100: </strong>400-464 MHz and 800-928MHz<br><strong>CC1101:</strong> 387-464 MHz and 779-928MHz</p>\n<h2 id=\"芯片引脚\"><a href=\"#芯片引脚\" class=\"headerlink\" title=\"芯片引脚\"></a>芯片引脚</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-bf9e764fcd560a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"cc1101引脚\"><br>","more":"</p>\n<h3 id=\"引脚说明\"><a href=\"#引脚说明\" class=\"headerlink\" title=\"引脚说明\"></a>引脚说明</h3><hr>\n<table>\n<thead>\n<tr>\n<th>引脚编号</th>\n<th>引脚名</th>\n<th>引脚类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>SCLK</td>\n<td>数字输入</td>\n<td>连续配置接口，时钟输入</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SO(GD01)</td>\n<td>数字输出</td>\n<td>连续配置接口，数据输出当 CSn 为高时为可选的一般输出脚</td>\n</tr>\n<tr>\n<td>3</td>\n<td>GDO2</td>\n<td>数字输出</td>\n<td>一般用途的数字输出脚：<strong>1&gt;</strong>测试信号；<strong>2&gt;</strong>FIFO 状态信号;<strong>3&gt;</strong>时钟输出，从 XOSC 向下分割;<strong>4&gt;</strong>连续输入 TX 数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DVDD</td>\n<td>功率（数字）</td>\n<td>数字 I/O 和数字中心电压调节器的 1.8V-3.6V 数字功率供给输出</td>\n</tr>\n<tr>\n<td>5</td>\n<td>DCOUPL</td>\n<td>功率（数字）</td>\n<td>对退耦的 1.6V-2.0V 数字功率供给输出;<strong>注意：这个引脚只对 CC2500 使用。不能用来对其他设备提供供给电压</strong></td>\n</tr>\n<tr>\n<td>6</td>\n<td>GDO0(ATEST)</td>\n<td>数字 I/O</td>\n<td>一般用途的数字输出脚：<strong>1&gt;</strong> 测试信号;<strong>2&gt;</strong>FIFO 状态信号;<strong>3&gt;</strong>时钟输出，从 XOSC 向下分割;<strong>4&gt;</strong>连续输入 TX 数据;<strong>5&gt;</strong>也用作原型/产品测试的模拟测试 I/O</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CSn</td>\n<td>数字输入</td>\n<td>连续配置接口，芯片选择</td>\n</tr>\n<tr>\n<td>8</td>\n<td>XOSC_Q1</td>\n<td>模拟 I/O</td>\n<td>晶体振荡器脚 1，或外部时钟输入</td>\n</tr>\n<tr>\n<td>9</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>10</td>\n<td>XOSC_Q2</td>\n<td>模拟 I/O</td>\n<td>晶体振荡器脚</td>\n</tr>\n<tr>\n<td>11</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>12</td>\n<td>RF_P</td>\n<td>RF I/O</td>\n<td>接收模式下对 LNA 的正 RF 输入信号发送模式下对 LNA 的正 RF 输出信号</td>\n</tr>\n<tr>\n<td>13</td>\n<td>AVDD</td>\n<td>RF I/O</td>\n<td>接收模式下对 LNA 的负 RF 输入信号发送模式下对 LNA 的负 RF 输出信号</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>15</td>\n<td>AVDD</td>\n<td>功率（模拟）</td>\n<td>1.8V-3.6V 模拟功率供给连接</td>\n</tr>\n<tr>\n<td>16</td>\n<td>GND</td>\n<td>地(模拟)</td>\n<td>模拟接地</td>\n</tr>\n<tr>\n<td>17</td>\n<td>RBIAS</td>\n<td>模拟 I/O</td>\n<td>参考电流的外部偏阻器</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DGUARD</td>\n<td>功率（数字）</td>\n<td>对数字噪声隔离的功率供给连接</td>\n</tr>\n<tr>\n<td>19</td>\n<td>GND</td>\n<td>地（数字）</td>\n<td>数字噪声隔离的接地</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SI</td>\n<td>数字输入</td>\n<td>连续配置接口，数据输入</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"通讯方式以及配置方式—SPI\"><a href=\"#通讯方式以及配置方式—SPI\" class=\"headerlink\" title=\"通讯方式以及配置方式—SPI\"></a>通讯方式以及配置方式—SPI</h2><ul>\n<li>CC1101通过4线SPI兼容接口（MOSI,MISO,SCLK和CSn）进行配置，<strong>CC1101作为从设备</strong>。<br>这个接口同时用作读写缓冲器数据。<br>SPI接口上所有的数据传送都是先传送 <strong>MSB</strong></li>\n</ul>\n<blockquote>\n<p><strong>拓展知识:</strong><br><strong>MSB:</strong>高位前导<br><strong>LSB:</strong>低位前导。<br><strong>big endian（大端）</strong>是指低地址存放最高有效字节（MSB），<br><strong>little endian（小端）</strong>则是低地址存放最低有效字节（LSB）</p>\n</blockquote>\n<h3 id=\"SPI-读写注意事项\"><a href=\"#SPI-读写注意事项\" class=\"headerlink\" title=\"SPI 读写注意事项\"></a>SPI 读写注意事项</h3><ul>\n<li>SPI接口上的所有传送都是以一个头字节（header byte）开始包含以下：<ul>\n<li>一个<strong>读写位(R/W)：</strong>在读操作中该位置1，在写操作中该位置0；</li>\n<li>一个<strong>(突发(burst access)访问位(B)</strong></li>\n<li><strong>6位地址位(A5~A0)</strong>。</li>\n</ul>\n</li>\n<li>在SPI总线上传输数据时，CSn脚必须保持低电平。如果在发送头字节或者读写寄存器时CSn拉高，传送将被取消</li>\n<li>当 CSn 变低，在开始转换头字节之前，MCU必须等待，直到 MISO 脚变低。这表明电压调制器已经稳定，晶体正在运作中。除非芯片处在 SLEEP 或 XOFF 状态，MISO 脚在 CSn变低之后总会立即变低。</li>\n</ul>\n<h4 id=\"芯片状态字节\"><a href=\"#芯片状态字节\" class=\"headerlink\" title=\"芯片状态字节\"></a><strong>芯片状态字节</strong></h4><ul>\n<li>当头字节在 SPI 接口上被写入时，芯片状态字节在 MISO 脚上被 CC1100 写入。状态字节<br>包含关键状态信号，对 MCU 是有用的。<strong>(7)位</strong>是 CHIP_RDYn 信号。在 SCLK 的在第一个正边缘之前，这个信号必须变低。CHIP_RDYn 信号表明晶体正处于工作中，调节数字供给电压是稳定的。</li>\n<li>状态字节中的<strong>(6:4 )</strong>位由状态值组成。这个值反映了芯片的状态。当使 XOSC 空闲并使数字中心的能量开启，所有其他模块处于功率降低状态。只有芯片处于此状态时，频率和信道配置才能被更新。当芯片处于接收模式时，RX状态是活动的。同样地，当芯片处于传输模式时，TX 状态是活动的。</li>\n<li>状态字节中的后四位<strong>(3:0)</strong>包含FIFO_BYTES_AVAILABLE。为了进行读操作，这个区域包含可从 RX FIFO 读取的字节数。为了进行写操作，这个区域包含可写入 TX  FIFO的字当FIFO_BYTES_AVAILABLE=15，15 或者更多的字节是可用/自由的。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-043836467cbc7d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"状态字节概要\"></li>\n</ul>\n<h3 id=\"寄存器访问\"><a href=\"#寄存器访问\" class=\"headerlink\" title=\"寄存器访问\"></a>寄存器访问</h3><ul>\n<li><strong>CC1101 配置寄存器地址: </strong> 0x00到0x2E</li>\n<li>所有的配置寄存器均能读和写。读/写位控制寄存器是读或者写。当对寄存器写时，每当一个待写入的数据字节传输到 SI脚时，状态字节将被送至 SO 脚。</li>\n<li>通过在地址头设置突发位，连续地址的寄存器能高效地被访问。这个地址在内部计数器内设置起始地址。每增加一个新的字节（每8 个时钟脉冲），计数器值增加 1。突发访问，不管是读访问还是写访问，必须通过设置CSn 为高来终止。</li>\n<li>对 0x30-0x3D 间的地址来说，突发位用以在<strong>状态寄存器</strong>和<strong>命令选通</strong>间选择。状态寄存器只读。突发读取对状态寄存器是不可取的，故它们每次只能被读一个。<br><strong>burst位置1：</strong>选择状态寄存器；<br><strong>burst置0：</strong>选择命令选通（command strobes）;</li>\n</ul>\n<h3 id=\"命令选通-command-strobes\"><a href=\"#命令选通-command-strobes\" class=\"headerlink\" title=\"命令选通(command strobes)\"></a>命令选通(command strobes)</h3><ul>\n<li>命令选通可以看做是CC1101的一个单字节指令。<br>通过寻址一个命令选通寄存器，将启动内部序列。<br>这些命令用来<strong>禁止晶振</strong>，<strong>使能接收</strong>，<strong>使能无线唤醒</strong> 等；</li>\n<li>命令选通寄存器的访问和一个寄存器的写操作一样，但没有数据被传输。就是说，只有 R/W 位（置为 0）突发访问（置为 0）和六个地址位（0x30 和 0x3D 之间）被写。一个命令滤波可能在任何其他 SPI 访问之后，而不需要将 CSn 拉至高电平。命令选通立即被执行，当 CSn 高时 SPWD 和 SXOFF 命令被执行是例外。</li>\n</ul>\n<h3 id=\"FIFO访问\"><a href=\"#FIFO访问\" class=\"headerlink\" title=\"FIFO访问\"></a>FIFO访问</h3><ul>\n<li>64 字节 TX FIFO 和 64 字节 RX FIFO 通过0x3F 被访问。<ul>\n<li>读/写位为 0 时，TX FIFO被访问。</li>\n<li>读/写位为 1 时，RX FIFO 被访问。</li>\n</ul>\n</li>\n<li>TX FIFO 是只写的，而 RX FIFO 是只读的。</li>\n<li>突发位用来决定 FIFO 访问是单字节还是突发访问。<ul>\n<li>单字节访问方式期望地址的突发位为 0 的头字节和一个数据字节。在数据字节之后跟随一个新的头字节，因此，CSn 继续保持低。</li>\n<li>突发访问方式允许一地址字节，然后是连续的数据字节，直到通过设置 CSn 为高来关断访问。<ul>\n<li>0x3F : 单字节访问 TX FIFO</li>\n<li>0x7F : 突发访问 TX FIFO</li>\n<li>0xBF : 单字节访问 RX FIFO</li>\n<li>0XFF : 突发访问 RX FIFO</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"PATABLE-访问\"><a href=\"#PATABLE-访问\" class=\"headerlink\" title=\"PATABLE 访问\"></a>PATABLE 访问</h3><ul>\n<li><strong>0x3E</strong>地址用来访问 PATABLE。PATABLE用来选择 PA 能量控制设置。在接收此地址之后，SPI 等待至少 8 个字节。通过控制PATABLE，能实现可控的 PA 能量上升和下降，减少的带宽的 ASK 调制整型也如此。</li>\n<li>PATABLE 是一个 8 字节表，定义了 PA 控制设 置 ， 为 8 个 PA 功 率 值 （ 由FRENDO.PA_POWER 的 3 个位的值所选择）的每一个所使用。这个表从最低位（0）到最高位（7）可读和写，一次一位。一个索引计数器用来控制对这个表的访问。每读出或写入表中的一个字节，计数器就加 1。当 CSn 为高时，计数值置为最小值。当达到最大值时，计数器由零重新开始计数。</li>\n<li>对 PATABLE 的访问是单字节或者突发访问，由突发位决定。当使用突发访问时，索引计数器的值增加；达到7时重新从0开始。读/写位控制访问是写访问（R/W=0）或者读访问(R/W=1)。</li>\n<li>如果一字节被写入 PATABLE，且这个值将要被读出，那么，为了设置索引计数器的值重为 0，CSn 必须在读访问之前置为高。注意，当 PATABLE 进入休眠状态时，所存储的内容会丢失，特别是第一个字节（索引<br>为 0）。</li>\n</ul>\n<h3 id=\"基本控制和状态脚\"><a href=\"#基本控制和状态脚\" class=\"headerlink\" title=\"基本控制和状态脚\"></a>基本控制和状态脚</h3><ul>\n<li>CC1101有2个专用配置脚（GDO0和GDO2）和一个共用脚（GDO1）可以向控制软件输出有用的内部状态信息。这些脚可以用来向MCU产生中断。</li>\n<li>GDO1和SPI的SO引脚共用。<ul>\n<li>GDO1/SO的默认设置时3态输出。通过选择任何编程选项，GDO1/SO将变为普通引脚。当CSn拉低，该引脚将始终作为普通的SO功能引脚。</li>\n</ul>\n</li>\n<li>在同步和异步串行模式，在发送模式下，GDO0引脚将作为串行TX数据输入引脚。</li>\n<li>GDO0也可以用作片上模拟温度传感器。通过外部ADC测量GDO0脚的电压，可以计算出温度。温度传感器的详细说明见18页的Section 4.7。通过默认的PTEST寄存器设置（0x7F），如果频率合成器被允许温度传感器的的输出时可用的。（例如：MANCAL，FSTXON，RX和 TX状态）在IDLE状态向PTEST寄存器写入0xBF允许模拟温度传感器是必要的。离开IDLE状态之前，必须恢复PTEST寄存器为默认值（0x7F）。</li>\n</ul>\n<h3 id=\"数据包处理的硬件支持\"><a href=\"#数据包处理的硬件支持\" class=\"headerlink\" title=\"数据包处理的硬件支持\"></a>数据包处理的硬件支持</h3><h4 id=\"发送模式下\"><a href=\"#发送模式下\" class=\"headerlink\" title=\"发送模式下\"></a>发送模式下</h4><blockquote>\n<p>数据包的处理者可以配置增加下面的元素到TX FIFO中的数据包存储</p>\n</blockquote>\n<ul>\n<li>一个可编程数量的前导字节；</li>\n<li>两字节同步字，可复制为4字节同步字。只插入前导字节或者同步字节是不可能的；</li>\n<li>一个覆盖数据区域的CRC校验计算。 <blockquote>\n<p>推荐设置4字节前导和4字节同步字，除了500k波特率时推荐使用8字节前导。另外，在数据区域和附加的2字节CRC校验，以下可以被执行</p>\n<ul>\n<li>使用PN9序列Whitening数据。 </li>\n<li>通过使用交叉和编码数据（卷积编码）前向纠错。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"接收模式下\"><a href=\"#接收模式下\" class=\"headerlink\" title=\"接收模式下\"></a>接收模式下</h4><blockquote>\n<p>数据包处理支持将是解构数据包，（如使能）以下可以被执行</p>\n</blockquote>\n<ul>\n<li>前导检测</li>\n<li>同步字检测</li>\n<li>CRC计算和CRC检查</li>\n<li>一个字节地址检测</li>\n<li>包长度检查（根据设置的最大长度检查长度字节）</li>\n<li>反Whitening（如果使能）</li>\n<li>反交叉和解码( 如果使能 )<br>另外，RSSI（接收信号强度指示）、LQI（链路质量指示）和CRC状态的两个状态字节可以附加在RX FIFO</li>\n</ul>\n<h3 id=\"数据包格式\"><a href=\"#数据包格式\" class=\"headerlink\" title=\"数据包格式\"></a>数据包格式</h3><p>数据包的格式可以配置为由以下部分组成： </p>\n<ul>\n<li>前导 n 同步字 </li>\n<li>可选的长度字节 </li>\n<li>可选的地址字节 </li>\n<li>净荷 </li>\n<li>可选的2字节CRC<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d71997128378e0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"数据格式\"></li>\n</ul>\n<blockquote>\n<p>前导形式是一个交互的0 /1 序 列（01010101…）前导的最小长度是可编程控制的。当启用 TX 时，调制器开始传送前导。当控制数目的前导字节被传送完毕，调制器开始发送同步词汇，然后传送来自 TX FIFO的可利用的数据。若 TX FIFO 为空，调制器将继续传送前导字节，直到第一个字节被写入 TX FIFO。调制器将随后传送同步词汇和数据字节;<br>前导字节的长度由MDMCFG1.NU_PREAMBLE 值控制。</p>\n</blockquote>\n<h3 id=\"数据包长度\"><a href=\"#数据包长度\" class=\"headerlink\" title=\"数据包长度\"></a>数据包长度</h3><ul>\n<li>CC1101 支持恒定长度数据包协议和可变长度协议。</li>\n<li><strong>可变</strong>或<strong>固定数据包</strong>长度模式能支持的长度可达 255 字节。</li>\n<li><strong>大于255个字节</strong>的数据包，必须使用<strong>无限数据包长度模式</strong>；<blockquote>\n<p>使用不同长度的配置来支持数据包格式。必须确保在发送前半个或任何字节的时候TX模式不被关闭</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"固定数据包长度\"><a href=\"#固定数据包长度\" class=\"headerlink\" title=\"固定数据包长度\"></a>固定数据包长度</h4><ul>\n<li>固定数据包长度模式通过设定PKTCTRL0.LENGTH_CONFIG=0来选择。</li>\n<li>期望的数据包长度通过PKTLEN寄存器来设置，不包括长度字节和可选的CRC；</li>\n</ul>\n<h4 id=\"可变数据包长度\"><a href=\"#可变数据包长度\" class=\"headerlink\" title=\"可变数据包长度\"></a>可变数据包长度</h4><ul>\n<li>可变数据包长度模式，PKTCTRL0.LENGTH_CONFIG=1，数据包长度由同步字后面的第一个字节配置。</li>\n<li>数据包长度定义为有效载荷，不包括长度字节和可选的CRC。</li>\n<li>PKTLEN用来配置允许接收的最大数据包长度。</li>\n<li>任何接收的数据包长度大于PKTLEN的值都将被丢弃。</li>\n</ul>\n<h5 id=\"可变长数据包收发逻辑\"><a href=\"#可变长数据包收发逻辑\" class=\"headerlink\" title=\"可变长数据包收发逻辑\"></a>可变长数据包收发逻辑</h5><p>数据包长度寄存器PKTLEN，在接收和发送时可以重新编程。结合固定数据包长度模式(PKTCTRL0.LENGTH_CONFIG=0)，这使与变长数据包不同的长度配置成为可能。（在可变数据包长度模式下长度字节是同步字节后第一个字节）在接收开始，数据包长度设置为一个大的值。MCU读取足够多的字节来解析数据包中的长度区域。然后依照这个值对PKTLEN进行设置。当数据包处理器中的字节计数器等于PKTLEN寄存器的值时数据包结束。因此，MCU必须在内部计数器达到数据包长度之前确认正确的长度</p>\n<h4 id=\"无限数据包长度模式-大于255个字节\"><a href=\"#无限数据包长度模式-大于255个字节\" class=\"headerlink\" title=\"无限数据包长度模式(大于255个字节)\"></a>无限数据包长度模式(大于255个字节)</h4><ul>\n<li>PKTCTRL0.LENGTH_CONFIG=2，数据包长度将设置为无限长，发送和接收将持续到手动关闭。</li>\n</ul>\n<h5 id=\"无限数据包长度收发逻辑\"><a href=\"#无限数据包长度收发逻辑\" class=\"headerlink\" title=\"无限数据包长度收发逻辑\"></a>无限数据包长度收发逻辑</h5><ul>\n<li>数据包自动控制寄存器PKTCTRL0，可以在TX和RX期间重新编程。这就使发送和接收数据包长度超过256字节并且仍然使用数据包处理器硬件支持成为可能。</li>\n<li>在数据包开始时，必须激活无限数据包长度模式（PKTCTRL0.LENGTH_CONFIG=2）。</li>\n<li>在发送端，PKTLEN寄存器设置为：mod(长度,256)。</li>\n<li>在接收端，MCU读出足够长度的字节来解析出数据包长度并设置PKTLEN寄存器为:mod(长度,256)。</li>\n<li>当数据包中还有少于256字节数据，MCU禁止数据包无限长度模式并且激活固定长度模式。</li>\n<li>当内部字节计数器到PKTLEN时，发送和接收结束。</li>\n<li>（无线进入的状态由TXOFF_MODE 或 RXOFF_MODE决定）自动CRC添加/校验也可以使用（通过设置PKTCTRL0.CRC_EN=1）。</li>\n</ul>\n<blockquote>\n<p>例子:发送一个600字节的数据包时，MCU必须按照以下执行：</p>\n<ul>\n<li>设置PKTCTRL0.LENGTH_CONFIG=2。 </li>\n<li>重新设置PKTLEN寄存器的值为:（600，256）=88. <strong>(600%256 = 88)</strong></li>\n<li>至少发送345字节（600-255），例如通过填充64字节 TX FIFO 6次（发送384字节）。 </li>\n<li>设置PKTCTRL0.LENGTH_CONFIG=0。 </li>\n<li>当数据包计数器达到88发送完成。一共600字节被发送。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d519a90a009de7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"600个字节发送\"></li>\n</ul>\n</blockquote>\n<h3 id=\"接收模式下的数据包过滤\"><a href=\"#接收模式下的数据包过滤\" class=\"headerlink\" title=\"接收模式下的数据包过滤\"></a>接收模式下的数据包过滤</h3><p>CC1101支持三种不同类型的数据包过滤：</p>\n<ul>\n<li>地址过滤</li>\n<li>最大长度过滤</li>\n<li>CRC过滤</li>\n</ul>\n<h4 id=\"地址过滤\"><a href=\"#地址过滤\" class=\"headerlink\" title=\"地址过滤\"></a>地址过滤</h4><ul>\n<li>设置PKTCTRL1.ADR_CHK为任意大于0的值使能数据包地址过滤。</li>\n<li>数据包处理器启动后将比较数据包中的目标地址字节和在ADDR寄存器中设置的节点地址<br>或者当PKTCTRL1.ADR_CHK=10时的广播地址0x00<br>以及PKTCTRL1.ADR_CHK=11时的广播地址0x00和0xFF。<br>如果接收的地址匹配到一个正确地址，数据包被接收并写入到RX FIFO。<br>如果地址匹配失败，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。 </li>\n<li>如果当时用无限数据包长度模式和使能地址过滤时接收地址匹配到正确的地址，0xFF将被写入到RX FIFO，其次是地址字节和有效载荷。</li>\n</ul>\n<h4 id=\"最大长度过滤\"><a href=\"#最大长度过滤\" class=\"headerlink\" title=\"最大长度过滤\"></a>最大长度过滤</h4><p>在可变数据包模式，PKTCTRL0.LENGTH_CONFIG=1，PKTLEN.PACKET_LENGTH寄存器用来设置最大允许的数据包长度。如果接收的长度字节大于这个值，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。</p>\n<h4 id=\"CRC过滤\"><a href=\"#CRC过滤\" class=\"headerlink\" title=\"CRC过滤\"></a>CRC过滤</h4><ul>\n<li>当CRC校验失败时过滤数据包，通过设置PKTCTRL1.CRC_AUTOFLUSH=1使能；</li>\n<li>CRC自动清除功能将在CRC校验失败时清空所有RX FIFO；</li>\n<li>在自动清空RX FIFO后，下一个状态依赖于MCSM1.RXOFF_MODE的设置；</li>\n<li>当使用自动清除功能，在可变数据包长度模式下最大数据包长度为63字节，在定长数据包长度模式下是64字节；</li>\n<li>注意当PKTCTRL1.APPEND_STATUS使能，最大允许数据包长度将减少2个字节，以确保在数据包的结尾附加的2字节的状态字节在RX FIFO中占用的空间；</li>\n<li>当CRC校验错误以后全部RX FIFO被清空；</li>\n<li>在接收正确的数据包前之前接收到的数据包必须从FIFO中读出。直到CRC校验正确MCU才从正确的数据包中读取数据；</li>\n</ul>\n<h3 id=\"发送模式下的数据包处理\"><a href=\"#发送模式下的数据包处理\" class=\"headerlink\" title=\"发送模式下的数据包处理\"></a>发送模式下的数据包处理</h3><ul>\n<li>需要发送的有效载荷必须写入到TX FIFO；</li>\n<li>如果使能可变数据包长度第一个字节必须写长度字节；</li>\n<li>长度字节的值等于数据包的有效载荷（包含可选的地址字节）；</li>\n<li>如果在接收端使能地址识别，写入到TX FIFO中的第二个字节必须是地址字节；</li>\n<li>如果使能固定数据包长度，写入到TX FIFO中的第一个字节必须是地址字节（接收端使用地址识别）；</li>\n<li>调制器将首先发送预置数量的前导字节；</li>\n<li>如果TX FIFO中有可发送的数据，调制器将发送2字节（可选4字节）同步字，紧接着是TX FIFO中的有效载荷；</li>\n<li>如果使能CRC，校验时计算TX FIFO中的所有数据，然后跟随有效数据发送2个附加字节；</li>\n<li>如果在完整的数据包发送完成之前TX FIFO变为空的，无线将进入TXFIFO_UNDERFLOW状态。退出该状态的唯一方法是运行SFTX命令；</li>\n<li>发送下溢后再向TX FIFO写入数据不能重启TX模式；</li>\n<li>如果whitening(白化)被使能，同步字后面的所有字节将被whitened。这必须在FEC/Interleaver之前完成。Whitening通过设置PKTCTRL0.WHITE_DATA=1使能；</li>\n<li>如果FEC/Interleaving(交错器)被使能，同步字后面的所有数据在调制之前将被interleaver 和 FEC编码加密。FEC通过设置MDMCFG1.FEC_EN=1使能；</li>\n</ul>\n<h3 id=\"接收模式下的数据包处理\"><a href=\"#接收模式下的数据包处理\" class=\"headerlink\" title=\"接收模式下的数据包处理\"></a>接收模式下的数据包处理</h3><ul>\n<li>在接收模式，解调器和数据包处理器将寻找一个有效的前导和同步字。</li>\n<li>当找到后，解调器将获得位和字节同步，并将接收第一个有效字节。 </li>\n<li>如果使能FEC/Interleaver，FEC解码器将开始解码第一个有效字节。Interleaver将在数据被其他任何处理之前解密。 </li>\n<li>如果使能whitening，在此基础上数据将被de-whitening(反白化)。 </li>\n<li>当使能可变数据包长度模式时，第一个字节是长度字节。数据包处理器储存该值为数据包长度并且通过该长度字节指示接收的字节数量。</li>\n<li>如果使用固定数据包长度模式，数据包处理器将接收预置数量的字节。 </li>\n<li>接下来，数据包处理器可选的检测地址并且只有地址匹配才继续接收。</li>\n<li>如果使能自动CRC校验，数据包处理器计算CRC并与CRC校验结果相匹配。 </li>\n<li>在有效载荷的结尾，数据包处理器将可选的写入两个复交数据包状态字节，包括CRC状态、LQI和RSSI</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-7786a7bdca8c6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"接收数据包状态字1\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-116e004500c41ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"接收数据包状态字2\"></p>\n<h3 id=\"MCU数据包处理\"><a href=\"#MCU数据包处理\" class=\"headerlink\" title=\"MCU数据包处理\"></a>MCU数据包处理</h3><p>如果在固件中执行一个数据包导向的无线协议，MCU需要知道一个数据包什么时候收到/发送。<br>加之，超过64字节长度的数据包，当接收时需要读取RX FIFO和当发送时TX FIFO需要重新填充。<br>这就意味着MCU必须知道有多少个字节可以从RX FIFO中读取或者可以向TX FIFO中写入。<br>有两种方法可以获得必要的状态信息。</p>\n<ul>\n<li><p>中断驱动方法<br>当同步字接收/发送完成或者完整的数据包接收/发送通过设置IOCFGx.GDOx_CFG=0x06，GDO脚可以用在RX和TX中产生一个中断。<br>此外，<br>IOCFGx.GDOx_CFG还有两个配置用来产生中断，源于有多少字节在RX FIFO或TX FIFO。<br>IOCFGx.GDOx_CFG=0x00和IOCFGx.GDOx_CFG=0x01为RX FIFO，<br>IOCFGx.GDOx_CFG=0x02和IOCFGx.GDOx_CFG=0x03为TX FIFO。</p>\n</li>\n<li><p>SPI轮询<br>PKTSTATUS可以使用给定的速率查询以获得GDO0和GDO2当前值。<br>RXBYTES 和 TXBYTES可以使用给定的速率查询以获得RX FIFO或者TX FIFO中的字节数。<br>合二为一的，RX FIFO和TX FIFO中的字节数量可以从每次头字节、数据字节或命令选通在SPI总线上发送时MISO引脚返回的芯片状态字节读取。 </p>\n<blockquote>\n<p><strong>推荐使用中断驱动方法</strong>因为高速率SPI轮询将减小RX的灵敏度。<br>而且，在Section10.3和CC1101勘误表【4】中，当使用SPI轮询，单一读取PKTSTATUS、 RXBYTES和 TXBYTES有一个小的有限的错误的可能性。<br>当读取芯片状态字节有同样的问题。 </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"RSSI\"><a href=\"#RSSI\" class=\"headerlink\" title=\"RSSI\"></a>RSSI</h3><ul>\n<li>RSSI的值时在选择的通道中信号功率级别的估计。</li>\n<li>这个值基于RX中当前增益的设置和信道中的标准信号等级。 </li>\n<li><p>在RX模式，RSSI可以连续的从RSSI状态寄存器读取知道解调器检测到一个同步字（当同步字检测使能）。此时RSSI读取的值将被冻结知道芯片下一次进入RX状态。 </p>\n<blockquote>\n<p>注意：从无线进入RX模式到在RSSI寄存器检测到一个正确的RSSI值需要一定的时间。查看DN505[15]获得RSSI响应时间估算的详细信息。<br>RSSI的值以dBm和1/2 dB给出。<br>RSSI更新速率，fRSSI 依赖于接收滤波带宽和AGCCTRL0.FILTER_LENGTH。</p>\n</blockquote>\n</li>\n<li><p>如果使能PKTCTRL1.APPEND_STATUS，数据包最后的RSSI值自动添加到有效载荷后面的第一个附加字节。 </p>\n</li>\n<li>从RSSI状态寄存器读出的RSSI值时2个补足的数字。下面的程序可以将RSSI转换为完整的功率级别（RSSI_dBm）。<br>1) 读取RSSI状态寄存器<br>2) 将读到的数据从16进制数转换到二进制数（RSSI_dec）<br>3)  如果RSSI_dec≧128，RSSI_dBm =(RSSI_dec - 256)/2 – RSSI_offset 4）<br>4 )  如果RSSI_dec＜128，RSSI_dBm =RSSI_dec /2 – RSSI_offset</li>\n</ul>\n<h3 id=\"净信道评估（CCA）\"><a href=\"#净信道评估（CCA）\" class=\"headerlink\" title=\"净信道评估（CCA）\"></a>净信道评估（CCA）</h3><ul>\n<li>CCA用来显示当前信道是空闲还是繁忙。</li>\n<li>通过设定IOCFGx.GDOx_CFG=0x09，当前的CCA状态在任何一个GDO引脚都可以查看。 </li>\n<li>MCSM1.CCA_MODE用来选择当确定CCA时使用的模式。 </li>\n<li>当CC1101在RX状态时给出STX 或 SFSTXON命令选通，仅能在净信道条件完成才能进入TX或FSTXON状态。</li>\n<li>此外，芯片将仍处于RX状态。如果信道接下来变为可用的，在一个新的命令选通通过SPI接口发送之前，无线不会进入TX或FSTXON状态。这个特性叫做<strong>TX-if-CCA</strong>。<br>可以编程设置4种CCA条件：<ul>\n<li>始终（禁止CCA，总是进入TX）</li>\n<li>如果RSSI低于门限值 </li>\n<li>除非正常接收一个数据包 </li>\n<li>以上两个（RSSI低于门限值和没有正常接收一个数据包）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"链路质量指示（LQI）\"><a href=\"#链路质量指示（LQI）\" class=\"headerlink\" title=\"链路质量指示（LQI）\"></a>链路质量指示（LQI）</h3><ul>\n<li>信号链路质量指示是一个公制的接收信号的当前质量。</li>\n<li>若 PKTCTRL1.APPEND_STATUS启用，则这个值自动附加在接收数据包的末端。</li>\n<li>这个值也可从 LQI 状态寄存器上读取。<br>LQI 由跟随同步词汇的 64 个符号（头 8 个数据包字节）计算得来。LQI 最好用作连接<br>质量的一个相对的度量，因为这个值决定于调制格式。</li>\n</ul>\n<h3 id=\"上电启动序列\"><a href=\"#上电启动序列\" class=\"headerlink\" title=\"上电启动序列\"></a>上电启动序列</h3><ul>\n<li>当电源给电，系统必须复位。</li>\n<li>通过下面描述的2个序列中的一个来完成，即自动上电复位（POR）或者手动复位。</li>\n<li>自动上电复位或手动复位之后，推荐转换GDO0引脚上输出的信号。</li>\n<li>默认设置是以CLK_XOSC/192的频率输出一个时钟信号。</li>\n<li>然而，为了在TX和RX中优化执行，必须<strong><strong>GD0/1/2 引脚配置</strong></strong>中的配置来配置GDO脚</li>\n</ul>\n<h4 id=\"自动POR\"><a href=\"#自动POR\" class=\"headerlink\" title=\"自动POR\"></a>自动POR</h4><p>CC1101内部包含上电复位电路。最小的需求见表15，完整的上电复位功能必须遵循。当CHIP_RDYn变低内部上电序列完成。在CSn拉低后在SO引脚上可以查看CHIP_RDYn。<br>当CC1101复位完成，芯片将进入IDLE状态，晶振开始运行。如果芯片在上电之后有足够的时间让晶振稳定，在捕获CSn变低之后SO引脚将马上变低。如果在复位完成之前CSn被拉低，SO引脚将首先变高，指示晶振没有稳定，变低之前见下图。<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-1dc0e7c8463d0096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自动POR\"></p>\n<h4 id=\"手动复位\"><a href=\"#手动复位\" class=\"headerlink\" title=\"手动复位\"></a>手动复位</h4><p>CC1101上的其它全部复位时使用SRES命令。通过执行这个命令，所有内部寄存器和状态恢复默认，IDLE状态。手动复位序列如下（图 手动复位）： </p>\n<ul>\n<li>设置SCLK=1，SI=0，避免引脚控制模式可能出现的问题。 </li>\n<li>选通CS低/高。 </li>\n<li>保持CS为低，然后拉高，至少40us才可以拉低 </li>\n<li>将CSn拉低等到SO拉低（CHIP_RDYn）。</li>\n<li>在SI线上发布SRES选通。 </li>\n<li>当SO再一次拉低，复位完成，芯片进入IDLE状态<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-e692bc860255aa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"手动复位\"><blockquote>\n<p>注意：以上复位程序只需要在电源给电之后。如果用户在这之后想要复位CC1101，只需要执行SRES命令选通</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"常规用途-测试输出控制引脚\"><a href=\"#常规用途-测试输出控制引脚\" class=\"headerlink\" title=\"常规用途/ 测试输出控制引脚\"></a>常规用途/ 测试输出控制引脚</h3><p>3 个数字输出引脚 GDO0 和 GDO1 和 GDO2为常规控制脚。它们的功能分别由</p>\n<ul>\n<li><strong>IOCFG0.GDO0_CFG</strong></li>\n<li><strong>IOCFG1.GDO1_CFG</strong></li>\n<li><strong>IOCFG2.GDO3_CFG</strong><br>控制;</li>\n<li>GDO1 和在 SPI 接口上的SO 脚是同一脚，因此这个脚上控制的输出在 CSn 高时才有效。</li>\n<li>GDO1 的默认值为 3状态，当 SPI 接口和其它设备一起使用时这是有效的。</li>\n<li>GOO0 的默认值为125kHz-146kHz时钟输出（XOSC 频率除以 192）。当 XOSC 在重启<br>功率下开启后，使用一个晶体，它就能用来为系统中的 MCU 计时。当 MCU 工作时，通过 IOCFG0.GDO0_CFG，它能改变时钟频率。不会造成时钟波形干扰。</li>\n<li>对 IOCFG0.GDO0_CFG 寄存器写入值 128（0x80h），芯片内模拟温度传感器启用。然后，GDO0 上的电压与温度成比例</li>\n<li>如果IOCFGx.GDOx_CFG的设置小于0x20并且IOCFGx_GDOx_INV为0（1），在SLEEP模式GDO0和GDO2将由硬件置0（1），GDO1将有硬件置1（0）。这些信号将由硬件保持知道CHIP_RDYn变低。 </li>\n<li>如果IOCFGx.GDOx_CFG设置为0x20或更高，GDO引脚在SLEEP状态也工作在设置的状态。例如，如果IOCFG1.GDO1_CFG=0x2E，GDO1在所有状态都是高阻抗。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>GDO0_CFG[5:0] GDO1_CFG[5:0] GDO2_CFG[5:0]</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0(0x00)</td>\n<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充时声明。当 RX FIFO 在RXFIFO THR 之下时被反声明</td>\n</tr>\n<tr>\n<td>1(0x01)</td>\n<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充或到达数据包末端时声明。当RX FIFO 空时被反声明</td>\n</tr>\n<tr>\n<td>2(0x02)</td>\n<td>与 TX FIFO 关联：当 TX FIFO 在 TXFIFO_THR 上被填充时声明。当 TX FIFO 在TXFIFO THR 之下时被反声明</td>\n</tr>\n<tr>\n<td>3(0x03)</td>\n<td>与 TX FIFO 关联：当 TX FIFO 满时声明。当 TX FIFO 在 TXFIFO_THR 之下为空时被反声明</td>\n</tr>\n<tr>\n<td>4(0x04)</td>\n<td>当 RX FIFO 已溢出时声明。当 FIFO 被淹没时被反声明</td>\n</tr>\n<tr>\n<td>5(0x05)</td>\n<td>当 TX FIFO 已下溢时声明。当 FIFO 被淹没时被反声明</td>\n</tr>\n<tr>\n<td>6(0x06)</td>\n<td>当同步词汇被送出/收到时声明，在数据包末端时反声明。对 RX，当可选地址检测失败或 RX FIFO 溢出时，引脚被反声明。若 TX FIFO 下溢，这个引脚将同样被反声明</td>\n</tr>\n<tr>\n<td>7(0x07)</td>\n<td>当一个数据包被 OK CRC 收到时声明。当第一个字节从 RX FIFO 中读取时反声明</td>\n</tr>\n<tr>\n<td>8(0x08)</td>\n<td>前导质量达到。当 PQI 高于控制 PQT 值时声明</td>\n</tr>\n<tr>\n<td>9(0x09)</td>\n<td>清理信道评估。当 RSSI 等级低于门限时为高（决定于当前 CCA MODE 设置）</td>\n</tr>\n<tr>\n<td>10(0x0A)</td>\n<td>锁定检测器输出</td>\n</tr>\n<tr>\n<td>11(0x0B)</td>\n<td>连续时钟。与同步连续模式下的数据同步。数据在下降沿建立，在 SERIAL CLK 上升沿被读取。</td>\n</tr>\n<tr>\n<td>12(0x0C)</td>\n<td>连续同步数据输出。同步连续模式时使用。在 SERIAL_CLK 上升沿 MCU 必须读 DO。数据在下降沿由 CC2500 建立</td>\n</tr>\n<tr>\n<td>13(0x0D)</td>\n<td>连续透明数据输出。同步连续模式时使用。</td>\n</tr>\n<tr>\n<td>14(0x0E)</td>\n<td>载波感应。当 RSSI 等级低于门限时为高</td>\n</tr>\n<tr>\n<td>15(0x0F)</td>\n<td>CRC OK。上一个 CRC 对比匹配。当进入/重启 RX 模式时清理。</td>\n</tr>\n<tr>\n<td>16(0x10)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>17(0x11)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>18(0x12)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>19(0x13)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>20(0x14)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>21(0x15)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>22(0x16)</td>\n<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>23(0x17)</td>\n<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>24(0x18)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>25(0x19)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>26(0x1A)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>27(0x1B)</td>\n<td>1 时 PA PD.PA 开启，0 时功率降低。能用来控制外部 PA 或 RX/TX 开关</td>\n</tr>\n<tr>\n<td>28(0x1C)</td>\n<td>1 时 LNA PD.LNA 开启，0 时功率降低。能用来控制外部 LNA 或 RX/TX 开关</td>\n</tr>\n<tr>\n<td>29(0x1D)</td>\n<td>RX_SYMBOL_TICK。能同RX_HARD_DATA一起使用在交替连续RX输出上。</td>\n</tr>\n<tr>\n<td>30(0x1E)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>31(0x1F)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>32(0x20)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>33(0x21)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>34(0x22)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>35(0x23)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>36(0x24)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>37(0x25)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>38(0x26)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>39(0x27)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>40(0x28)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>41(0x29)</td>\n<td>CHIP RDY</td>\n</tr>\n<tr>\n<td>42(0x2A)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>43(0x2B)</td>\n<td>XOSC STABLE</td>\n</tr>\n<tr>\n<td>44(0x2C)</td>\n<td>保留－测试用</td>\n</tr>\n<tr>\n<td>45(0x2D)</td>\n<td>GDO0 Z EN N。当这个输出为 0 时，GDO0 配置为输入（为连续 TX 数据）</td>\n</tr>\n<tr>\n<td>46(0x2E)</td>\n<td>高阻抗（3-状态）</td>\n</tr>\n<tr>\n<td>47(0x2F)</td>\n<td>HW 到 0（HW1 同 INV 信号一起完成）</td>\n</tr>\n<tr>\n<td>48(0x30)</td>\n<td>CLK XOSC/1</td>\n</tr>\n<tr>\n<td>49(0x31)</td>\n<td>CLK XOSC/1.5</td>\n</tr>\n<tr>\n<td>50(0x32)</td>\n<td>CLK XOSC/2</td>\n</tr>\n<tr>\n<td>51(0x33)</td>\n<td>CLK XOSC/3</td>\n</tr>\n<tr>\n<td>52(0x34)</td>\n<td>CLK XOSC/4</td>\n</tr>\n<tr>\n<td>53(0x35)</td>\n<td>CLK XOSC/6</td>\n</tr>\n<tr>\n<td>54(0x36)</td>\n<td>CLK XOSC/8</td>\n</tr>\n<tr>\n<td>55(0x37)</td>\n<td>CLK XOSC/12</td>\n</tr>\n<tr>\n<td>56(0x38)</td>\n<td>CLK XOSC/16</td>\n</tr>\n<tr>\n<td>57(0x39)</td>\n<td>CLK XOSC/24</td>\n</tr>\n<tr>\n<td>58(0x3A)</td>\n<td>CLK XOSC/32</td>\n</tr>\n<tr>\n<td>59(0x3B)</td>\n<td>CLK XOSC/48</td>\n</tr>\n<tr>\n<td>60(0x3C)</td>\n<td>CLK XOSC/64</td>\n</tr>\n<tr>\n<td>61(0x3D)</td>\n<td>CLK XOSC/96</td>\n</tr>\n<tr>\n<td>62(0x3E)</td>\n<td>CLK XOSC/128</td>\n</tr>\n<tr>\n<td>63(0x3F)</td>\n<td>CLK XOSC/192</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"寄存器配置\"><a href=\"#寄存器配置\" class=\"headerlink\" title=\"寄存器配置\"></a>寄存器配置</h3><p>CC1101的配置通过编程8位寄存器来实现</p>\n<h4 id=\"命令寄存器-12个\"><a href=\"#命令寄存器-12个\" class=\"headerlink\" title=\"命令寄存器(12个)\"></a>命令寄存器(12个)</h4><p>访问这些寄存器将会发起内部状态或模式的改变</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x30</td>\n<td>SRES</td>\n<td>复位芯片</td>\n</tr>\n<tr>\n<td>0x31</td>\n<td>SFSTXON</td>\n<td>使能和校准频率合成器（如果MCSM0.FS_AUTOCAL=1）。如果在RX(使能CCA)，仅当合成器运行时转到等待状态（RX/TX快速转换）</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>SXOFF</td>\n<td>关闭晶振 </td>\n</tr>\n<tr>\n<td>0x33</td>\n<td>SCAL</td>\n<td>校准频率合成器并关闭。SCAL可以从IDLE模式执行而不需要设置收到校准模式（MCSM0.FS_AUTOCAL=0）。 </td>\n</tr>\n<tr>\n<td>0x34</td>\n<td>SRX</td>\n<td>使能RX。如果来自IDLE状态并且MCSM0.FS_AUTOCAL=1首先执行校准。 </td>\n</tr>\n<tr>\n<td>0x35</td>\n<td>STX</td>\n<td>在IDLE状态：使能TX。如果MCSM0.FS_AUTOCAL=1首先执行校准。如果在RX状态并使能CCA仅在信道为空时转到TX。 </td>\n</tr>\n<tr>\n<td>0x36</td>\n<td>SIDLE</td>\n<td>离开RX/TX模式，关闭频率合成器，如果可用离开WOR。</td>\n</tr>\n<tr>\n<td>0x38</td>\n<td>SWOR</td>\n<td>如果WORCTRL.RC_PD=0像Section19.5的描述一样开始自动RX轮询序列（WOR）。 </td>\n</tr>\n<tr>\n<td>0x39</td>\n<td>SPWD</td>\n<td>当CSn拉高进入掉电模式。 </td>\n</tr>\n<tr>\n<td>0x3A</td>\n<td>SFRX</td>\n<td>清除RX FIFO缓冲器。只在IDLE 或 RXFIFO_OVERFLOW状态运行SFRX。</td>\n</tr>\n<tr>\n<td>0x3B</td>\n<td>SFTX</td>\n<td>清除TX FIFO缓冲器。只在IDLE 或 TXFIFO_UNDERFLOW状态运行SFTX。 </td>\n</tr>\n<tr>\n<td>0x3C</td>\n<td>SWORRST</td>\n<td>复位实时时钟到Event1值。 </td>\n</tr>\n<tr>\n<td>0x3D</td>\n<td>SMOP</td>\n<td>无操作，可以用来访问获取芯片状态字节。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置寄存器\"><a href=\"#配置寄存器\" class=\"headerlink\" title=\"配置寄存器\"></a>配置寄存器</h4><hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>寄存器</th>\n<th>描述</th>\n<th>保持在休眠状态中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>IOCFG2</td>\n<td>GDO2输出引脚配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>IOCFG1</td>\n<td>GDO1输出引脚配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x02</td>\n<td>IOCFG0</td>\n<td>GDO0输出引脚配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x03</td>\n<td>FIFOTHR</td>\n<td>RX FIFO和TX FIFO门限</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x04</td>\n<td>SYNC1</td>\n<td>同步字，高字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x05</td>\n<td>SYNC0</td>\n<td>同步字，低字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x06</td>\n<td>PKTLEN</td>\n<td>数据包长度</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x07</td>\n<td>PKTCTRL1</td>\n<td>数据包自动控制</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x08</td>\n<td>PKTCTRL0</td>\n<td>数据包自动控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x09</td>\n<td>ADDR</td>\n<td>设备地址</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0A</td>\n<td>CHANNR</td>\n<td>信道号</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0B</td>\n<td>FSCTRL1</td>\n<td>频率合成器控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0C</td>\n<td>FSCTRL0</td>\n<td>频率合成器控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0D</td>\n<td>FREQ2</td>\n<td>频率控制字，高字节</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x0E</td>\n<td>FREQ1</td>\n<td>频率控制字，中间字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x0F</td>\n<td>FREQ0</td>\n<td>频率控制字，低字节</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x10</td>\n<td>MDMCFG4</td>\n<td>Modem配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x11</td>\n<td>MDMCFG3</td>\n<td>Modem配置</td>\n<td>是 、</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td>MDMCFG2</td>\n<td>Modem配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x13</td>\n<td>MDMCFG1</td>\n<td>Modem配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x14</td>\n<td>MDMCFG0</td>\n<td>Modem配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x15</td>\n<td>DEVIATN</td>\n<td>Modem背离设定</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x16</td>\n<td>MCSM2</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x17</td>\n<td>MCSM1</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x18</td>\n<td>MCSM0</td>\n<td>主无线控制状态机配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x19</td>\n<td>FOCCFG</td>\n<td>频率偏移补偿配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1A</td>\n<td>BSCFG</td>\n<td>位同步配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x1B</td>\n<td>AGCTRL2</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1C</td>\n<td>AGCTRL1</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1D</td>\n<td>AGCTRL0</td>\n<td>AGC控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1E</td>\n<td>WOREVT1</td>\n<td>事件0超时高字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x1F</td>\n<td>WOREVT0</td>\n<td>事件0超时低字节</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x20</td>\n<td>WORCTRL</td>\n<td>WOR控制</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x21</td>\n<td>FREND1</td>\n<td>前端RX配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>FREND0</td>\n<td>前端TX配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x23</td>\n<td>FSCAL3</td>\n<td>频率合成器校准</td>\n<td>是</td>\n</tr>\n<tr>\n<td>0x24</td>\n<td>SCAL2</td>\n<td>频率合成器校准</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x25</td>\n<td>SCAL1</td>\n<td>频率合成器校准</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x26</td>\n<td>SCAL0</td>\n<td>频率合成器校准</td>\n<td>是</td>\n</tr>\n<tr>\n<td> 0x27</td>\n<td>RCCTRL1</td>\n<td>RC振荡器配置</td>\n<td>是</td>\n</tr>\n<tr>\n<td> 0x28</td>\n<td>RCCTRL0</td>\n<td>RC振荡器配置</td>\n<td>是 </td>\n</tr>\n<tr>\n<td>0x29</td>\n<td>FSTEST</td>\n<td>频率合成器校准控制</td>\n<td>否</td>\n</tr>\n<tr>\n<td> 0x2A</td>\n<td>PTEST</td>\n<td>产品测试</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2B</td>\n<td>AGCTEST</td>\n<td>AGC测试</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2C</td>\n<td>TEST2</td>\n<td>各方面测试设定</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2D</td>\n<td>TEST1</td>\n<td>各方面测试设定</td>\n<td>否 </td>\n</tr>\n<tr>\n<td>0x2E</td>\n<td>TEST0</td>\n<td>各方面测试设定</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"状态寄存器总览\"><a href=\"#状态寄存器总览\" class=\"headerlink\" title=\"状态寄存器总览\"></a>状态寄存器总览</h4><hr>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>寄存器</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x30（0xF0）</td>\n<td>PARTNUM</td>\n<td>CC1101零件号 </td>\n</tr>\n<tr>\n<td>0x31（0xF1）</td>\n<td>VERSION</td>\n<td>当前版本号 </td>\n</tr>\n<tr>\n<td>0x32（0xF2）</td>\n<td>FREQEST</td>\n<td>频率偏移评估</td>\n</tr>\n<tr>\n<td>0x33（0xF3）</td>\n<td>LQI</td>\n<td>解调器链路质量估计 </td>\n</tr>\n<tr>\n<td>0x34（0xF4）</td>\n<td>RSSI</td>\n<td>接收信号强度指示 </td>\n</tr>\n<tr>\n<td>0x35（0xF5）</td>\n<td>MARCSTATE</td>\n<td>控制状态机状态 </td>\n</tr>\n<tr>\n<td>0x36（0xF6）</td>\n<td>WORTIME1</td>\n<td>WOR定时器高字节</td>\n</tr>\n<tr>\n<td>0x37（0xF7）</td>\n<td>WORTIME0</td>\n<td>WOR定时器低字节 </td>\n</tr>\n<tr>\n<td>0x38（0xF8）</td>\n<td>PKTSTATUS</td>\n<td>当前GDOx状态和数据包状态</td>\n</tr>\n<tr>\n<td>0x39（0xF9）</td>\n<td>VCO_VC_DAC</td>\n<td>PLL校准模块的当前设置 </td>\n</tr>\n<tr>\n<td>0x3A（0xFA）</td>\n<td>TXBYTES</td>\n<td>下溢和TX FIFO中的字节数 </td>\n</tr>\n<tr>\n<td>0x3B（0xFB）</td>\n<td>RXBYTES</td>\n<td>上溢和RX FIFO中的字节数 </td>\n</tr>\n<tr>\n<td>0x3C（0xFC）</td>\n<td>RCCTRL1_STATUS</td>\n<td>上一次RC振荡器校准结果</td>\n</tr>\n<tr>\n<td>0x3D（0xFD）</td>\n<td>RCCTRL0_STATUS</td>\n<td>上一次RC振荡器校准结果</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-32d8e78d15cce521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"寄存器总图\"></p>\n<p>参考：<a href=\"https://wenku.baidu.com/view/c2b0081b227916888486d769.html\">https://wenku.baidu.com/view/c2b0081b227916888486d769.html</a></p>"},{"title":"Linux之Socket关键","date":"2017-06-07T15:10:11.000Z","_content":"\n## 一、Socket 属性设置函数\n\n```\nint getsockopt(int sockfd, int level, int optname,void *optval, socklen_t *optlen);\nint setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);\n```\n解释:**setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen)**\n<!--more-->\n- **sockfd(套接字):** 指向一个打开的套接口描述字\n- **level(级别):** 指定选项代码的类型\n- - **SOL_SOCKET:** 基本套接口\n- - **IPPROTO_IP:** IPv4套接口\n- - **IPPROTO_IPV6:** IPv6套接口\n- - **IPPROTO_TCP:** TCP套接口\n- **optname(选项名):** 选项名称\n- **optval(选项值):** 是一个指向变量的指针 类型：整形，套接口结构， 其他结构类型:linger{}, timeval{ }\n该值有两种类型，分别是布尔型选项，允许或禁止一种特性；另一种是整形或结构选项。\n允许一个布尔型选项，则将optval指向非零整形数；\n禁止一个选项optval指向一个等于零的整形数。对于布尔型选项，optlen应等于sizeof(int)；\n对其他选项，optval指向包含所需选项的整形数或结构，而optlen则为整形数或结构的长度。\n- **optlen(选项长度):** optval 的大小\n\n\n## 二、Socket 端口复用(SO_REUSEADDR)\n\n> 一个网络应用程序只能绑定一个端口( 一个套接字只能绑定一个端口 )。\n\n1. *端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。*\n2. *端口复用真正的用处主要在于服务器编程：当服务器需要重启时，经常会碰到端口尚未完全关闭的情况，这时如果不设置端口复用，则无法完成绑定，因为端口还处于被别的套接口绑定的状态之中。*\n\n### 使用场景\n>**SO_REUSEADDR可以用在以下四种情况下。 (摘自《Unix网络编程》卷一，即UNPv1)**\n\n1. 当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你启动的程序的socket2要占用该地址和端口，你的程序就要用到该选项。\n2. SO_REUSEADDR允许同一port上启动同一服务器的多个实例(多个进程)。但每个实例绑定的IP地址是不能相同的。在有多块网卡或用IP Alias技术的机器可以测试这种情况。\n3. SO_REUSEADDR允许单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。这和2很相似，区别请看UNPv1。\n4. SO_REUSEADDR允许完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。\n\n### 实现方法\n\n```\nint opt = 1;\n// sockfd为需要端口复用的套接字\nsetsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&opt, sizeof(opt));\n```\n\n## 三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)\n**SO_SNDTIMO :** 用于设置发送和连接超时\n**SO_RCVTIMEO:** 用于设置接收超时\n**例 子**\n```\n//3s超时设置\nstruct timeval timeout = {3, 0};\n//socket设置发送超时\nsetsockopt(socket，SOL_SOCKET,SO_SNDTIMEO，(char *)&timeout,sizeof(struct timeval));\n\n//socket设置接收超时\nsetsockopt(socket，SOL_SOCKET,SO_RCVTIMEO，(char *)&timeout,sizeof(struct timeval));\n\n//socket设置连接超时\nsetsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &timeo, len);\naddr.sin_family = AF_INET;\naddr.sin_addr.s_addr = inet_addr(argv[1]);\naddr.sin_port = htons(atoi(argv[2]));\nif (connect(fd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n    if (errno == EINPROGRESS) {\n            fprintf(stderr, \"timeout/n\");\n            return -1;\n    }\n    perror(\"connect\");\n    return 0;\n}\n```\n## 四、Socket 心跳设置(SO_KEEPALIVE)\n>在《UNIX网络编程第1卷》中也有详细的阐述：\nSO_KEEPALIVE 保持连接检测对方主机是否崩溃，避免（服务器）永远阻塞于TCP连接的输入。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP就自 动给对方 发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：对方接收一切正常：以期望的ACK响应。2小时后，TCP将发出另一个探测分 节。对方已崩溃且已重新启动：以RST响应。套接口的待处理错误被置为ECONNRESET，套接 口本身则被关闭。对方无任何响应：源自berkeley的TCP发送另外8个探测分节，相隔75秒一个，试图得到一个响应。在发出第一个探测分节11分钟 15秒后若仍无响应就放弃。套接口的待处理错误被置为ETIMEOUT，套接口本身则被关闭。如ICMP错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 EHOSTUNREACH。\n\n**简单来说**\n*TCP_KEEPALIVE*选项只是一个开关，Linux中默认的Keepalive的选项如下：\n```\n$sudo sysctl -a | grep keepalive\nnet.ipv4.tcp_keepalive_time = 7200\nnet.ipv4.tcp_keepalive_probes = 9\nnet.ipv4.tcp_keepalive_intvl = 75\n```\n\n上文中的keepalive选项表示如果一个连接上7200s后没有任何数据发送，则设置了这个选项的本端向对端发送keepalive保活报文，它会有如下三种结果：\n- 对端回复ACK。则本端TCP认为该连接依然存活。继续等7200s后再发送keepalive报文。\n- 对端回复RESET。说明对端进程已经重启，本端的应用程序应该关闭该连接。\n- 没有对端的任何回复。则本端做重试，如果重试9次（前后重试间隔为75秒）仍然不可达，则向应用程序返回错误信息，ETIMEOUT（无任何应答）或EHOST\n\n### 开启keepalive机制\n```\nkeepAlive = 1;\nSetsockopt(listenfd, SOL_SOCKET, SO_KEEPALIVE, (void*)&keepAlive, sizeof(keepAlive));\n```\n### 修改过keepalive 时间\n如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，\n一种是修改内核关于网络方面的 配置参数；\n另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。\n- TCP_KEEPIDLE : 多长时间不活跃，就开始发探测包\n- TCP_KEEPINTVL: 两个探测包之间的间隔\n- TCP_KEEPCNT  : 发多少次探测包后没响应认为是断开\n**例子**\n```\n//连接上之后100s内没发送数据，则发探测包，每个探测包间隔10s,连续10次没收到响应认为断开\nint                 keepIdle = 100;\nint                 keepInterval = 10;\nint                 keepCount = 10;\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPIDLE, (void *)&keepIdle, sizeof(keepIdle));\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPINTVL, (void *)&keepInterval, sizeof(keepInterval));\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPCNT, (void *)&keepCount, sizeof(keepCount));\n```\n\n\n## 五、Socket 其他选项名\n- SO_RCVBUF             : int型  设置接收缓冲区的保留大小。\n- SO_SNDBUF             : int型  设置发送缓冲区的保留大小。\n- TCP_NODELAY           : bool型 设置是否开启Nagle算法。\n- SO_EXCLUSIVEADDRUSE   : bool型 同一个端口不能别的进程使用.\n\n\n## 六、常识\n\n- 每个套接口都有一个发送缓冲区和一个接收缓冲区。\n- 接收缓冲区被TCP和UDP用来将接收到的数据一直保存到由应用进程来读。\n- TCP：TCP通告另一端的窗口大小。\n- TCP套接口接收缓冲区不可能溢出，因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过宙口大小的数据，则接 收方TCP将丢弃它。\n- UDP：当接收到的数据报装不进套接口接收缓冲区时，此数据报就被丢弃。UDP是没有 流量控制的；快的发送者可以很容易地就淹没慢的接收者，导致接收方的UDP丢弃数据报。\n\n每个套接口都有一个接收低潮限度和一个发送低潮限度。\n它们是函数selectt使用的，接收低潮限度是让select返回“可读”而在套接口接收缓冲区中必须有的数据总量。 对于一个TCP或UDP套接口，此值缺省为1。发送低潮限度是让select返回“可写” 而在套接口发送缓冲区中必须有的可用空间。对于TCP套接口，此值常缺省为2048。 对于UDP使用低潮限度， 由于其发送缓冲区中可用空间的字节数是从不变化的，只要 UDP套接口发送缓冲区大小大于套接口的低潮限度，这样的UDP套接口就总是可写的。 UDP没有发送缓冲区，只有发送缓冲区的大小。\n","source":"_posts/Linux之Socket关键.md","raw":"---\ntitle: Linux之Socket关键\ndate: 2017-06-07 23:10:11\ntags: [Linux,网络]\n---\n\n## 一、Socket 属性设置函数\n\n```\nint getsockopt(int sockfd, int level, int optname,void *optval, socklen_t *optlen);\nint setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);\n```\n解释:**setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen)**\n<!--more-->\n- **sockfd(套接字):** 指向一个打开的套接口描述字\n- **level(级别):** 指定选项代码的类型\n- - **SOL_SOCKET:** 基本套接口\n- - **IPPROTO_IP:** IPv4套接口\n- - **IPPROTO_IPV6:** IPv6套接口\n- - **IPPROTO_TCP:** TCP套接口\n- **optname(选项名):** 选项名称\n- **optval(选项值):** 是一个指向变量的指针 类型：整形，套接口结构， 其他结构类型:linger{}, timeval{ }\n该值有两种类型，分别是布尔型选项，允许或禁止一种特性；另一种是整形或结构选项。\n允许一个布尔型选项，则将optval指向非零整形数；\n禁止一个选项optval指向一个等于零的整形数。对于布尔型选项，optlen应等于sizeof(int)；\n对其他选项，optval指向包含所需选项的整形数或结构，而optlen则为整形数或结构的长度。\n- **optlen(选项长度):** optval 的大小\n\n\n## 二、Socket 端口复用(SO_REUSEADDR)\n\n> 一个网络应用程序只能绑定一个端口( 一个套接字只能绑定一个端口 )。\n\n1. *端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。*\n2. *端口复用真正的用处主要在于服务器编程：当服务器需要重启时，经常会碰到端口尚未完全关闭的情况，这时如果不设置端口复用，则无法完成绑定，因为端口还处于被别的套接口绑定的状态之中。*\n\n### 使用场景\n>**SO_REUSEADDR可以用在以下四种情况下。 (摘自《Unix网络编程》卷一，即UNPv1)**\n\n1. 当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你启动的程序的socket2要占用该地址和端口，你的程序就要用到该选项。\n2. SO_REUSEADDR允许同一port上启动同一服务器的多个实例(多个进程)。但每个实例绑定的IP地址是不能相同的。在有多块网卡或用IP Alias技术的机器可以测试这种情况。\n3. SO_REUSEADDR允许单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。这和2很相似，区别请看UNPv1。\n4. SO_REUSEADDR允许完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。\n\n### 实现方法\n\n```\nint opt = 1;\n// sockfd为需要端口复用的套接字\nsetsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&opt, sizeof(opt));\n```\n\n## 三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)\n**SO_SNDTIMO :** 用于设置发送和连接超时\n**SO_RCVTIMEO:** 用于设置接收超时\n**例 子**\n```\n//3s超时设置\nstruct timeval timeout = {3, 0};\n//socket设置发送超时\nsetsockopt(socket，SOL_SOCKET,SO_SNDTIMEO，(char *)&timeout,sizeof(struct timeval));\n\n//socket设置接收超时\nsetsockopt(socket，SOL_SOCKET,SO_RCVTIMEO，(char *)&timeout,sizeof(struct timeval));\n\n//socket设置连接超时\nsetsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &timeo, len);\naddr.sin_family = AF_INET;\naddr.sin_addr.s_addr = inet_addr(argv[1]);\naddr.sin_port = htons(atoi(argv[2]));\nif (connect(fd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n    if (errno == EINPROGRESS) {\n            fprintf(stderr, \"timeout/n\");\n            return -1;\n    }\n    perror(\"connect\");\n    return 0;\n}\n```\n## 四、Socket 心跳设置(SO_KEEPALIVE)\n>在《UNIX网络编程第1卷》中也有详细的阐述：\nSO_KEEPALIVE 保持连接检测对方主机是否崩溃，避免（服务器）永远阻塞于TCP连接的输入。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP就自 动给对方 发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：对方接收一切正常：以期望的ACK响应。2小时后，TCP将发出另一个探测分 节。对方已崩溃且已重新启动：以RST响应。套接口的待处理错误被置为ECONNRESET，套接 口本身则被关闭。对方无任何响应：源自berkeley的TCP发送另外8个探测分节，相隔75秒一个，试图得到一个响应。在发出第一个探测分节11分钟 15秒后若仍无响应就放弃。套接口的待处理错误被置为ETIMEOUT，套接口本身则被关闭。如ICMP错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 EHOSTUNREACH。\n\n**简单来说**\n*TCP_KEEPALIVE*选项只是一个开关，Linux中默认的Keepalive的选项如下：\n```\n$sudo sysctl -a | grep keepalive\nnet.ipv4.tcp_keepalive_time = 7200\nnet.ipv4.tcp_keepalive_probes = 9\nnet.ipv4.tcp_keepalive_intvl = 75\n```\n\n上文中的keepalive选项表示如果一个连接上7200s后没有任何数据发送，则设置了这个选项的本端向对端发送keepalive保活报文，它会有如下三种结果：\n- 对端回复ACK。则本端TCP认为该连接依然存活。继续等7200s后再发送keepalive报文。\n- 对端回复RESET。说明对端进程已经重启，本端的应用程序应该关闭该连接。\n- 没有对端的任何回复。则本端做重试，如果重试9次（前后重试间隔为75秒）仍然不可达，则向应用程序返回错误信息，ETIMEOUT（无任何应答）或EHOST\n\n### 开启keepalive机制\n```\nkeepAlive = 1;\nSetsockopt(listenfd, SOL_SOCKET, SO_KEEPALIVE, (void*)&keepAlive, sizeof(keepAlive));\n```\n### 修改过keepalive 时间\n如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，\n一种是修改内核关于网络方面的 配置参数；\n另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。\n- TCP_KEEPIDLE : 多长时间不活跃，就开始发探测包\n- TCP_KEEPINTVL: 两个探测包之间的间隔\n- TCP_KEEPCNT  : 发多少次探测包后没响应认为是断开\n**例子**\n```\n//连接上之后100s内没发送数据，则发探测包，每个探测包间隔10s,连续10次没收到响应认为断开\nint                 keepIdle = 100;\nint                 keepInterval = 10;\nint                 keepCount = 10;\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPIDLE, (void *)&keepIdle, sizeof(keepIdle));\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPINTVL, (void *)&keepInterval, sizeof(keepInterval));\nSetsockopt(listenfd, SOL_TCP, TCP_KEEPCNT, (void *)&keepCount, sizeof(keepCount));\n```\n\n\n## 五、Socket 其他选项名\n- SO_RCVBUF             : int型  设置接收缓冲区的保留大小。\n- SO_SNDBUF             : int型  设置发送缓冲区的保留大小。\n- TCP_NODELAY           : bool型 设置是否开启Nagle算法。\n- SO_EXCLUSIVEADDRUSE   : bool型 同一个端口不能别的进程使用.\n\n\n## 六、常识\n\n- 每个套接口都有一个发送缓冲区和一个接收缓冲区。\n- 接收缓冲区被TCP和UDP用来将接收到的数据一直保存到由应用进程来读。\n- TCP：TCP通告另一端的窗口大小。\n- TCP套接口接收缓冲区不可能溢出，因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过宙口大小的数据，则接 收方TCP将丢弃它。\n- UDP：当接收到的数据报装不进套接口接收缓冲区时，此数据报就被丢弃。UDP是没有 流量控制的；快的发送者可以很容易地就淹没慢的接收者，导致接收方的UDP丢弃数据报。\n\n每个套接口都有一个接收低潮限度和一个发送低潮限度。\n它们是函数selectt使用的，接收低潮限度是让select返回“可读”而在套接口接收缓冲区中必须有的数据总量。 对于一个TCP或UDP套接口，此值缺省为1。发送低潮限度是让select返回“可写” 而在套接口发送缓冲区中必须有的可用空间。对于TCP套接口，此值常缺省为2048。 对于UDP使用低潮限度， 由于其发送缓冲区中可用空间的字节数是从不变化的，只要 UDP套接口发送缓冲区大小大于套接口的低潮限度，这样的UDP套接口就总是可写的。 UDP没有发送缓冲区，只有发送缓冲区的大小。\n","slug":"Linux之Socket关键","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7a0007tns17x44tru5","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"一、Socket-属性设置函数\"><a href=\"#一、Socket-属性设置函数\" class=\"headerlink\" title=\"一、Socket 属性设置函数\"></a>一、Socket 属性设置函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int getsockopt(int sockfd, int level, int optname,void *optval, socklen_t *optlen);</div><div class=\"line\">int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</div></pre></td></tr></table></figure>\n<p>解释:<strong>setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen)</strong><br><a id=\"more\"></a></p>\n<ul>\n<li><strong>sockfd(套接字):</strong> 指向一个打开的套接口描述字</li>\n<li><strong>level(级别):</strong> 指定选项代码的类型</li>\n<li><ul>\n<li><strong>SOL_SOCKET:</strong> 基本套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_IP:</strong> IPv4套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_IPV6:</strong> IPv6套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_TCP:</strong> TCP套接口</li>\n</ul>\n</li>\n<li><strong>optname(选项名):</strong> 选项名称</li>\n<li><strong>optval(选项值):</strong> 是一个指向变量的指针 类型：整形，套接口结构， 其他结构类型:linger{}, timeval{ }<br>该值有两种类型，分别是布尔型选项，允许或禁止一种特性；另一种是整形或结构选项。<br>允许一个布尔型选项，则将optval指向非零整形数；<br>禁止一个选项optval指向一个等于零的整形数。对于布尔型选项，optlen应等于sizeof(int)；<br>对其他选项，optval指向包含所需选项的整形数或结构，而optlen则为整形数或结构的长度。</li>\n<li><strong>optlen(选项长度):</strong> optval 的大小</li>\n</ul>\n<h2 id=\"二、Socket-端口复用-SO-REUSEADDR\"><a href=\"#二、Socket-端口复用-SO-REUSEADDR\" class=\"headerlink\" title=\"二、Socket 端口复用(SO_REUSEADDR)\"></a>二、Socket 端口复用(SO_REUSEADDR)</h2><blockquote>\n<p>一个网络应用程序只能绑定一个端口( 一个套接字只能绑定一个端口 )。</p>\n</blockquote>\n<ol>\n<li><em>端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。</em></li>\n<li><em>端口复用真正的用处主要在于服务器编程：当服务器需要重启时，经常会碰到端口尚未完全关闭的情况，这时如果不设置端口复用，则无法完成绑定，因为端口还处于被别的套接口绑定的状态之中。</em></li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><blockquote>\n<p><strong>SO_REUSEADDR可以用在以下四种情况下。 (摘自《Unix网络编程》卷一，即UNPv1)</strong></p>\n</blockquote>\n<ol>\n<li>当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你启动的程序的socket2要占用该地址和端口，你的程序就要用到该选项。</li>\n<li>SO_REUSEADDR允许同一port上启动同一服务器的多个实例(多个进程)。但每个实例绑定的IP地址是不能相同的。在有多块网卡或用IP Alias技术的机器可以测试这种情况。</li>\n<li>SO_REUSEADDR允许单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。这和2很相似，区别请看UNPv1。</li>\n<li>SO_REUSEADDR允许完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。</li>\n</ol>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">int opt = 1;</div><div class=\"line\">// sockfd为需要端口复用的套接字</div><div class=\"line\">setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&amp;opt, sizeof(opt));</div></pre></td></tr></table></figure>\n<h2 id=\"三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO\"><a href=\"#三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO\" class=\"headerlink\" title=\"三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)\"></a>三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)</h2><p><strong>SO_SNDTIMO :</strong> 用于设置发送和连接超时<br><strong>SO_RCVTIMEO:</strong> 用于设置接收超时<br><strong>例 子</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//3s超时设置</div><div class=\"line\">struct timeval timeout = &#123;3, 0&#125;;</div><div class=\"line\">//socket设置发送超时</div><div class=\"line\">setsockopt(socket，SOL_SOCKET,SO_SNDTIMEO，(char *)&amp;timeout,sizeof(struct timeval));</div><div class=\"line\"></div><div class=\"line\">//socket设置接收超时</div><div class=\"line\">setsockopt(socket，SOL_SOCKET,SO_RCVTIMEO，(char *)&amp;timeout,sizeof(struct timeval));</div><div class=\"line\"></div><div class=\"line\">//socket设置连接超时</div><div class=\"line\">setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeo, len);</div><div class=\"line\">addr.sin_family = AF_INET;</div><div class=\"line\">addr.sin_addr.s_addr = inet_addr(argv[1]);</div><div class=\"line\">addr.sin_port = htons(atoi(argv[2]));</div><div class=\"line\">if (connect(fd, (struct sockaddr*)&amp;addr, sizeof(addr)) == -1) &#123;</div><div class=\"line\">    if (errno == EINPROGRESS) &#123;</div><div class=\"line\">            fprintf(stderr, &quot;timeout/n&quot;);</div><div class=\"line\">            return -1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    perror(&quot;connect&quot;);</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、Socket-心跳设置-SO-KEEPALIVE\"><a href=\"#四、Socket-心跳设置-SO-KEEPALIVE\" class=\"headerlink\" title=\"四、Socket 心跳设置(SO_KEEPALIVE)\"></a>四、Socket 心跳设置(SO_KEEPALIVE)</h2><blockquote>\n<p>在《UNIX网络编程第1卷》中也有详细的阐述：<br>SO_KEEPALIVE 保持连接检测对方主机是否崩溃，避免（服务器）永远阻塞于TCP连接的输入。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP就自 动给对方 发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：对方接收一切正常：以期望的ACK响应。2小时后，TCP将发出另一个探测分 节。对方已崩溃且已重新启动：以RST响应。套接口的待处理错误被置为ECONNRESET，套接 口本身则被关闭。对方无任何响应：源自berkeley的TCP发送另外8个探测分节，相隔75秒一个，试图得到一个响应。在发出第一个探测分节11分钟 15秒后若仍无响应就放弃。套接口的待处理错误被置为ETIMEOUT，套接口本身则被关闭。如ICMP错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 EHOSTUNREACH。</p>\n</blockquote>\n<p><strong>简单来说</strong><br><em>TCP_KEEPALIVE</em>选项只是一个开关，Linux中默认的Keepalive的选项如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo sysctl -a | grep keepalive</div><div class=\"line\">net.ipv4.tcp_keepalive_time = 7200</div><div class=\"line\">net.ipv4.tcp_keepalive_probes = 9</div><div class=\"line\">net.ipv4.tcp_keepalive_intvl = 75</div></pre></td></tr></table></figure></p>\n<p>上文中的keepalive选项表示如果一个连接上7200s后没有任何数据发送，则设置了这个选项的本端向对端发送keepalive保活报文，它会有如下三种结果：</p>\n<ul>\n<li>对端回复ACK。则本端TCP认为该连接依然存活。继续等7200s后再发送keepalive报文。</li>\n<li>对端回复RESET。说明对端进程已经重启，本端的应用程序应该关闭该连接。</li>\n<li>没有对端的任何回复。则本端做重试，如果重试9次（前后重试间隔为75秒）仍然不可达，则向应用程序返回错误信息，ETIMEOUT（无任何应答）或EHOST</li>\n</ul>\n<h3 id=\"开启keepalive机制\"><a href=\"#开启keepalive机制\" class=\"headerlink\" title=\"开启keepalive机制\"></a>开启keepalive机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">keepAlive = 1;</div><div class=\"line\">Setsockopt(listenfd, SOL_SOCKET, SO_KEEPALIVE, (void*)&amp;keepAlive, sizeof(keepAlive));</div></pre></td></tr></table></figure>\n<h3 id=\"修改过keepalive-时间\"><a href=\"#修改过keepalive-时间\" class=\"headerlink\" title=\"修改过keepalive 时间\"></a>修改过keepalive 时间</h3><p>如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，<br>一种是修改内核关于网络方面的 配置参数；<br>另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。</p>\n<ul>\n<li>TCP_KEEPIDLE : 多长时间不活跃，就开始发探测包</li>\n<li>TCP_KEEPINTVL: 两个探测包之间的间隔</li>\n<li>TCP_KEEPCNT  : 发多少次探测包后没响应认为是断开<br><strong>例子</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//连接上之后100s内没发送数据，则发探测包，每个探测包间隔10s,连续10次没收到响应认为断开</div><div class=\"line\">int                 keepIdle = 100;</div><div class=\"line\">int                 keepInterval = 10;</div><div class=\"line\">int                 keepCount = 10;</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPIDLE, (void *)&amp;keepIdle, sizeof(keepIdle));</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPINTVL, (void *)&amp;keepInterval, sizeof(keepInterval));</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPCNT, (void *)&amp;keepCount, sizeof(keepCount));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"五、Socket-其他选项名\"><a href=\"#五、Socket-其他选项名\" class=\"headerlink\" title=\"五、Socket 其他选项名\"></a>五、Socket 其他选项名</h2><ul>\n<li>SO_RCVBUF             : int型  设置接收缓冲区的保留大小。</li>\n<li>SO_SNDBUF             : int型  设置发送缓冲区的保留大小。</li>\n<li>TCP_NODELAY           : bool型 设置是否开启Nagle算法。</li>\n<li>SO_EXCLUSIVEADDRUSE   : bool型 同一个端口不能别的进程使用.</li>\n</ul>\n<h2 id=\"六、常识\"><a href=\"#六、常识\" class=\"headerlink\" title=\"六、常识\"></a>六、常识</h2><ul>\n<li>每个套接口都有一个发送缓冲区和一个接收缓冲区。</li>\n<li>接收缓冲区被TCP和UDP用来将接收到的数据一直保存到由应用进程来读。</li>\n<li>TCP：TCP通告另一端的窗口大小。</li>\n<li>TCP套接口接收缓冲区不可能溢出，因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过宙口大小的数据，则接 收方TCP将丢弃它。</li>\n<li>UDP：当接收到的数据报装不进套接口接收缓冲区时，此数据报就被丢弃。UDP是没有 流量控制的；快的发送者可以很容易地就淹没慢的接收者，导致接收方的UDP丢弃数据报。</li>\n</ul>\n<p>每个套接口都有一个接收低潮限度和一个发送低潮限度。<br>它们是函数selectt使用的，接收低潮限度是让select返回“可读”而在套接口接收缓冲区中必须有的数据总量。 对于一个TCP或UDP套接口，此值缺省为1。发送低潮限度是让select返回“可写” 而在套接口发送缓冲区中必须有的可用空间。对于TCP套接口，此值常缺省为2048。 对于UDP使用低潮限度， 由于其发送缓冲区中可用空间的字节数是从不变化的，只要 UDP套接口发送缓冲区大小大于套接口的低潮限度，这样的UDP套接口就总是可写的。 UDP没有发送缓冲区，只有发送缓冲区的大小。</p>\n","excerpt":"<h2 id=\"一、Socket-属性设置函数\"><a href=\"#一、Socket-属性设置函数\" class=\"headerlink\" title=\"一、Socket 属性设置函数\"></a>一、Socket 属性设置函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int getsockopt(int sockfd, int level, int optname,void *optval, socklen_t *optlen);</div><div class=\"line\">int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</div></pre></td></tr></table></figure>\n<p>解释:<strong>setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen)</strong><br>","more":"</p>\n<ul>\n<li><strong>sockfd(套接字):</strong> 指向一个打开的套接口描述字</li>\n<li><strong>level(级别):</strong> 指定选项代码的类型</li>\n<li><ul>\n<li><strong>SOL_SOCKET:</strong> 基本套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_IP:</strong> IPv4套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_IPV6:</strong> IPv6套接口</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>IPPROTO_TCP:</strong> TCP套接口</li>\n</ul>\n</li>\n<li><strong>optname(选项名):</strong> 选项名称</li>\n<li><strong>optval(选项值):</strong> 是一个指向变量的指针 类型：整形，套接口结构， 其他结构类型:linger{}, timeval{ }<br>该值有两种类型，分别是布尔型选项，允许或禁止一种特性；另一种是整形或结构选项。<br>允许一个布尔型选项，则将optval指向非零整形数；<br>禁止一个选项optval指向一个等于零的整形数。对于布尔型选项，optlen应等于sizeof(int)；<br>对其他选项，optval指向包含所需选项的整形数或结构，而optlen则为整形数或结构的长度。</li>\n<li><strong>optlen(选项长度):</strong> optval 的大小</li>\n</ul>\n<h2 id=\"二、Socket-端口复用-SO-REUSEADDR\"><a href=\"#二、Socket-端口复用-SO-REUSEADDR\" class=\"headerlink\" title=\"二、Socket 端口复用(SO_REUSEADDR)\"></a>二、Socket 端口复用(SO_REUSEADDR)</h2><blockquote>\n<p>一个网络应用程序只能绑定一个端口( 一个套接字只能绑定一个端口 )。</p>\n</blockquote>\n<ol>\n<li><em>端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。</em></li>\n<li><em>端口复用真正的用处主要在于服务器编程：当服务器需要重启时，经常会碰到端口尚未完全关闭的情况，这时如果不设置端口复用，则无法完成绑定，因为端口还处于被别的套接口绑定的状态之中。</em></li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><blockquote>\n<p><strong>SO_REUSEADDR可以用在以下四种情况下。 (摘自《Unix网络编程》卷一，即UNPv1)</strong></p>\n</blockquote>\n<ol>\n<li>当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你启动的程序的socket2要占用该地址和端口，你的程序就要用到该选项。</li>\n<li>SO_REUSEADDR允许同一port上启动同一服务器的多个实例(多个进程)。但每个实例绑定的IP地址是不能相同的。在有多块网卡或用IP Alias技术的机器可以测试这种情况。</li>\n<li>SO_REUSEADDR允许单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。这和2很相似，区别请看UNPv1。</li>\n<li>SO_REUSEADDR允许完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。</li>\n</ol>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">int opt = 1;</div><div class=\"line\">// sockfd为需要端口复用的套接字</div><div class=\"line\">setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&amp;opt, sizeof(opt));</div></pre></td></tr></table></figure>\n<h2 id=\"三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO\"><a href=\"#三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO\" class=\"headerlink\" title=\"三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)\"></a>三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)</h2><p><strong>SO_SNDTIMO :</strong> 用于设置发送和连接超时<br><strong>SO_RCVTIMEO:</strong> 用于设置接收超时<br><strong>例 子</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//3s超时设置</div><div class=\"line\">struct timeval timeout = &#123;3, 0&#125;;</div><div class=\"line\">//socket设置发送超时</div><div class=\"line\">setsockopt(socket，SOL_SOCKET,SO_SNDTIMEO，(char *)&amp;timeout,sizeof(struct timeval));</div><div class=\"line\"></div><div class=\"line\">//socket设置接收超时</div><div class=\"line\">setsockopt(socket，SOL_SOCKET,SO_RCVTIMEO，(char *)&amp;timeout,sizeof(struct timeval));</div><div class=\"line\"></div><div class=\"line\">//socket设置连接超时</div><div class=\"line\">setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeo, len);</div><div class=\"line\">addr.sin_family = AF_INET;</div><div class=\"line\">addr.sin_addr.s_addr = inet_addr(argv[1]);</div><div class=\"line\">addr.sin_port = htons(atoi(argv[2]));</div><div class=\"line\">if (connect(fd, (struct sockaddr*)&amp;addr, sizeof(addr)) == -1) &#123;</div><div class=\"line\">    if (errno == EINPROGRESS) &#123;</div><div class=\"line\">            fprintf(stderr, &quot;timeout/n&quot;);</div><div class=\"line\">            return -1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    perror(&quot;connect&quot;);</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、Socket-心跳设置-SO-KEEPALIVE\"><a href=\"#四、Socket-心跳设置-SO-KEEPALIVE\" class=\"headerlink\" title=\"四、Socket 心跳设置(SO_KEEPALIVE)\"></a>四、Socket 心跳设置(SO_KEEPALIVE)</h2><blockquote>\n<p>在《UNIX网络编程第1卷》中也有详细的阐述：<br>SO_KEEPALIVE 保持连接检测对方主机是否崩溃，避免（服务器）永远阻塞于TCP连接的输入。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP就自 动给对方 发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：对方接收一切正常：以期望的ACK响应。2小时后，TCP将发出另一个探测分 节。对方已崩溃且已重新启动：以RST响应。套接口的待处理错误被置为ECONNRESET，套接 口本身则被关闭。对方无任何响应：源自berkeley的TCP发送另外8个探测分节，相隔75秒一个，试图得到一个响应。在发出第一个探测分节11分钟 15秒后若仍无响应就放弃。套接口的待处理错误被置为ETIMEOUT，套接口本身则被关闭。如ICMP错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 EHOSTUNREACH。</p>\n</blockquote>\n<p><strong>简单来说</strong><br><em>TCP_KEEPALIVE</em>选项只是一个开关，Linux中默认的Keepalive的选项如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo sysctl -a | grep keepalive</div><div class=\"line\">net.ipv4.tcp_keepalive_time = 7200</div><div class=\"line\">net.ipv4.tcp_keepalive_probes = 9</div><div class=\"line\">net.ipv4.tcp_keepalive_intvl = 75</div></pre></td></tr></table></figure></p>\n<p>上文中的keepalive选项表示如果一个连接上7200s后没有任何数据发送，则设置了这个选项的本端向对端发送keepalive保活报文，它会有如下三种结果：</p>\n<ul>\n<li>对端回复ACK。则本端TCP认为该连接依然存活。继续等7200s后再发送keepalive报文。</li>\n<li>对端回复RESET。说明对端进程已经重启，本端的应用程序应该关闭该连接。</li>\n<li>没有对端的任何回复。则本端做重试，如果重试9次（前后重试间隔为75秒）仍然不可达，则向应用程序返回错误信息，ETIMEOUT（无任何应答）或EHOST</li>\n</ul>\n<h3 id=\"开启keepalive机制\"><a href=\"#开启keepalive机制\" class=\"headerlink\" title=\"开启keepalive机制\"></a>开启keepalive机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">keepAlive = 1;</div><div class=\"line\">Setsockopt(listenfd, SOL_SOCKET, SO_KEEPALIVE, (void*)&amp;keepAlive, sizeof(keepAlive));</div></pre></td></tr></table></figure>\n<h3 id=\"修改过keepalive-时间\"><a href=\"#修改过keepalive-时间\" class=\"headerlink\" title=\"修改过keepalive 时间\"></a>修改过keepalive 时间</h3><p>如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，<br>一种是修改内核关于网络方面的 配置参数；<br>另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。</p>\n<ul>\n<li>TCP_KEEPIDLE : 多长时间不活跃，就开始发探测包</li>\n<li>TCP_KEEPINTVL: 两个探测包之间的间隔</li>\n<li>TCP_KEEPCNT  : 发多少次探测包后没响应认为是断开<br><strong>例子</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//连接上之后100s内没发送数据，则发探测包，每个探测包间隔10s,连续10次没收到响应认为断开</div><div class=\"line\">int                 keepIdle = 100;</div><div class=\"line\">int                 keepInterval = 10;</div><div class=\"line\">int                 keepCount = 10;</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPIDLE, (void *)&amp;keepIdle, sizeof(keepIdle));</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPINTVL, (void *)&amp;keepInterval, sizeof(keepInterval));</div><div class=\"line\">Setsockopt(listenfd, SOL_TCP, TCP_KEEPCNT, (void *)&amp;keepCount, sizeof(keepCount));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"五、Socket-其他选项名\"><a href=\"#五、Socket-其他选项名\" class=\"headerlink\" title=\"五、Socket 其他选项名\"></a>五、Socket 其他选项名</h2><ul>\n<li>SO_RCVBUF             : int型  设置接收缓冲区的保留大小。</li>\n<li>SO_SNDBUF             : int型  设置发送缓冲区的保留大小。</li>\n<li>TCP_NODELAY           : bool型 设置是否开启Nagle算法。</li>\n<li>SO_EXCLUSIVEADDRUSE   : bool型 同一个端口不能别的进程使用.</li>\n</ul>\n<h2 id=\"六、常识\"><a href=\"#六、常识\" class=\"headerlink\" title=\"六、常识\"></a>六、常识</h2><ul>\n<li>每个套接口都有一个发送缓冲区和一个接收缓冲区。</li>\n<li>接收缓冲区被TCP和UDP用来将接收到的数据一直保存到由应用进程来读。</li>\n<li>TCP：TCP通告另一端的窗口大小。</li>\n<li>TCP套接口接收缓冲区不可能溢出，因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过宙口大小的数据，则接 收方TCP将丢弃它。</li>\n<li>UDP：当接收到的数据报装不进套接口接收缓冲区时，此数据报就被丢弃。UDP是没有 流量控制的；快的发送者可以很容易地就淹没慢的接收者，导致接收方的UDP丢弃数据报。</li>\n</ul>\n<p>每个套接口都有一个接收低潮限度和一个发送低潮限度。<br>它们是函数selectt使用的，接收低潮限度是让select返回“可读”而在套接口接收缓冲区中必须有的数据总量。 对于一个TCP或UDP套接口，此值缺省为1。发送低潮限度是让select返回“可写” 而在套接口发送缓冲区中必须有的可用空间。对于TCP套接口，此值常缺省为2048。 对于UDP使用低潮限度， 由于其发送缓冲区中可用空间的字节数是从不变化的，只要 UDP套接口发送缓冲区大小大于套接口的低潮限度，这样的UDP套接口就总是可写的。 UDP没有发送缓冲区，只有发送缓冲区的大小。</p>"},{"title":"Linux之errno表","date":"2017-06-06T16:33:11.000Z","_content":"\n# errno 错误表\n\n>errno 是记录系统的最后一次[错误代码](http://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81)。代码是一个int型的值，在errno.h中定义\n\n**注意：**只有当一个[库函数](http://baike.baidu.com/item/%E5%BA%93%E5%87%BD%E6%95%B0)失败时，errno才会被设置。当函数成功运行时，errno的值不会被修改。这意味着我们不能通过测试errno的值来判断是否有错误存在。反之，只有当被调用的函数提示有错误发生时检查errno的值才有意义。\n\n<!--more-->\n## 错误表\n\n|错误数| 描述|\n|:---:|---|\n|errno0 |     Success\n|errno1|      Operation not permitted\n|errno2|      No such file or directory\n|errno3|      No such process\n|errno4 |     Interrupted system call\n|errno5 |     Input/output error\n|errno6 |     No such device or address\n|errno7 |     Argument list too long\n|errno8 |     Exec format error\n|errno9 |     Bad file descriptor\n|errno10 |    No child processe\n|errno11 |    Resource temporarily unavailable\n|errno12 |    Cannot allocate memory\n|errno13|     Permission denied\n|errno14 |    Bad address\n|errno15 |    Block device required\n|errno16|     Device or resource busy\n|errno17 |    File exists\n|errno18|     Invalid cross-device link\n|errno19|     No such device\n|errno20 |    Not a directory\n|errno21 |    Is a directory\n|errno22|     Invalid argument\n|errno23 |    Too many open files in system\n|errno24 |    Too many open files\n|errno25 |    Inappropriate ioctl for device\n|errno26 |    Text file busy\n|errno27|     File too large\n|errno28|     No space left on device\n|errno29 |    Illegal seek\n|errno30 |    Read-only file system\n|errno31|     Too many links\n|errno32|     Broken pipe\n|errno33|     Numerical argument out of domain\n|errno34 |    Numerical result out of range\n|errno35|     Resource deadlock avoided\n|errno36|     File name too long\n|errno37|     No locks available\n|errno38 |    Function not implemented\n|errno39 |    Directory not empty\n|errno40|     Too many levels of symbolic links\n|errno41|     Unknown error 41\n|errno42|     No message of desired type\n|errno43|     Identifier removed\n|errno44 |    Channel number out of range\n|errno45 |    Level 2 not synchronized\n|errno46 |    Level 3 halted\n|errno47|     Level 3 reset\n|errno48 |    Link number out of range\n|errno49|     Protocol driver not attached\n|errno50 |    No CSI structure available\n|errno51|     Level 2 halted\n|errno52|    Invalid exchange\n|errno53|     Invalid request descriptor\n|errno54|     Exchange full\n|errno55 |    No anode\n|errno56 |    Invalid request code\n|errno57 |    Invalid slot\n|errno58 |    Unknown error 58\n|errno59 |    Bad font file format\n|errno60 |    Device not a stream\n|errno61 |    No data available\n|errno62 |    Timer expired\n|errno63|     Out of streams resources\n|errno64 |    Machine is not on the network\n|errno65 |    Package not installed\n|errno66|     Object is remote\n|errno67 |    Link has been severed\n|errno68|     Advertise error\n|errno69 |    Srmount error\n|errno70 |    Communication error on send\n|errno71|     Protocol error\n|errno72|     Multihop attempted\n|errno73|     RFS specific error\n|errno74|     Bad message\n|errno75|     Value too large for defined datatype\n|errno76|     Name not unique on network\n|errno77|     File descriptor in bad state\n|errno78|     Remote address changed\n|errno79 |    Can not access a needed sharedlibrary\n|errno80 |    Accessing a corrupted sharedlibrary\n|errno81|     .lib section in a.out corrupted\n|errno82|     Attempting to link in too manyshared libraries\n|errno83|     Cannot exec a shared librarydirectly\n|errno84 |    Invalid or incomplete multibyte orwide character\n|errno85 |    Interrupted system call should berestarted\n|errno86 |    Streams pipe error\n|errno87|     Too many users\n|errno88 |    Socket operation on non-socket\n|errno89|     Destinationaddress required\n|errno90 |    Message too long\n|errno91|     Protocol wrong type for socket\n|errno92|     Protocol not available\n|errno93 |    Protocol not supported\n|errno94|     Socket type not supported\n|errno95|     Operation not supported\n|errno96|     Protocol family not supported\n|errno97|     Address family not supported byprotocol\n|errno98 |    Address already in use\n|errno99|     Cannot assign requested address\n|errno100|    Network is down\n|errno101|    Network is unreachable\n|errno102|    Network dropped connection onreset\n|errno103|    Software caused connection abort\n|errno104|    Connection reset by peer\n|errno105|    No buffer space available\n|errno106|    Transport endpoint is alreadyconnected\n|errno107|    Transport endpoint is notconnected\n|errno108 |   Cannot send after transportendpoint shutdown\n|errno109|    Too many references: cannot splice\n|errno110|    Connection timed out\n|errno111|    Connection refused\n|errno112 |   Host is down\n|errno113 |   No route to host\n|errno114 |   Operation already in progress\n|errno115|    Operation now in progress\n|errno116 |   Stale NFS file handle\n|errno117 |   Structure needs cleaning\n|errno118|    Not a XENIX named type file\n|errno119|    No XENIX semaphores available\n|errno120 |   Is a named type file\n|errno121 |   Remote I/O error\n|errno122|    Disk quota exceeded\n|errno123|    No medium found\n|errno124|    Wrong medium type\n|errno125 |   Operation canceled\n|errno126 |   Required key not available\n|errno127|    Key has expired\n|errno128|    Key has been revoked\n|errno129|    Key was rejected by service\n|errno130|    Owner died\n|errno131 |   State not recoverable\n|errno132|    Operation not possible due toRF-kill\n|errno133 |   Unknown error 133\n|errno134 |   Unknown error 134\n|errno135|    Unknown error 135\n|errno136|    Unknown error 136\n|errno137|    Unknown error 137\n|errno138 |   Unknown error 138\n|errno139 |   Unknown error 139","source":"_posts/Linux之errno表.md","raw":"---\ntitle: Linux之errno表\ndate: 2017-06-07 00:33:11\ntags: [Linux,工具]\n---\n\n# errno 错误表\n\n>errno 是记录系统的最后一次[错误代码](http://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81)。代码是一个int型的值，在errno.h中定义\n\n**注意：**只有当一个[库函数](http://baike.baidu.com/item/%E5%BA%93%E5%87%BD%E6%95%B0)失败时，errno才会被设置。当函数成功运行时，errno的值不会被修改。这意味着我们不能通过测试errno的值来判断是否有错误存在。反之，只有当被调用的函数提示有错误发生时检查errno的值才有意义。\n\n<!--more-->\n## 错误表\n\n|错误数| 描述|\n|:---:|---|\n|errno0 |     Success\n|errno1|      Operation not permitted\n|errno2|      No such file or directory\n|errno3|      No such process\n|errno4 |     Interrupted system call\n|errno5 |     Input/output error\n|errno6 |     No such device or address\n|errno7 |     Argument list too long\n|errno8 |     Exec format error\n|errno9 |     Bad file descriptor\n|errno10 |    No child processe\n|errno11 |    Resource temporarily unavailable\n|errno12 |    Cannot allocate memory\n|errno13|     Permission denied\n|errno14 |    Bad address\n|errno15 |    Block device required\n|errno16|     Device or resource busy\n|errno17 |    File exists\n|errno18|     Invalid cross-device link\n|errno19|     No such device\n|errno20 |    Not a directory\n|errno21 |    Is a directory\n|errno22|     Invalid argument\n|errno23 |    Too many open files in system\n|errno24 |    Too many open files\n|errno25 |    Inappropriate ioctl for device\n|errno26 |    Text file busy\n|errno27|     File too large\n|errno28|     No space left on device\n|errno29 |    Illegal seek\n|errno30 |    Read-only file system\n|errno31|     Too many links\n|errno32|     Broken pipe\n|errno33|     Numerical argument out of domain\n|errno34 |    Numerical result out of range\n|errno35|     Resource deadlock avoided\n|errno36|     File name too long\n|errno37|     No locks available\n|errno38 |    Function not implemented\n|errno39 |    Directory not empty\n|errno40|     Too many levels of symbolic links\n|errno41|     Unknown error 41\n|errno42|     No message of desired type\n|errno43|     Identifier removed\n|errno44 |    Channel number out of range\n|errno45 |    Level 2 not synchronized\n|errno46 |    Level 3 halted\n|errno47|     Level 3 reset\n|errno48 |    Link number out of range\n|errno49|     Protocol driver not attached\n|errno50 |    No CSI structure available\n|errno51|     Level 2 halted\n|errno52|    Invalid exchange\n|errno53|     Invalid request descriptor\n|errno54|     Exchange full\n|errno55 |    No anode\n|errno56 |    Invalid request code\n|errno57 |    Invalid slot\n|errno58 |    Unknown error 58\n|errno59 |    Bad font file format\n|errno60 |    Device not a stream\n|errno61 |    No data available\n|errno62 |    Timer expired\n|errno63|     Out of streams resources\n|errno64 |    Machine is not on the network\n|errno65 |    Package not installed\n|errno66|     Object is remote\n|errno67 |    Link has been severed\n|errno68|     Advertise error\n|errno69 |    Srmount error\n|errno70 |    Communication error on send\n|errno71|     Protocol error\n|errno72|     Multihop attempted\n|errno73|     RFS specific error\n|errno74|     Bad message\n|errno75|     Value too large for defined datatype\n|errno76|     Name not unique on network\n|errno77|     File descriptor in bad state\n|errno78|     Remote address changed\n|errno79 |    Can not access a needed sharedlibrary\n|errno80 |    Accessing a corrupted sharedlibrary\n|errno81|     .lib section in a.out corrupted\n|errno82|     Attempting to link in too manyshared libraries\n|errno83|     Cannot exec a shared librarydirectly\n|errno84 |    Invalid or incomplete multibyte orwide character\n|errno85 |    Interrupted system call should berestarted\n|errno86 |    Streams pipe error\n|errno87|     Too many users\n|errno88 |    Socket operation on non-socket\n|errno89|     Destinationaddress required\n|errno90 |    Message too long\n|errno91|     Protocol wrong type for socket\n|errno92|     Protocol not available\n|errno93 |    Protocol not supported\n|errno94|     Socket type not supported\n|errno95|     Operation not supported\n|errno96|     Protocol family not supported\n|errno97|     Address family not supported byprotocol\n|errno98 |    Address already in use\n|errno99|     Cannot assign requested address\n|errno100|    Network is down\n|errno101|    Network is unreachable\n|errno102|    Network dropped connection onreset\n|errno103|    Software caused connection abort\n|errno104|    Connection reset by peer\n|errno105|    No buffer space available\n|errno106|    Transport endpoint is alreadyconnected\n|errno107|    Transport endpoint is notconnected\n|errno108 |   Cannot send after transportendpoint shutdown\n|errno109|    Too many references: cannot splice\n|errno110|    Connection timed out\n|errno111|    Connection refused\n|errno112 |   Host is down\n|errno113 |   No route to host\n|errno114 |   Operation already in progress\n|errno115|    Operation now in progress\n|errno116 |   Stale NFS file handle\n|errno117 |   Structure needs cleaning\n|errno118|    Not a XENIX named type file\n|errno119|    No XENIX semaphores available\n|errno120 |   Is a named type file\n|errno121 |   Remote I/O error\n|errno122|    Disk quota exceeded\n|errno123|    No medium found\n|errno124|    Wrong medium type\n|errno125 |   Operation canceled\n|errno126 |   Required key not available\n|errno127|    Key has expired\n|errno128|    Key has been revoked\n|errno129|    Key was rejected by service\n|errno130|    Owner died\n|errno131 |   State not recoverable\n|errno132|    Operation not possible due toRF-kill\n|errno133 |   Unknown error 133\n|errno134 |   Unknown error 134\n|errno135|    Unknown error 135\n|errno136|    Unknown error 136\n|errno137|    Unknown error 137\n|errno138 |   Unknown error 138\n|errno139 |   Unknown error 139","slug":"Linux之errno表","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7e0009tns1lhvd3kzw","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"errno-错误表\"><a href=\"#errno-错误表\" class=\"headerlink\" title=\"errno 错误表\"></a>errno 错误表</h1><blockquote>\n<p>errno 是记录系统的最后一次<a href=\"http://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81\" target=\"_blank\" rel=\"external\">错误代码</a>。代码是一个int型的值，在errno.h中定义</p>\n</blockquote>\n<p><strong>注意：</strong>只有当一个<a href=\"http://baike.baidu.com/item/%E5%BA%93%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"external\">库函数</a>失败时，errno才会被设置。当函数成功运行时，errno的值不会被修改。这意味着我们不能通过测试errno的值来判断是否有错误存在。反之，只有当被调用的函数提示有错误发生时检查errno的值才有意义。</p>\n<a id=\"more\"></a>\n<h2 id=\"错误表\"><a href=\"#错误表\" class=\"headerlink\" title=\"错误表\"></a>错误表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">错误数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">errno0</td>\n<td>Success</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno1</td>\n<td>Operation not permitted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno2</td>\n<td>No such file or directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno3</td>\n<td>No such process</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno4</td>\n<td>Interrupted system call</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno5</td>\n<td>Input/output error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno6</td>\n<td>No such device or address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno7</td>\n<td>Argument list too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno8</td>\n<td>Exec format error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno9</td>\n<td>Bad file descriptor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno10</td>\n<td>No child processe</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno11</td>\n<td>Resource temporarily unavailable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno12</td>\n<td>Cannot allocate memory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno13</td>\n<td>Permission denied</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno14</td>\n<td>Bad address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno15</td>\n<td>Block device required</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno16</td>\n<td>Device or resource busy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno17</td>\n<td>File exists</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno18</td>\n<td>Invalid cross-device link</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno19</td>\n<td>No such device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno20</td>\n<td>Not a directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno21</td>\n<td>Is a directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno22</td>\n<td>Invalid argument</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno23</td>\n<td>Too many open files in system</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno24</td>\n<td>Too many open files</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno25</td>\n<td>Inappropriate ioctl for device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno26</td>\n<td>Text file busy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno27</td>\n<td>File too large</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno28</td>\n<td>No space left on device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno29</td>\n<td>Illegal seek</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno30</td>\n<td>Read-only file system</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno31</td>\n<td>Too many links</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno32</td>\n<td>Broken pipe</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno33</td>\n<td>Numerical argument out of domain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno34</td>\n<td>Numerical result out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno35</td>\n<td>Resource deadlock avoided</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno36</td>\n<td>File name too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno37</td>\n<td>No locks available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno38</td>\n<td>Function not implemented</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno39</td>\n<td>Directory not empty</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno40</td>\n<td>Too many levels of symbolic links</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno41</td>\n<td>Unknown error 41</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno42</td>\n<td>No message of desired type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno43</td>\n<td>Identifier removed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno44</td>\n<td>Channel number out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno45</td>\n<td>Level 2 not synchronized</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno46</td>\n<td>Level 3 halted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno47</td>\n<td>Level 3 reset</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno48</td>\n<td>Link number out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno49</td>\n<td>Protocol driver not attached</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno50</td>\n<td>No CSI structure available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno51</td>\n<td>Level 2 halted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno52</td>\n<td>Invalid exchange</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno53</td>\n<td>Invalid request descriptor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno54</td>\n<td>Exchange full</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno55</td>\n<td>No anode</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno56</td>\n<td>Invalid request code</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno57</td>\n<td>Invalid slot</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno58</td>\n<td>Unknown error 58</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno59</td>\n<td>Bad font file format</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno60</td>\n<td>Device not a stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno61</td>\n<td>No data available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno62</td>\n<td>Timer expired</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno63</td>\n<td>Out of streams resources</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno64</td>\n<td>Machine is not on the network</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno65</td>\n<td>Package not installed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno66</td>\n<td>Object is remote</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno67</td>\n<td>Link has been severed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno68</td>\n<td>Advertise error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno69</td>\n<td>Srmount error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno70</td>\n<td>Communication error on send</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno71</td>\n<td>Protocol error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno72</td>\n<td>Multihop attempted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno73</td>\n<td>RFS specific error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno74</td>\n<td>Bad message</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno75</td>\n<td>Value too large for defined datatype</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno76</td>\n<td>Name not unique on network</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno77</td>\n<td>File descriptor in bad state</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno78</td>\n<td>Remote address changed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno79</td>\n<td>Can not access a needed sharedlibrary</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno80</td>\n<td>Accessing a corrupted sharedlibrary</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno81</td>\n<td>.lib section in a.out corrupted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno82</td>\n<td>Attempting to link in too manyshared libraries</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno83</td>\n<td>Cannot exec a shared librarydirectly</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno84</td>\n<td>Invalid or incomplete multibyte orwide character</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno85</td>\n<td>Interrupted system call should berestarted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno86</td>\n<td>Streams pipe error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno87</td>\n<td>Too many users</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno88</td>\n<td>Socket operation on non-socket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno89</td>\n<td>Destinationaddress required</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno90</td>\n<td>Message too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno91</td>\n<td>Protocol wrong type for socket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno92</td>\n<td>Protocol not available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno93</td>\n<td>Protocol not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno94</td>\n<td>Socket type not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno95</td>\n<td>Operation not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno96</td>\n<td>Protocol family not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno97</td>\n<td>Address family not supported byprotocol</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno98</td>\n<td>Address already in use</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno99</td>\n<td>Cannot assign requested address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno100</td>\n<td>Network is down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno101</td>\n<td>Network is unreachable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno102</td>\n<td>Network dropped connection onreset</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno103</td>\n<td>Software caused connection abort</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno104</td>\n<td>Connection reset by peer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno105</td>\n<td>No buffer space available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno106</td>\n<td>Transport endpoint is alreadyconnected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno107</td>\n<td>Transport endpoint is notconnected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno108</td>\n<td>Cannot send after transportendpoint shutdown</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno109</td>\n<td>Too many references: cannot splice</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno110</td>\n<td>Connection timed out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno111</td>\n<td>Connection refused</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno112</td>\n<td>Host is down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno113</td>\n<td>No route to host</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno114</td>\n<td>Operation already in progress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno115</td>\n<td>Operation now in progress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno116</td>\n<td>Stale NFS file handle</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno117</td>\n<td>Structure needs cleaning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno118</td>\n<td>Not a XENIX named type file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno119</td>\n<td>No XENIX semaphores available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno120</td>\n<td>Is a named type file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno121</td>\n<td>Remote I/O error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno122</td>\n<td>Disk quota exceeded</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno123</td>\n<td>No medium found</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno124</td>\n<td>Wrong medium type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno125</td>\n<td>Operation canceled</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno126</td>\n<td>Required key not available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno127</td>\n<td>Key has expired</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno128</td>\n<td>Key has been revoked</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno129</td>\n<td>Key was rejected by service</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno130</td>\n<td>Owner died</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno131</td>\n<td>State not recoverable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno132</td>\n<td>Operation not possible due toRF-kill</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno133</td>\n<td>Unknown error 133</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno134</td>\n<td>Unknown error 134</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno135</td>\n<td>Unknown error 135</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno136</td>\n<td>Unknown error 136</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno137</td>\n<td>Unknown error 137</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno138</td>\n<td>Unknown error 138</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno139</td>\n<td>Unknown error 139</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h1 id=\"errno-错误表\"><a href=\"#errno-错误表\" class=\"headerlink\" title=\"errno 错误表\"></a>errno 错误表</h1><blockquote>\n<p>errno 是记录系统的最后一次<a href=\"http://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81\">错误代码</a>。代码是一个int型的值，在errno.h中定义</p>\n</blockquote>\n<p><strong>注意：</strong>只有当一个<a href=\"http://baike.baidu.com/item/%E5%BA%93%E5%87%BD%E6%95%B0\">库函数</a>失败时，errno才会被设置。当函数成功运行时，errno的值不会被修改。这意味着我们不能通过测试errno的值来判断是否有错误存在。反之，只有当被调用的函数提示有错误发生时检查errno的值才有意义。</p>","more":"<h2 id=\"错误表\"><a href=\"#错误表\" class=\"headerlink\" title=\"错误表\"></a>错误表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">错误数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">errno0</td>\n<td>Success</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno1</td>\n<td>Operation not permitted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno2</td>\n<td>No such file or directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno3</td>\n<td>No such process</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno4</td>\n<td>Interrupted system call</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno5</td>\n<td>Input/output error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno6</td>\n<td>No such device or address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno7</td>\n<td>Argument list too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno8</td>\n<td>Exec format error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno9</td>\n<td>Bad file descriptor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno10</td>\n<td>No child processe</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno11</td>\n<td>Resource temporarily unavailable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno12</td>\n<td>Cannot allocate memory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno13</td>\n<td>Permission denied</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno14</td>\n<td>Bad address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno15</td>\n<td>Block device required</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno16</td>\n<td>Device or resource busy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno17</td>\n<td>File exists</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno18</td>\n<td>Invalid cross-device link</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno19</td>\n<td>No such device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno20</td>\n<td>Not a directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno21</td>\n<td>Is a directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno22</td>\n<td>Invalid argument</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno23</td>\n<td>Too many open files in system</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno24</td>\n<td>Too many open files</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno25</td>\n<td>Inappropriate ioctl for device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno26</td>\n<td>Text file busy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno27</td>\n<td>File too large</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno28</td>\n<td>No space left on device</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno29</td>\n<td>Illegal seek</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno30</td>\n<td>Read-only file system</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno31</td>\n<td>Too many links</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno32</td>\n<td>Broken pipe</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno33</td>\n<td>Numerical argument out of domain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno34</td>\n<td>Numerical result out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno35</td>\n<td>Resource deadlock avoided</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno36</td>\n<td>File name too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno37</td>\n<td>No locks available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno38</td>\n<td>Function not implemented</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno39</td>\n<td>Directory not empty</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno40</td>\n<td>Too many levels of symbolic links</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno41</td>\n<td>Unknown error 41</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno42</td>\n<td>No message of desired type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno43</td>\n<td>Identifier removed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno44</td>\n<td>Channel number out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno45</td>\n<td>Level 2 not synchronized</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno46</td>\n<td>Level 3 halted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno47</td>\n<td>Level 3 reset</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno48</td>\n<td>Link number out of range</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno49</td>\n<td>Protocol driver not attached</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno50</td>\n<td>No CSI structure available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno51</td>\n<td>Level 2 halted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno52</td>\n<td>Invalid exchange</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno53</td>\n<td>Invalid request descriptor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno54</td>\n<td>Exchange full</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno55</td>\n<td>No anode</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno56</td>\n<td>Invalid request code</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno57</td>\n<td>Invalid slot</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno58</td>\n<td>Unknown error 58</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno59</td>\n<td>Bad font file format</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno60</td>\n<td>Device not a stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno61</td>\n<td>No data available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno62</td>\n<td>Timer expired</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno63</td>\n<td>Out of streams resources</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno64</td>\n<td>Machine is not on the network</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno65</td>\n<td>Package not installed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno66</td>\n<td>Object is remote</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno67</td>\n<td>Link has been severed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno68</td>\n<td>Advertise error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno69</td>\n<td>Srmount error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno70</td>\n<td>Communication error on send</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno71</td>\n<td>Protocol error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno72</td>\n<td>Multihop attempted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno73</td>\n<td>RFS specific error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno74</td>\n<td>Bad message</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno75</td>\n<td>Value too large for defined datatype</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno76</td>\n<td>Name not unique on network</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno77</td>\n<td>File descriptor in bad state</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno78</td>\n<td>Remote address changed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno79</td>\n<td>Can not access a needed sharedlibrary</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno80</td>\n<td>Accessing a corrupted sharedlibrary</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno81</td>\n<td>.lib section in a.out corrupted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno82</td>\n<td>Attempting to link in too manyshared libraries</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno83</td>\n<td>Cannot exec a shared librarydirectly</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno84</td>\n<td>Invalid or incomplete multibyte orwide character</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno85</td>\n<td>Interrupted system call should berestarted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno86</td>\n<td>Streams pipe error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno87</td>\n<td>Too many users</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno88</td>\n<td>Socket operation on non-socket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno89</td>\n<td>Destinationaddress required</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno90</td>\n<td>Message too long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno91</td>\n<td>Protocol wrong type for socket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno92</td>\n<td>Protocol not available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno93</td>\n<td>Protocol not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno94</td>\n<td>Socket type not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno95</td>\n<td>Operation not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno96</td>\n<td>Protocol family not supported</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno97</td>\n<td>Address family not supported byprotocol</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno98</td>\n<td>Address already in use</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno99</td>\n<td>Cannot assign requested address</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno100</td>\n<td>Network is down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno101</td>\n<td>Network is unreachable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno102</td>\n<td>Network dropped connection onreset</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno103</td>\n<td>Software caused connection abort</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno104</td>\n<td>Connection reset by peer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno105</td>\n<td>No buffer space available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno106</td>\n<td>Transport endpoint is alreadyconnected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno107</td>\n<td>Transport endpoint is notconnected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno108</td>\n<td>Cannot send after transportendpoint shutdown</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno109</td>\n<td>Too many references: cannot splice</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno110</td>\n<td>Connection timed out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno111</td>\n<td>Connection refused</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno112</td>\n<td>Host is down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno113</td>\n<td>No route to host</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno114</td>\n<td>Operation already in progress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno115</td>\n<td>Operation now in progress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno116</td>\n<td>Stale NFS file handle</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno117</td>\n<td>Structure needs cleaning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno118</td>\n<td>Not a XENIX named type file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno119</td>\n<td>No XENIX semaphores available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno120</td>\n<td>Is a named type file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno121</td>\n<td>Remote I/O error</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno122</td>\n<td>Disk quota exceeded</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno123</td>\n<td>No medium found</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno124</td>\n<td>Wrong medium type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno125</td>\n<td>Operation canceled</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno126</td>\n<td>Required key not available</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno127</td>\n<td>Key has expired</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno128</td>\n<td>Key has been revoked</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno129</td>\n<td>Key was rejected by service</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno130</td>\n<td>Owner died</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno131</td>\n<td>State not recoverable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno132</td>\n<td>Operation not possible due toRF-kill</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno133</td>\n<td>Unknown error 133</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno134</td>\n<td>Unknown error 134</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno135</td>\n<td>Unknown error 135</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno136</td>\n<td>Unknown error 136</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno137</td>\n<td>Unknown error 137</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno138</td>\n<td>Unknown error 138</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errno139</td>\n<td>Unknown error 139</td>\n</tr>\n</tbody>\n</table>"},{"title":"Linux之实用技能","date":"2017-06-06T14:29:11.000Z","_content":"\n## 查看机器是多少位\n- - -\n### 方法一\n```\n>>>$ getconf LONG_BIT\n>>>$ 64\n```\n### 方法二\n```\n>>>$ uname -a\n>>>$ Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\n```\n\n<!--more-->\n\n### 方法三\n```\n>>>$ uname -p\n>>>$ x86_64\n```\n## 实用命令\n|命令|解释|\n|:---:|---|\n|wc |统计文本中行数、字数、字符数|\n|stat           |显示指定文件的详细信息，比ls更详细\n|who          |显示在线登陆用户\n|whoami    |显示当前操作用户\n|hostname |显示主机名\n|uname      |显示系统信息\n|top            |动态显示当前耗费资源最多进程信息\n|ps             |显示瞬间进程状态 ps -aux\n|du             |查看目录大小 du -h /home带有单位显示目录信息\n|df              |查看磁盘大小 df -h 带有单位显示磁盘信息\n\n## Linux 代码文件大小、行数、字节数统计\n\n### 命令解释\n***语法：wc [选项] 文件…***\n\n>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。\n\n该命令各选项含义如下：\n- \\- c 统计字节数。\n- \\- l 统计行数。\n- \\- w 统计字数。\n\n这些选项可以组合使用。\n\n输出列的顺序和数目不受选项的顺序和数目的影响。\n\n总是按下述顺序显示并且每项最多一列。\n\n行数、字数、字节数、文件名\n\n如果命令行中没有文件名，则输出中不出现文件名。\n\n### 例子\n#### 查看某个文件\n```shell\nAlex@alex:blog(master *)$wc -lcw package.json\n      24      44     618 package.json\n```\n#### 查看某目录下的所有文件(包括子目录)\n##### 查看blog 目录下命名后缀是html 文件所有的数量\n```shell\nAlex@alex:blog$find blog/ -name \"*.html\"|wc -l\n     199\n```\n#### 目录下所有md文件代码行数\n```\nfind blog/ -name \"*.md\" |xargs cat|wc -l\n```\n\n或\n```\n wc -l `find ./ -name \"*.md\"`|tail -n1\n```\n#### 统计当前目录下文件个数\n```\nls -l |grep \"^-\"|wc -l\n```\n#### 统计当前文件夹下目录的个数\n```\nls -l |grep \"^d\"|wc -l\n```\n#### 统计当前文件夹下文件的个数，包括子文件夹里的\n```\nls -lR|grep \"^-\"|wc -l\n```\n#### 统计文件夹下目录的个数，包括子文件夹里的\n```\nls -lR|grep \"^d\"|wc -l\n```\n\n\n## 性能分析工具 TOP命令\n>TOP命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况\n\n**命令格式：**\ntop [-] [d] [p] [q] [c] [C] [S]    [n]\n\n**查看某个用户下的所有进程**\n```\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -u alex\n\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n2763 alex      20   0 80420  16m  10m S   10  1.6   0:11.69 unity-panel-ser\n2865 alex      20   0 62216 4160 3268 S    6  0.4   0:05.54 hud-service\n2617 alex      20   0  4544 2144  632 S    4  0.2   0:05.30 dbus-daemon\n2646 alex      20   0  134m  12m 9884 S    2  1.2   0:09.35 metacity\n2667 alex      20   0  107m  22m  17m S    2  2.3   0:09.72 unity-2d-panel\n2679 alex      20   0 49608 8884 6936 S    2  0.9   0:02.26 bamfdaemon\n2681 alex      20   0  104m  13m  10m S    2  1.4   0:02.65 nm-apple\n```\n**查看单独某个进程**\n````\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ps -a\n  PID TTY          TIME CMD\n 9463 pts/1    00:00:00 gizwits\n 9471 pts/2    00:00:00 ps\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -p 9463\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n9463 alex      20   0 30424 1152  944 S    2  0.1   0:00.74 gizwits\n````\n**说明**\n\n|名称|解释|\n|:---:|---|\n|PID|进程的ID\n|USER|进程所有者\n|PR|进程的优先级别，越小越优先被执行\n|NInice|值\n|VIRT|进程占用的虚拟内存\n|RES|进程占用的物理内存\n|SHR|进程使用的共享内存\n|S|进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数\n|%CPU|进程占用CPU的使用率\n|%MEM|进程使用的物理内存和总内存的百分比\n|TIME+|该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。\n|COMMAND|进程启动命令名称\n\n## 运行日志输出到终端和保存起来\n- - -\n```\n# 运行targe 目标，且同时把日志输出到终端和保存到文件log.txt\n>>>$ ./targe | tee log.txt\n```","source":"_posts/Linux之实用技能 .md","raw":"---\ntitle: Linux之实用技能\ndate: 2017-06-06 22:29:11\ntags: [Linux,工具]\n---\n\n## 查看机器是多少位\n- - -\n### 方法一\n```\n>>>$ getconf LONG_BIT\n>>>$ 64\n```\n### 方法二\n```\n>>>$ uname -a\n>>>$ Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\n```\n\n<!--more-->\n\n### 方法三\n```\n>>>$ uname -p\n>>>$ x86_64\n```\n## 实用命令\n|命令|解释|\n|:---:|---|\n|wc |统计文本中行数、字数、字符数|\n|stat           |显示指定文件的详细信息，比ls更详细\n|who          |显示在线登陆用户\n|whoami    |显示当前操作用户\n|hostname |显示主机名\n|uname      |显示系统信息\n|top            |动态显示当前耗费资源最多进程信息\n|ps             |显示瞬间进程状态 ps -aux\n|du             |查看目录大小 du -h /home带有单位显示目录信息\n|df              |查看磁盘大小 df -h 带有单位显示磁盘信息\n\n## Linux 代码文件大小、行数、字节数统计\n\n### 命令解释\n***语法：wc [选项] 文件…***\n\n>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。\n\n该命令各选项含义如下：\n- \\- c 统计字节数。\n- \\- l 统计行数。\n- \\- w 统计字数。\n\n这些选项可以组合使用。\n\n输出列的顺序和数目不受选项的顺序和数目的影响。\n\n总是按下述顺序显示并且每项最多一列。\n\n行数、字数、字节数、文件名\n\n如果命令行中没有文件名，则输出中不出现文件名。\n\n### 例子\n#### 查看某个文件\n```shell\nAlex@alex:blog(master *)$wc -lcw package.json\n      24      44     618 package.json\n```\n#### 查看某目录下的所有文件(包括子目录)\n##### 查看blog 目录下命名后缀是html 文件所有的数量\n```shell\nAlex@alex:blog$find blog/ -name \"*.html\"|wc -l\n     199\n```\n#### 目录下所有md文件代码行数\n```\nfind blog/ -name \"*.md\" |xargs cat|wc -l\n```\n\n或\n```\n wc -l `find ./ -name \"*.md\"`|tail -n1\n```\n#### 统计当前目录下文件个数\n```\nls -l |grep \"^-\"|wc -l\n```\n#### 统计当前文件夹下目录的个数\n```\nls -l |grep \"^d\"|wc -l\n```\n#### 统计当前文件夹下文件的个数，包括子文件夹里的\n```\nls -lR|grep \"^-\"|wc -l\n```\n#### 统计文件夹下目录的个数，包括子文件夹里的\n```\nls -lR|grep \"^d\"|wc -l\n```\n\n\n## 性能分析工具 TOP命令\n>TOP命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况\n\n**命令格式：**\ntop [-] [d] [p] [q] [c] [C] [S]    [n]\n\n**查看某个用户下的所有进程**\n```\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -u alex\n\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n2763 alex      20   0 80420  16m  10m S   10  1.6   0:11.69 unity-panel-ser\n2865 alex      20   0 62216 4160 3268 S    6  0.4   0:05.54 hud-service\n2617 alex      20   0  4544 2144  632 S    4  0.2   0:05.30 dbus-daemon\n2646 alex      20   0  134m  12m 9884 S    2  1.2   0:09.35 metacity\n2667 alex      20   0  107m  22m  17m S    2  2.3   0:09.72 unity-2d-panel\n2679 alex      20   0 49608 8884 6936 S    2  0.9   0:02.26 bamfdaemon\n2681 alex      20   0  104m  13m  10m S    2  1.4   0:02.65 nm-apple\n```\n**查看单独某个进程**\n````\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ps -a\n  PID TTY          TIME CMD\n 9463 pts/1    00:00:00 gizwits\n 9471 pts/2    00:00:00 ps\nalex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -p 9463\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n9463 alex      20   0 30424 1152  944 S    2  0.1   0:00.74 gizwits\n````\n**说明**\n\n|名称|解释|\n|:---:|---|\n|PID|进程的ID\n|USER|进程所有者\n|PR|进程的优先级别，越小越优先被执行\n|NInice|值\n|VIRT|进程占用的虚拟内存\n|RES|进程占用的物理内存\n|SHR|进程使用的共享内存\n|S|进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数\n|%CPU|进程占用CPU的使用率\n|%MEM|进程使用的物理内存和总内存的百分比\n|TIME+|该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。\n|COMMAND|进程启动命令名称\n\n## 运行日志输出到终端和保存起来\n- - -\n```\n# 运行targe 目标，且同时把日志输出到终端和保存到文件log.txt\n>>>$ ./targe | tee log.txt\n```","slug":"Linux之实用技能 ","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7f000btns1ahs7mifi","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"查看机器是多少位\"><a href=\"#查看机器是多少位\" class=\"headerlink\" title=\"查看机器是多少位\"></a>查看机器是多少位</h2><hr>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ getconf LONG_BIT</div><div class=\"line\">&gt;&gt;&gt;$ 64</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ uname -a</div><div class=\"line\">&gt;&gt;&gt;$ Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ uname -p</div><div class=\"line\">&gt;&gt;&gt;$ x86_64</div></pre></td></tr></table></figure>\n<h2 id=\"实用命令\"><a href=\"#实用命令\" class=\"headerlink\" title=\"实用命令\"></a>实用命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">wc</td>\n<td>统计文本中行数、字数、字符数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stat</td>\n<td>显示指定文件的详细信息，比ls更详细</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">who</td>\n<td>显示在线登陆用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">whoami</td>\n<td>显示当前操作用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hostname</td>\n<td>显示主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uname</td>\n<td>显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top</td>\n<td>动态显示当前耗费资源最多进程信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td>显示瞬间进程状态 ps -aux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">du</td>\n<td>查看目录大小 du -h /home带有单位显示目录信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">df</td>\n<td>查看磁盘大小 df -h 带有单位显示磁盘信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux-代码文件大小、行数、字节数统计\"><a href=\"#Linux-代码文件大小、行数、字节数统计\" class=\"headerlink\" title=\"Linux 代码文件大小、行数、字节数统计\"></a>Linux 代码文件大小、行数、字节数统计</h2><h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p><strong><em>语法：wc [选项] 文件…</em></strong></p>\n<blockquote>\n<p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。</p>\n</blockquote>\n<p>该命令各选项含义如下：</p>\n<ul>\n<li>- c 统计字节数。</li>\n<li>- l 统计行数。</li>\n<li>- w 统计字数。</li>\n</ul>\n<p>这些选项可以组合使用。</p>\n<p>输出列的顺序和数目不受选项的顺序和数目的影响。</p>\n<p>总是按下述顺序显示并且每项最多一列。</p>\n<p>行数、字数、字节数、文件名</p>\n<p>如果命令行中没有文件名，则输出中不出现文件名。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"查看某个文件\"><a href=\"#查看某个文件\" class=\"headerlink\" title=\"查看某个文件\"></a>查看某个文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alex@alex:blog(master *)$wc -lcw package.json</div><div class=\"line\">      24      44     618 package.json</div></pre></td></tr></table></figure>\n<h4 id=\"查看某目录下的所有文件-包括子目录\"><a href=\"#查看某目录下的所有文件-包括子目录\" class=\"headerlink\" title=\"查看某目录下的所有文件(包括子目录)\"></a>查看某目录下的所有文件(包括子目录)</h4><h5 id=\"查看blog-目录下命名后缀是html-文件所有的数量\"><a href=\"#查看blog-目录下命名后缀是html-文件所有的数量\" class=\"headerlink\" title=\"查看blog 目录下命名后缀是html 文件所有的数量\"></a>查看blog 目录下命名后缀是html 文件所有的数量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alex@alex:blog$find blog/ -name &quot;*.html&quot;|wc -l</div><div class=\"line\">     199</div></pre></td></tr></table></figure>\n<h4 id=\"目录下所有md文件代码行数\"><a href=\"#目录下所有md文件代码行数\" class=\"headerlink\" title=\"目录下所有md文件代码行数\"></a>目录下所有md文件代码行数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find blog/ -name &quot;*.md&quot; |xargs cat|wc -l</div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc -l `find ./ -name &quot;*.md&quot;`|tail -n1</div></pre></td></tr></table></figure></p>\n<h4 id=\"统计当前目录下文件个数\"><a href=\"#统计当前目录下文件个数\" class=\"headerlink\" title=\"统计当前目录下文件个数\"></a>统计当前目录下文件个数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l |grep &quot;^-&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计当前文件夹下目录的个数\"><a href=\"#统计当前文件夹下目录的个数\" class=\"headerlink\" title=\"统计当前文件夹下目录的个数\"></a>统计当前文件夹下目录的个数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l |grep &quot;^d&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计当前文件夹下文件的个数，包括子文件夹里的\"><a href=\"#统计当前文件夹下文件的个数，包括子文件夹里的\" class=\"headerlink\" title=\"统计当前文件夹下文件的个数，包括子文件夹里的\"></a>统计当前文件夹下文件的个数，包括子文件夹里的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -lR|grep &quot;^-&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计文件夹下目录的个数，包括子文件夹里的\"><a href=\"#统计文件夹下目录的个数，包括子文件夹里的\" class=\"headerlink\" title=\"统计文件夹下目录的个数，包括子文件夹里的\"></a>统计文件夹下目录的个数，包括子文件夹里的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -lR|grep &quot;^d&quot;|wc -l</div></pre></td></tr></table></figure>\n<h2 id=\"性能分析工具-TOP命令\"><a href=\"#性能分析工具-TOP命令\" class=\"headerlink\" title=\"性能分析工具 TOP命令\"></a>性能分析工具 TOP命令</h2><blockquote>\n<p>TOP命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p>\n</blockquote>\n<p><strong>命令格式：</strong><br>top [-] [d] [p] [q] [c] [C] [S]    [n]</p>\n<p><strong>查看某个用户下的所有进程</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -u alex</div><div class=\"line\"></div><div class=\"line\">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class=\"line\">2763 alex      20   0 80420  16m  10m S   10  1.6   0:11.69 unity-panel-ser</div><div class=\"line\">2865 alex      20   0 62216 4160 3268 S    6  0.4   0:05.54 hud-service</div><div class=\"line\">2617 alex      20   0  4544 2144  632 S    4  0.2   0:05.30 dbus-daemon</div><div class=\"line\">2646 alex      20   0  134m  12m 9884 S    2  1.2   0:09.35 metacity</div><div class=\"line\">2667 alex      20   0  107m  22m  17m S    2  2.3   0:09.72 unity-2d-panel</div><div class=\"line\">2679 alex      20   0 49608 8884 6936 S    2  0.9   0:02.26 bamfdaemon</div><div class=\"line\">2681 alex      20   0  104m  13m  10m S    2  1.4   0:02.65 nm-apple</div></pre></td></tr></table></figure></p>\n<p><strong>查看单独某个进程</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ps -a</div><div class=\"line\">  PID TTY          TIME CMD</div><div class=\"line\"> 9463 pts/1    00:00:00 gizwits</div><div class=\"line\"> 9471 pts/2    00:00:00 ps</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -p 9463</div><div class=\"line\">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class=\"line\">9463 alex      20   0 30424 1152  944 S    2  0.1   0:00.74 gizwits</div></pre></td></tr></table></figure></p>\n<p><strong>说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td>进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">USER</td>\n<td>进程所有者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PR</td>\n<td>进程的优先级别，越小越优先被执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NInice</td>\n<td>值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VIRT</td>\n<td>进程占用的虚拟内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RES</td>\n<td>进程占用的物理内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SHR</td>\n<td>进程使用的共享内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td>进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%CPU</td>\n<td>进程占用CPU的使用率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%MEM</td>\n<td>进程使用的物理内存和总内存的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TIME+</td>\n<td>该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COMMAND</td>\n<td>进程启动命令名称</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"运行日志输出到终端和保存起来\"><a href=\"#运行日志输出到终端和保存起来\" class=\"headerlink\" title=\"运行日志输出到终端和保存起来\"></a>运行日志输出到终端和保存起来</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 运行targe 目标，且同时把日志输出到终端和保存到文件log.txt</div><div class=\"line\">&gt;&gt;&gt;$ ./targe | tee log.txt</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"查看机器是多少位\"><a href=\"#查看机器是多少位\" class=\"headerlink\" title=\"查看机器是多少位\"></a>查看机器是多少位</h2><hr>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ getconf LONG_BIT</div><div class=\"line\">&gt;&gt;&gt;$ 64</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ uname -a</div><div class=\"line\">&gt;&gt;&gt;$ Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>","more":"<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;$ uname -p</div><div class=\"line\">&gt;&gt;&gt;$ x86_64</div></pre></td></tr></table></figure>\n<h2 id=\"实用命令\"><a href=\"#实用命令\" class=\"headerlink\" title=\"实用命令\"></a>实用命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">wc</td>\n<td>统计文本中行数、字数、字符数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stat</td>\n<td>显示指定文件的详细信息，比ls更详细</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">who</td>\n<td>显示在线登陆用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">whoami</td>\n<td>显示当前操作用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hostname</td>\n<td>显示主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uname</td>\n<td>显示系统信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top</td>\n<td>动态显示当前耗费资源最多进程信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td>显示瞬间进程状态 ps -aux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">du</td>\n<td>查看目录大小 du -h /home带有单位显示目录信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">df</td>\n<td>查看磁盘大小 df -h 带有单位显示磁盘信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux-代码文件大小、行数、字节数统计\"><a href=\"#Linux-代码文件大小、行数、字节数统计\" class=\"headerlink\" title=\"Linux 代码文件大小、行数、字节数统计\"></a>Linux 代码文件大小、行数、字节数统计</h2><h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p><strong><em>语法：wc [选项] 文件…</em></strong></p>\n<blockquote>\n<p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。</p>\n</blockquote>\n<p>该命令各选项含义如下：</p>\n<ul>\n<li>- c 统计字节数。</li>\n<li>- l 统计行数。</li>\n<li>- w 统计字数。</li>\n</ul>\n<p>这些选项可以组合使用。</p>\n<p>输出列的顺序和数目不受选项的顺序和数目的影响。</p>\n<p>总是按下述顺序显示并且每项最多一列。</p>\n<p>行数、字数、字节数、文件名</p>\n<p>如果命令行中没有文件名，则输出中不出现文件名。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"查看某个文件\"><a href=\"#查看某个文件\" class=\"headerlink\" title=\"查看某个文件\"></a>查看某个文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alex@alex:blog(master *)$wc -lcw package.json</div><div class=\"line\">      24      44     618 package.json</div></pre></td></tr></table></figure>\n<h4 id=\"查看某目录下的所有文件-包括子目录\"><a href=\"#查看某目录下的所有文件-包括子目录\" class=\"headerlink\" title=\"查看某目录下的所有文件(包括子目录)\"></a>查看某目录下的所有文件(包括子目录)</h4><h5 id=\"查看blog-目录下命名后缀是html-文件所有的数量\"><a href=\"#查看blog-目录下命名后缀是html-文件所有的数量\" class=\"headerlink\" title=\"查看blog 目录下命名后缀是html 文件所有的数量\"></a>查看blog 目录下命名后缀是html 文件所有的数量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alex@alex:blog$find blog/ -name &quot;*.html&quot;|wc -l</div><div class=\"line\">     199</div></pre></td></tr></table></figure>\n<h4 id=\"目录下所有md文件代码行数\"><a href=\"#目录下所有md文件代码行数\" class=\"headerlink\" title=\"目录下所有md文件代码行数\"></a>目录下所有md文件代码行数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find blog/ -name &quot;*.md&quot; |xargs cat|wc -l</div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc -l `find ./ -name &quot;*.md&quot;`|tail -n1</div></pre></td></tr></table></figure></p>\n<h4 id=\"统计当前目录下文件个数\"><a href=\"#统计当前目录下文件个数\" class=\"headerlink\" title=\"统计当前目录下文件个数\"></a>统计当前目录下文件个数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l |grep &quot;^-&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计当前文件夹下目录的个数\"><a href=\"#统计当前文件夹下目录的个数\" class=\"headerlink\" title=\"统计当前文件夹下目录的个数\"></a>统计当前文件夹下目录的个数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l |grep &quot;^d&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计当前文件夹下文件的个数，包括子文件夹里的\"><a href=\"#统计当前文件夹下文件的个数，包括子文件夹里的\" class=\"headerlink\" title=\"统计当前文件夹下文件的个数，包括子文件夹里的\"></a>统计当前文件夹下文件的个数，包括子文件夹里的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -lR|grep &quot;^-&quot;|wc -l</div></pre></td></tr></table></figure>\n<h4 id=\"统计文件夹下目录的个数，包括子文件夹里的\"><a href=\"#统计文件夹下目录的个数，包括子文件夹里的\" class=\"headerlink\" title=\"统计文件夹下目录的个数，包括子文件夹里的\"></a>统计文件夹下目录的个数，包括子文件夹里的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -lR|grep &quot;^d&quot;|wc -l</div></pre></td></tr></table></figure>\n<h2 id=\"性能分析工具-TOP命令\"><a href=\"#性能分析工具-TOP命令\" class=\"headerlink\" title=\"性能分析工具 TOP命令\"></a>性能分析工具 TOP命令</h2><blockquote>\n<p>TOP命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p>\n</blockquote>\n<p><strong>命令格式：</strong><br>top [-] [d] [p] [q] [c] [C] [S]    [n]</p>\n<p><strong>查看某个用户下的所有进程</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -u alex</div><div class=\"line\"></div><div class=\"line\">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class=\"line\">2763 alex      20   0 80420  16m  10m S   10  1.6   0:11.69 unity-panel-ser</div><div class=\"line\">2865 alex      20   0 62216 4160 3268 S    6  0.4   0:05.54 hud-service</div><div class=\"line\">2617 alex      20   0  4544 2144  632 S    4  0.2   0:05.30 dbus-daemon</div><div class=\"line\">2646 alex      20   0  134m  12m 9884 S    2  1.2   0:09.35 metacity</div><div class=\"line\">2667 alex      20   0  107m  22m  17m S    2  2.3   0:09.72 unity-2d-panel</div><div class=\"line\">2679 alex      20   0 49608 8884 6936 S    2  0.9   0:02.26 bamfdaemon</div><div class=\"line\">2681 alex      20   0  104m  13m  10m S    2  1.4   0:02.65 nm-apple</div></pre></td></tr></table></figure></p>\n<p><strong>查看单独某个进程</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ps -a</div><div class=\"line\">  PID TTY          TIME CMD</div><div class=\"line\"> 9463 pts/1    00:00:00 gizwits</div><div class=\"line\"> 9471 pts/2    00:00:00 ps</div><div class=\"line\">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -p 9463</div><div class=\"line\">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</div><div class=\"line\">9463 alex      20   0 30424 1152  944 S    2  0.1   0:00.74 gizwits</div></pre></td></tr></table></figure></p>\n<p><strong>说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td>进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">USER</td>\n<td>进程所有者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PR</td>\n<td>进程的优先级别，越小越优先被执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NInice</td>\n<td>值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VIRT</td>\n<td>进程占用的虚拟内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RES</td>\n<td>进程占用的物理内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SHR</td>\n<td>进程使用的共享内存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td>进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%CPU</td>\n<td>进程占用CPU的使用率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%MEM</td>\n<td>进程使用的物理内存和总内存的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TIME+</td>\n<td>该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COMMAND</td>\n<td>进程启动命令名称</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"运行日志输出到终端和保存起来\"><a href=\"#运行日志输出到终端和保存起来\" class=\"headerlink\" title=\"运行日志输出到终端和保存起来\"></a>运行日志输出到终端和保存起来</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 运行targe 目标，且同时把日志输出到终端和保存到文件log.txt</div><div class=\"line\">&gt;&gt;&gt;$ ./targe | tee log.txt</div></pre></td></tr></table></figure>"},{"title":"Linux之服务安装","date":"2017-06-06T14:33:11.000Z","comments":0,"_content":"\n# ssh-server 安装\n\n**SSH分客户端**\n```\nopenssh-client\n```\n**服务端**\n```\nopenssh-server\n```\n<!--more-->\n如果你只是想登陆别的机器的SSH只需要安装**openssh-client**__(Ubutntu有默认安装，如果没有则 **sudo apt-get install openssh-client**)__，如果要使本机开放SSH服务就需要安装**openssh-server**。\n\n## 安装\n我这里使用命令安装服务端SSH。\n```\nsudo apt-get install openssh-server\n```\n## 检查\n然后使用命令确认sshserver是否启动了：\n```\nps -e |grep ssh\n```\n\n如果看到sshd那说明ssh-server已经启动了。\n```\nalex@ubuntu:~$ ps -e | grep ssh\n 2284 ?        00:00:00 ssh-agent\n 8743 ?        00:00:00 sshd\n```\n\n如果没有则可以这样启动：\n```\nsudo /etc/init.d/ssh start\n#或者\nservice ssh start\n```\n\n## 配置\n配置文件位于**/etc/ssh/sshd_config**，在这里可以定义SSH的服务端口，默认端口是22。\n然后重启SSH服务：\n```\nsudo /etc/init.d/ssh stop\nsudo /etc/init.d/ssh start\n```\n## 开机自启动配置\n设置开机自动启动ssh服务：\nUbuntu中配置openssh-server开机自动启动打开/etc/rc.local文件，添加如下语句：\n```\n/etc/init.d/ssh start\n```","source":"_posts/Linux之服务安装.md","raw":"---\ntitle: Linux之服务安装\ndate: 2017-06-06 22:33:11\ntags: [Linux,工具]\ncomments: false\n---\n\n# ssh-server 安装\n\n**SSH分客户端**\n```\nopenssh-client\n```\n**服务端**\n```\nopenssh-server\n```\n<!--more-->\n如果你只是想登陆别的机器的SSH只需要安装**openssh-client**__(Ubutntu有默认安装，如果没有则 **sudo apt-get install openssh-client**)__，如果要使本机开放SSH服务就需要安装**openssh-server**。\n\n## 安装\n我这里使用命令安装服务端SSH。\n```\nsudo apt-get install openssh-server\n```\n## 检查\n然后使用命令确认sshserver是否启动了：\n```\nps -e |grep ssh\n```\n\n如果看到sshd那说明ssh-server已经启动了。\n```\nalex@ubuntu:~$ ps -e | grep ssh\n 2284 ?        00:00:00 ssh-agent\n 8743 ?        00:00:00 sshd\n```\n\n如果没有则可以这样启动：\n```\nsudo /etc/init.d/ssh start\n#或者\nservice ssh start\n```\n\n## 配置\n配置文件位于**/etc/ssh/sshd_config**，在这里可以定义SSH的服务端口，默认端口是22。\n然后重启SSH服务：\n```\nsudo /etc/init.d/ssh stop\nsudo /etc/init.d/ssh start\n```\n## 开机自启动配置\n设置开机自动启动ssh服务：\nUbuntu中配置openssh-server开机自动启动打开/etc/rc.local文件，添加如下语句：\n```\n/etc/init.d/ssh start\n```","slug":"Linux之服务安装","published":1,"updated":"2017-07-31T15:54:38.000Z","layout":"post","photos":[],"link":"","_id":"cj5uhjt7g000ctns135enbvfu","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"ssh-server-安装\"><a href=\"#ssh-server-安装\" class=\"headerlink\" title=\"ssh-server 安装\"></a>ssh-server 安装</h1><p><strong>SSH分客户端</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssh-client</div></pre></td></tr></table></figure></p>\n<p><strong>服务端</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssh-server</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>如果你只是想登陆别的机器的SSH只需要安装<strong>openssh-client</strong><strong>(Ubutntu有默认安装，如果没有则 <strong>sudo apt-get install openssh-client</strong>)</strong>，如果要使本机开放SSH服务就需要安装<strong>openssh-server</strong>。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>我这里使用命令安装服务端SSH。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssh-server</div></pre></td></tr></table></figure></p>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>然后使用命令确认sshserver是否启动了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -e |grep ssh</div></pre></td></tr></table></figure></p>\n<p>如果看到sshd那说明ssh-server已经启动了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ ps -e | grep ssh</div><div class=\"line\"> 2284 ?        00:00:00 ssh-agent</div><div class=\"line\"> 8743 ?        00:00:00 sshd</div></pre></td></tr></table></figure></p>\n<p>如果没有则可以这样启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ssh start</div><div class=\"line\">#或者</div><div class=\"line\">service ssh start</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置文件位于<strong>/etc/ssh/sshd_config</strong>，在这里可以定义SSH的服务端口，默认端口是22。<br>然后重启SSH服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ssh stop</div><div class=\"line\">sudo /etc/init.d/ssh start</div></pre></td></tr></table></figure></p>\n<h2 id=\"开机自启动配置\"><a href=\"#开机自启动配置\" class=\"headerlink\" title=\"开机自启动配置\"></a>开机自启动配置</h2><p>设置开机自动启动ssh服务：<br>Ubuntu中配置openssh-server开机自动启动打开/etc/rc.local文件，添加如下语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/ssh start</div></pre></td></tr></table></figure></p>\n","excerpt":"<h1 id=\"ssh-server-安装\"><a href=\"#ssh-server-安装\" class=\"headerlink\" title=\"ssh-server 安装\"></a>ssh-server 安装</h1><p><strong>SSH分客户端</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssh-client</div></pre></td></tr></table></figure></p>\n<p><strong>服务端</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssh-server</div></pre></td></tr></table></figure></p>","more":"<p>如果你只是想登陆别的机器的SSH只需要安装<strong>openssh-client</strong><strong>(Ubutntu有默认安装，如果没有则 <strong>sudo apt-get install openssh-client</strong>)</strong>，如果要使本机开放SSH服务就需要安装<strong>openssh-server</strong>。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>我这里使用命令安装服务端SSH。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssh-server</div></pre></td></tr></table></figure></p>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>然后使用命令确认sshserver是否启动了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -e |grep ssh</div></pre></td></tr></table></figure></p>\n<p>如果看到sshd那说明ssh-server已经启动了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ ps -e | grep ssh</div><div class=\"line\"> 2284 ?        00:00:00 ssh-agent</div><div class=\"line\"> 8743 ?        00:00:00 sshd</div></pre></td></tr></table></figure></p>\n<p>如果没有则可以这样启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ssh start</div><div class=\"line\">#或者</div><div class=\"line\">service ssh start</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置文件位于<strong>/etc/ssh/sshd_config</strong>，在这里可以定义SSH的服务端口，默认端口是22。<br>然后重启SSH服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/ssh stop</div><div class=\"line\">sudo /etc/init.d/ssh start</div></pre></td></tr></table></figure></p>\n<h2 id=\"开机自启动配置\"><a href=\"#开机自启动配置\" class=\"headerlink\" title=\"开机自启动配置\"></a>开机自启动配置</h2><p>设置开机自动启动ssh服务：<br>Ubuntu中配置openssh-server开机自动启动打开/etc/rc.local文件，添加如下语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/ssh start</div></pre></td></tr></table></figure></p>"},{"title":"Lua之 loadfile ,dofile, loadstring，require","date":"2017-03-25T17:33:11.000Z","_content":"- - -\n### loadfile——只编译，不运行\n    1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回\n    2.调用：loadfile(\"filename\")\n    3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错误消息\n    4.优点：调用一次之后可以多次调用返回的结果（即函数），\n      即“多次调用”只需编译一次（注：这里的多次调用   是指多次调用返回的函数，而不是多次调用loadfile）\n<!--more-->\n\n__dofile可如下定义：__\n```lua\n    function dofile(filename)\n    　　local f = assert(loadfile(filename)) --调用loadfile（的返回结果）并可处理错误\n    return f()\n    end\n```\n```\n注：加载了程序块并没有定义其中的函数。在Lua中，函数定义是一种赋值操作，是在运行时才完成的操作。\n例如：一个文件test.lua中有一个函数 function foo(x) print(x) end ,执行如下代码：\n　　　f = loadfile(test.lua) --加载程序块，此时还没有定义函数foo\n　　　f() --运行加载的程序块，此时就定义了函数foo\n     foo(\"hello lua\") -->hello lua --经过上面的步骤才能调用foo\n    ```\n### dofile——执行\n    1.功能：载入文件并执行代码块，对于相同的文件每次都会执行\n    2.调用：dofile(\"filename\")\n    3.错误处理：如果代码块中有错误则会引发错误\n    4.优点：对简单任务而言，非常便捷\n    5.缺点：每次载入文件时都会执行程序块\n    6.定位：内置操作，辅助函数\n### require——我只执行一次\n    require和dofile有点像，不过又很不一样，require在第一次加载文件的时候，会执行里面的代码。\n    但是，第二次之后，再次加载文件，则不会重复执行了。换句话说，它会保存已经加载过的文件，不会重复加载。\n### loadstring\n    1.特点：功能强大，但开销大；\n    2.典型用处：执行外部代码，如：用户的输入\n    3.错误错里：代码中如果有语法错误就会返回nil\n    4.理解：f = loadstring(\"i = i+1\")  可理解为（但不完全是）f = function()  i = i+1  end \n    (注：这里的变量\"i\"是全局变量，不是指局部变量，如果没有定义全局变量\"i\",调用f()则会报错！，即loadstring   不涉及词法域)","source":"_posts/Lua之 loadfile ,dofile, loadstring，require.md","raw":"---\ntitle: Lua之 loadfile ,dofile, loadstring，require\ndate: 2017-03-26 01:33:11\ntags: [lua]\n---\n- - -\n### loadfile——只编译，不运行\n    1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回\n    2.调用：loadfile(\"filename\")\n    3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错误消息\n    4.优点：调用一次之后可以多次调用返回的结果（即函数），\n      即“多次调用”只需编译一次（注：这里的多次调用   是指多次调用返回的函数，而不是多次调用loadfile）\n<!--more-->\n\n__dofile可如下定义：__\n```lua\n    function dofile(filename)\n    　　local f = assert(loadfile(filename)) --调用loadfile（的返回结果）并可处理错误\n    return f()\n    end\n```\n```\n注：加载了程序块并没有定义其中的函数。在Lua中，函数定义是一种赋值操作，是在运行时才完成的操作。\n例如：一个文件test.lua中有一个函数 function foo(x) print(x) end ,执行如下代码：\n　　　f = loadfile(test.lua) --加载程序块，此时还没有定义函数foo\n　　　f() --运行加载的程序块，此时就定义了函数foo\n     foo(\"hello lua\") -->hello lua --经过上面的步骤才能调用foo\n    ```\n### dofile——执行\n    1.功能：载入文件并执行代码块，对于相同的文件每次都会执行\n    2.调用：dofile(\"filename\")\n    3.错误处理：如果代码块中有错误则会引发错误\n    4.优点：对简单任务而言，非常便捷\n    5.缺点：每次载入文件时都会执行程序块\n    6.定位：内置操作，辅助函数\n### require——我只执行一次\n    require和dofile有点像，不过又很不一样，require在第一次加载文件的时候，会执行里面的代码。\n    但是，第二次之后，再次加载文件，则不会重复执行了。换句话说，它会保存已经加载过的文件，不会重复加载。\n### loadstring\n    1.特点：功能强大，但开销大；\n    2.典型用处：执行外部代码，如：用户的输入\n    3.错误错里：代码中如果有语法错误就会返回nil\n    4.理解：f = loadstring(\"i = i+1\")  可理解为（但不完全是）f = function()  i = i+1  end \n    (注：这里的变量\"i\"是全局变量，不是指局部变量，如果没有定义全局变量\"i\",调用f()则会报错！，即loadstring   不涉及词法域)","slug":"Lua之 loadfile ,dofile, loadstring，require","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7i000etns1nyg97ca5","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h3 id=\"loadfile——只编译，不运行\"><a href=\"#loadfile——只编译，不运行\" class=\"headerlink\" title=\"loadfile——只编译，不运行\"></a>loadfile——只编译，不运行</h3><pre><code>1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回\n2.调用：loadfile(&quot;filename&quot;)\n3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错误消息\n4.优点：调用一次之后可以多次调用返回的结果（即函数），\n  即“多次调用”只需编译一次（注：这里的多次调用   是指多次调用返回的函数，而不是多次调用loadfile）\n</code></pre><a id=\"more\"></a>\n<p><strong>dofile可如下定义：</strong><br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dofile</span><span class=\"params\">(filename)</span></span></div><div class=\"line\">　　<span class=\"keyword\">local</span> f = <span class=\"built_in\">assert</span>(<span class=\"built_in\">loadfile</span>(filename)) <span class=\"comment\">--调用loadfile（的返回结果）并可处理错误</span></div><div class=\"line\"><span class=\"keyword\">return</span> f()</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">注：加载了程序块并没有定义其中的函数。在Lua中，函数定义是一种赋值操作，是在运行时才完成的操作。</div><div class=\"line\">例如：一个文件test.lua中有一个函数 function foo(x) print(x) end ,执行如下代码：</div><div class=\"line\">　　　f = loadfile(test.lua) --加载程序块，此时还没有定义函数foo</div><div class=\"line\">　　　f() --运行加载的程序块，此时就定义了函数foo</div><div class=\"line\">     foo(&quot;hello lua&quot;) --&gt;hello lua --经过上面的步骤才能调用foo</div></pre></td></tr></table></figure>\n<h3 id=\"dofile——执行\"><a href=\"#dofile——执行\" class=\"headerlink\" title=\"dofile——执行\"></a>dofile——执行</h3><pre><code>1.功能：载入文件并执行代码块，对于相同的文件每次都会执行\n2.调用：dofile(&quot;filename&quot;)\n3.错误处理：如果代码块中有错误则会引发错误\n4.优点：对简单任务而言，非常便捷\n5.缺点：每次载入文件时都会执行程序块\n6.定位：内置操作，辅助函数\n</code></pre><h3 id=\"require——我只执行一次\"><a href=\"#require——我只执行一次\" class=\"headerlink\" title=\"require——我只执行一次\"></a>require——我只执行一次</h3><pre><code>require和dofile有点像，不过又很不一样，require在第一次加载文件的时候，会执行里面的代码。\n但是，第二次之后，再次加载文件，则不会重复执行了。换句话说，它会保存已经加载过的文件，不会重复加载。\n</code></pre><h3 id=\"loadstring\"><a href=\"#loadstring\" class=\"headerlink\" title=\"loadstring\"></a>loadstring</h3><pre><code>1.特点：功能强大，但开销大；\n2.典型用处：执行外部代码，如：用户的输入\n3.错误错里：代码中如果有语法错误就会返回nil\n4.理解：f = loadstring(&quot;i = i+1&quot;)  可理解为（但不完全是）f = function()  i = i+1  end \n(注：这里的变量&quot;i&quot;是全局变量，不是指局部变量，如果没有定义全局变量&quot;i&quot;,调用f()则会报错！，即loadstring   不涉及词法域)\n</code></pre>","excerpt":"<hr>\n<h3 id=\"loadfile——只编译，不运行\"><a href=\"#loadfile——只编译，不运行\" class=\"headerlink\" title=\"loadfile——只编译，不运行\"></a>loadfile——只编译，不运行</h3><pre><code>1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回\n2.调用：loadfile(&quot;filename&quot;)\n3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错误消息\n4.优点：调用一次之后可以多次调用返回的结果（即函数），\n  即“多次调用”只需编译一次（注：这里的多次调用   是指多次调用返回的函数，而不是多次调用loadfile）\n</code></pre>","more":"<p><strong>dofile可如下定义：</strong><br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dofile</span><span class=\"params\">(filename)</span></span></div><div class=\"line\">　　<span class=\"keyword\">local</span> f = <span class=\"built_in\">assert</span>(<span class=\"built_in\">loadfile</span>(filename)) <span class=\"comment\">--调用loadfile（的返回结果）并可处理错误</span></div><div class=\"line\"><span class=\"keyword\">return</span> f()</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">注：加载了程序块并没有定义其中的函数。在Lua中，函数定义是一种赋值操作，是在运行时才完成的操作。</div><div class=\"line\">例如：一个文件test.lua中有一个函数 function foo(x) print(x) end ,执行如下代码：</div><div class=\"line\">　　　f = loadfile(test.lua) --加载程序块，此时还没有定义函数foo</div><div class=\"line\">　　　f() --运行加载的程序块，此时就定义了函数foo</div><div class=\"line\">     foo(&quot;hello lua&quot;) --&gt;hello lua --经过上面的步骤才能调用foo</div></pre></td></tr></table></figure>\n<h3 id=\"dofile——执行\"><a href=\"#dofile——执行\" class=\"headerlink\" title=\"dofile——执行\"></a>dofile——执行</h3><pre><code>1.功能：载入文件并执行代码块，对于相同的文件每次都会执行\n2.调用：dofile(&quot;filename&quot;)\n3.错误处理：如果代码块中有错误则会引发错误\n4.优点：对简单任务而言，非常便捷\n5.缺点：每次载入文件时都会执行程序块\n6.定位：内置操作，辅助函数\n</code></pre><h3 id=\"require——我只执行一次\"><a href=\"#require——我只执行一次\" class=\"headerlink\" title=\"require——我只执行一次\"></a>require——我只执行一次</h3><pre><code>require和dofile有点像，不过又很不一样，require在第一次加载文件的时候，会执行里面的代码。\n但是，第二次之后，再次加载文件，则不会重复执行了。换句话说，它会保存已经加载过的文件，不会重复加载。\n</code></pre><h3 id=\"loadstring\"><a href=\"#loadstring\" class=\"headerlink\" title=\"loadstring\"></a>loadstring</h3><pre><code>1.特点：功能强大，但开销大；\n2.典型用处：执行外部代码，如：用户的输入\n3.错误错里：代码中如果有语法错误就会返回nil\n4.理解：f = loadstring(&quot;i = i+1&quot;)  可理解为（但不完全是）f = function()  i = i+1  end \n(注：这里的变量&quot;i&quot;是全局变量，不是指局部变量，如果没有定义全局变量&quot;i&quot;,调用f()则会报错！，即loadstring   不涉及词法域)\n</code></pre>"},{"title":"PC小技巧","date":"2017-07-01T11:20:11.000Z","top":1,"_content":"## Win7 开热点\n1. 输入命令：```netsh wlan set hostednetwork mode=allow ssid=livdran2012 key=100100100``` 。\n```mode:```是否启用虚拟WiFi网卡，改为disallow则为禁止。\n```ssid:```无线网名称，推荐最好用英文。（此处以livdran2012为例，可自由设置）\n```key:```无线网密码，限定八个以上字符。（此处以100100100为例，可自由设置）\n\n<!--more-->\n\n2. 运行成功后，打开网络和共享中心，点击左侧更改适配器设置。\n3. 进入适配器设置就会发现多出了一个网卡为“Microsoft Virtual WiFi Miniport Adapter”的无线网络连接2。若没有，则尝试更新无线网卡驱动。\n为方便起见，可将无线网络连接2重命名为**\"VirtualWiFi\"**。\n3. 在网络连接里， 右键单击已连接到Internet的网络连接，选择“属性”→“共享”，勾上“允许其他网络用户通过此计算机的Internet连接来连接(N)”并选择“虚拟WiFi”。\n确定之后，提供共享的网卡图标旁会出现“共享的”字样，表示“宽带连接”已共享至**\"VirtualWiFi\"**\n![网络共享][1]\n![共享标志][2]\n4.继续命令行输入:```netsh wlan start hostednetwork```，按回车键运行。\n最后，虚拟WiFi的红叉消失，WiFi基站已组建好并启动，用支持WiFi的设备搜索到自己建立的无线网络（如例中livdran2012）,输入自己设置的密码（如例中100100100），即可共享上网了。\n\n\n  [1]: http://static.zybuluo.com/AlexLin/7tftyoeqj79obckwcylz4ret/image.png\n  [2]: http://static.zybuluo.com/AlexLin/e0ca3mszpdbqmzp7vhvut012/image.png","source":"_posts/PC小技巧.md","raw":"---\ntitle: PC小技巧\ndate: 2017-07-01 19:20:11\ntags: [PC工具]\ncategories: 工具\ntop: 1\n---\n## Win7 开热点\n1. 输入命令：```netsh wlan set hostednetwork mode=allow ssid=livdran2012 key=100100100``` 。\n```mode:```是否启用虚拟WiFi网卡，改为disallow则为禁止。\n```ssid:```无线网名称，推荐最好用英文。（此处以livdran2012为例，可自由设置）\n```key:```无线网密码，限定八个以上字符。（此处以100100100为例，可自由设置）\n\n<!--more-->\n\n2. 运行成功后，打开网络和共享中心，点击左侧更改适配器设置。\n3. 进入适配器设置就会发现多出了一个网卡为“Microsoft Virtual WiFi Miniport Adapter”的无线网络连接2。若没有，则尝试更新无线网卡驱动。\n为方便起见，可将无线网络连接2重命名为**\"VirtualWiFi\"**。\n3. 在网络连接里， 右键单击已连接到Internet的网络连接，选择“属性”→“共享”，勾上“允许其他网络用户通过此计算机的Internet连接来连接(N)”并选择“虚拟WiFi”。\n确定之后，提供共享的网卡图标旁会出现“共享的”字样，表示“宽带连接”已共享至**\"VirtualWiFi\"**\n![网络共享][1]\n![共享标志][2]\n4.继续命令行输入:```netsh wlan start hostednetwork```，按回车键运行。\n最后，虚拟WiFi的红叉消失，WiFi基站已组建好并启动，用支持WiFi的设备搜索到自己建立的无线网络（如例中livdran2012）,输入自己设置的密码（如例中100100100），即可共享上网了。\n\n\n  [1]: http://static.zybuluo.com/AlexLin/7tftyoeqj79obckwcylz4ret/image.png\n  [2]: http://static.zybuluo.com/AlexLin/e0ca3mszpdbqmzp7vhvut012/image.png","slug":"PC小技巧","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7l000htns14fz5p17z","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"Win7-开热点\"><a href=\"#Win7-开热点\" class=\"headerlink\" title=\"Win7 开热点\"></a>Win7 开热点</h2><ol>\n<li>输入命令：<code>netsh wlan set hostednetwork mode=allow ssid=livdran2012 key=100100100</code> 。<br><code>mode:</code>是否启用虚拟WiFi网卡，改为disallow则为禁止。<br><code>ssid:</code>无线网名称，推荐最好用英文。（此处以livdran2012为例，可自由设置）<br><code>key:</code>无线网密码，限定八个以上字符。（此处以100100100为例，可自由设置）</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>运行成功后，打开网络和共享中心，点击左侧更改适配器设置。</li>\n<li>进入适配器设置就会发现多出了一个网卡为“Microsoft Virtual WiFi Miniport Adapter”的无线网络连接2。若没有，则尝试更新无线网卡驱动。<br>为方便起见，可将无线网络连接2重命名为<strong>“VirtualWiFi”</strong>。</li>\n<li>在网络连接里， 右键单击已连接到Internet的网络连接，选择“属性”→“共享”，勾上“允许其他网络用户通过此计算机的Internet连接来连接(N)”并选择“虚拟WiFi”。<br>确定之后，提供共享的网卡图标旁会出现“共享的”字样，表示“宽带连接”已共享至<strong>“VirtualWiFi”</strong><br><img src=\"http://static.zybuluo.com/AlexLin/7tftyoeqj79obckwcylz4ret/image.png\" alt=\"网络共享\"><br><img src=\"http://static.zybuluo.com/AlexLin/e0ca3mszpdbqmzp7vhvut012/image.png\" alt=\"共享标志\"><br>4.继续命令行输入:<code>netsh wlan start hostednetwork</code>，按回车键运行。<br>最后，虚拟WiFi的红叉消失，WiFi基站已组建好并启动，用支持WiFi的设备搜索到自己建立的无线网络（如例中livdran2012）,输入自己设置的密码（如例中100100100），即可共享上网了。</li>\n</ol>\n","excerpt":"<h2 id=\"Win7-开热点\"><a href=\"#Win7-开热点\" class=\"headerlink\" title=\"Win7 开热点\"></a>Win7 开热点</h2><ol>\n<li>输入命令：<code>netsh wlan set hostednetwork mode=allow ssid=livdran2012 key=100100100</code> 。<br><code>mode:</code>是否启用虚拟WiFi网卡，改为disallow则为禁止。<br><code>ssid:</code>无线网名称，推荐最好用英文。（此处以livdran2012为例，可自由设置）<br><code>key:</code>无线网密码，限定八个以上字符。（此处以100100100为例，可自由设置）</li>\n</ol>","more":"<ol>\n<li>运行成功后，打开网络和共享中心，点击左侧更改适配器设置。</li>\n<li>进入适配器设置就会发现多出了一个网卡为“Microsoft Virtual WiFi Miniport Adapter”的无线网络连接2。若没有，则尝试更新无线网卡驱动。<br>为方便起见，可将无线网络连接2重命名为<strong>“VirtualWiFi”</strong>。</li>\n<li>在网络连接里， 右键单击已连接到Internet的网络连接，选择“属性”→“共享”，勾上“允许其他网络用户通过此计算机的Internet连接来连接(N)”并选择“虚拟WiFi”。<br>确定之后，提供共享的网卡图标旁会出现“共享的”字样，表示“宽带连接”已共享至<strong>“VirtualWiFi”</strong><br><img src=\"http://static.zybuluo.com/AlexLin/7tftyoeqj79obckwcylz4ret/image.png\" alt=\"网络共享\"><br><img src=\"http://static.zybuluo.com/AlexLin/e0ca3mszpdbqmzp7vhvut012/image.png\" alt=\"共享标志\"><br>4.继续命令行输入:<code>netsh wlan start hostednetwork</code>，按回车键运行。<br>最后，虚拟WiFi的红叉消失，WiFi基站已组建好并启动，用支持WiFi的设备搜索到自己建立的无线网络（如例中livdran2012）,输入自己设置的密码（如例中100100100），即可共享上网了。</li>\n</ol>"},{"title":"Github Blog 搭建入门","date":"2017-03-25T16:39:11.000Z","_content":"- - -\n## GitHub 项目创建\n- 创建一个跟你的用户名相同的项目，比如我的***github***名称是***ilxj*** 则项目名称为***ilxj.github.io***\n\n## nodejs安装\n\n- 安装nodejs，下载直接安装就可以了: https://nodejs.org/en/download/.\n\n<!--more-->\n\n## hexo安装\n- 安装配置hexo，安装命令:\n\n### 淘宝cnpm \n网址:https://npm.taobao.org/\n\n``` bash\nnpm install -g hexo-cli\n# 若npm 安装有问题，可以更改为淘宝源,之后可以用 cnpm 代替 npm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 在终端输入:\n\n``` bash\n $ hexo \n #显示如下则成功.\n```\n ![hexo][3]\n\n\n- 初始化博客\n\n``` bash\n #建立一个博客文件夹，并初始化博客，<folder>为文件夹的名称，可以随便起名字\n $ hexo init <folder>\n #进入博客文件夹，根据博客既定的dependencies配置安装所有的依赖包\n $ npm install\n # 部署所需的插件,加上--save比较好\n $ npm install hexo-deployer-git    --save  \n```\n\n- 初始化完成之后，目录如下图\n![hexo 初始化图][2]\n## 博客配置\n![博客配置](http://upload-images.jianshu.io/upload_images/1736256-70632d39b4a81358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 本地发布命令\n``` bash\n $ hexo server.\n #浏览器浏览:http://localhost:4000/\n```\n### GitHub 发布命令\n``` bash\n $ hexo generate\n $ hexo deploy\n```\n这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是:[ilxj.github.io][1]。\n\n## 跨PC部署\n原理是一个仓库存部署工具，另外一个参考用来做发布仓库；\n\n## Hexo 主题\n- [官网 hexo 主题][4]\n- [主题 github][5]\n\n### 本博客主题是NEXT\n- 新建一个页面，命名为 tags 。命令如下：\n```\n$ hexo new page tags\n```\n- 初始化\n编辑刚新建的页面，设置type为tags：\n\n```\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n\n---\n```\n[NEXT 参考][6]\n[1]: http://lxj-life.com/\n[2]: http://upload-images.jianshu.io/upload_images/1736256-41e851da429e5a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[3]: http://upload-images.jianshu.io/upload_images/1736256-808fd91a203124d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[4]: https://hexo.io/themes/\n[5]: https://github.com/hexojs/hexo/wiki/Themes\n[6]: http://theme-next.iissnan.com/getting-started.html\n\n\n","source":"_posts/Github-Blog-搭建入门.md","raw":"---\ntitle: Github Blog 搭建入门 \ndate: 2017-03-26 0:39:11\ntags: [git , hexo]\n---\n- - -\n## GitHub 项目创建\n- 创建一个跟你的用户名相同的项目，比如我的***github***名称是***ilxj*** 则项目名称为***ilxj.github.io***\n\n## nodejs安装\n\n- 安装nodejs，下载直接安装就可以了: https://nodejs.org/en/download/.\n\n<!--more-->\n\n## hexo安装\n- 安装配置hexo，安装命令:\n\n### 淘宝cnpm \n网址:https://npm.taobao.org/\n\n``` bash\nnpm install -g hexo-cli\n# 若npm 安装有问题，可以更改为淘宝源,之后可以用 cnpm 代替 npm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n- 在终端输入:\n\n``` bash\n $ hexo \n #显示如下则成功.\n```\n ![hexo][3]\n\n\n- 初始化博客\n\n``` bash\n #建立一个博客文件夹，并初始化博客，<folder>为文件夹的名称，可以随便起名字\n $ hexo init <folder>\n #进入博客文件夹，根据博客既定的dependencies配置安装所有的依赖包\n $ npm install\n # 部署所需的插件,加上--save比较好\n $ npm install hexo-deployer-git    --save  \n```\n\n- 初始化完成之后，目录如下图\n![hexo 初始化图][2]\n## 博客配置\n![博客配置](http://upload-images.jianshu.io/upload_images/1736256-70632d39b4a81358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 本地发布命令\n``` bash\n $ hexo server.\n #浏览器浏览:http://localhost:4000/\n```\n### GitHub 发布命令\n``` bash\n $ hexo generate\n $ hexo deploy\n```\n这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是:[ilxj.github.io][1]。\n\n## 跨PC部署\n原理是一个仓库存部署工具，另外一个参考用来做发布仓库；\n\n## Hexo 主题\n- [官网 hexo 主题][4]\n- [主题 github][5]\n\n### 本博客主题是NEXT\n- 新建一个页面，命名为 tags 。命令如下：\n```\n$ hexo new page tags\n```\n- 初始化\n编辑刚新建的页面，设置type为tags：\n\n```\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n\n---\n```\n[NEXT 参考][6]\n[1]: http://lxj-life.com/\n[2]: http://upload-images.jianshu.io/upload_images/1736256-41e851da429e5a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[3]: http://upload-images.jianshu.io/upload_images/1736256-808fd91a203124d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n[4]: https://hexo.io/themes/\n[5]: https://github.com/hexojs/hexo/wiki/Themes\n[6]: http://theme-next.iissnan.com/getting-started.html\n\n\n","slug":"Github-Blog-搭建入门","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7o000ktns1zv2z1gmu","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"GitHub-项目创建\"><a href=\"#GitHub-项目创建\" class=\"headerlink\" title=\"GitHub 项目创建\"></a>GitHub 项目创建</h2><ul>\n<li>创建一个跟你的用户名相同的项目，比如我的<strong><em>github</em></strong>名称是<strong><em>ilxj</em></strong> 则项目名称为<strong><em>ilxj.github.io</em></strong></li>\n</ul>\n<h2 id=\"nodejs安装\"><a href=\"#nodejs安装\" class=\"headerlink\" title=\"nodejs安装\"></a>nodejs安装</h2><ul>\n<li>安装nodejs，下载直接安装就可以了: <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/download/</a>.</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h2><ul>\n<li>安装配置hexo，安装命令:</li>\n</ul>\n<h3 id=\"淘宝cnpm\"><a href=\"#淘宝cnpm\" class=\"headerlink\" title=\"淘宝cnpm\"></a>淘宝cnpm</h3><p>网址:<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">https://npm.taobao.org/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\"><span class=\"comment\"># 若npm 安装有问题，可以更改为淘宝源,之后可以用 cnpm 代替 npm</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<ul>\n<li>在终端输入:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo </div><div class=\"line\"><span class=\"comment\">#显示如下则成功.</span></div></pre></td></tr></table></figure>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/1736256-808fd91a203124d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo\"></p>\n<ul>\n<li>初始化博客</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span></div><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\"><span class=\"comment\">#进入博客文件夹，根据博客既定的dependencies配置安装所有的依赖包</span></div><div class=\"line\">$ npm install</div><div class=\"line\"><span class=\"comment\"># 部署所需的插件,加上--save比较好</span></div><div class=\"line\">$ npm install hexo-deployer-git    --save</div></pre></td></tr></table></figure>\n<ul>\n<li>初始化完成之后，目录如下图<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-41e851da429e5a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo 初始化图\"><h2 id=\"博客配置\"><a href=\"#博客配置\" class=\"headerlink\" title=\"博客配置\"></a>博客配置</h2><img src=\"http://upload-images.jianshu.io/upload_images/1736256-70632d39b4a81358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"博客配置\"></li>\n</ul>\n<h3 id=\"本地发布命令\"><a href=\"#本地发布命令\" class=\"headerlink\" title=\"本地发布命令\"></a>本地发布命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server.</div><div class=\"line\"><span class=\"comment\">#浏览器浏览:http://localhost:4000/</span></div></pre></td></tr></table></figure>\n<h3 id=\"GitHub-发布命令\"><a href=\"#GitHub-发布命令\" class=\"headerlink\" title=\"GitHub 发布命令\"></a>GitHub 发布命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是:<a href=\"http://lxj-life.com/\">ilxj.github.io</a>。</p>\n<h2 id=\"跨PC部署\"><a href=\"#跨PC部署\" class=\"headerlink\" title=\"跨PC部署\"></a>跨PC部署</h2><p>原理是一个仓库存部署工具，另外一个参考用来做发布仓库；</p>\n<h2 id=\"Hexo-主题\"><a href=\"#Hexo-主题\" class=\"headerlink\" title=\"Hexo 主题\"></a>Hexo 主题</h2><ul>\n<li><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">官网 hexo 主题</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">主题 github</a></li>\n</ul>\n<h3 id=\"本博客主题是NEXT\"><a href=\"#本博客主题是NEXT\" class=\"headerlink\" title=\"本博客主题是NEXT\"></a>本博客主题是NEXT</h3><ul>\n<li><p>新建一个页面，命名为 tags 。命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<br>编辑刚新建的页面，设置type为tags：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2014-12-22 12:39:04</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\"></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NEXT 参考</a></p>\n","excerpt":"<hr>\n<h2 id=\"GitHub-项目创建\"><a href=\"#GitHub-项目创建\" class=\"headerlink\" title=\"GitHub 项目创建\"></a>GitHub 项目创建</h2><ul>\n<li>创建一个跟你的用户名相同的项目，比如我的<strong><em>github</em></strong>名称是<strong><em>ilxj</em></strong> 则项目名称为<strong><em>ilxj.github.io</em></strong></li>\n</ul>\n<h2 id=\"nodejs安装\"><a href=\"#nodejs安装\" class=\"headerlink\" title=\"nodejs安装\"></a>nodejs安装</h2><ul>\n<li>安装nodejs，下载直接安装就可以了: <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a>.</li>\n</ul>","more":"<h2 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h2><ul>\n<li>安装配置hexo，安装命令:</li>\n</ul>\n<h3 id=\"淘宝cnpm\"><a href=\"#淘宝cnpm\" class=\"headerlink\" title=\"淘宝cnpm\"></a>淘宝cnpm</h3><p>网址:<a href=\"https://npm.taobao.org/\">https://npm.taobao.org/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\"><span class=\"comment\"># 若npm 安装有问题，可以更改为淘宝源,之后可以用 cnpm 代替 npm</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<ul>\n<li>在终端输入:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo </div><div class=\"line\"><span class=\"comment\">#显示如下则成功.</span></div></pre></td></tr></table></figure>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/1736256-808fd91a203124d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo\"></p>\n<ul>\n<li>初始化博客</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span></div><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\"><span class=\"comment\">#进入博客文件夹，根据博客既定的dependencies配置安装所有的依赖包</span></div><div class=\"line\">$ npm install</div><div class=\"line\"><span class=\"comment\"># 部署所需的插件,加上--save比较好</span></div><div class=\"line\">$ npm install hexo-deployer-git    --save</div></pre></td></tr></table></figure>\n<ul>\n<li>初始化完成之后，目录如下图<br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-41e851da429e5a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo 初始化图\"><h2 id=\"博客配置\"><a href=\"#博客配置\" class=\"headerlink\" title=\"博客配置\"></a>博客配置</h2><img src=\"http://upload-images.jianshu.io/upload_images/1736256-70632d39b4a81358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"博客配置\"></li>\n</ul>\n<h3 id=\"本地发布命令\"><a href=\"#本地发布命令\" class=\"headerlink\" title=\"本地发布命令\"></a>本地发布命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server.</div><div class=\"line\"><span class=\"comment\">#浏览器浏览:http://localhost:4000/</span></div></pre></td></tr></table></figure>\n<h3 id=\"GitHub-发布命令\"><a href=\"#GitHub-发布命令\" class=\"headerlink\" title=\"GitHub 发布命令\"></a>GitHub 发布命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是:<a href=\"http://lxj-life.com/\">ilxj.github.io</a>。</p>\n<h2 id=\"跨PC部署\"><a href=\"#跨PC部署\" class=\"headerlink\" title=\"跨PC部署\"></a>跨PC部署</h2><p>原理是一个仓库存部署工具，另外一个参考用来做发布仓库；</p>\n<h2 id=\"Hexo-主题\"><a href=\"#Hexo-主题\" class=\"headerlink\" title=\"Hexo 主题\"></a>Hexo 主题</h2><ul>\n<li><a href=\"https://hexo.io/themes/\">官网 hexo 主题</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/wiki/Themes\">主题 github</a></li>\n</ul>\n<h3 id=\"本博客主题是NEXT\"><a href=\"#本博客主题是NEXT\" class=\"headerlink\" title=\"本博客主题是NEXT\"></a>本博客主题是NEXT</h3><ul>\n<li><p>新建一个页面，命名为 tags 。命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化<br>编辑刚新建的页面，设置type为tags：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2014-12-22 12:39:04</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\"></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p><a href=\"http://theme-next.iissnan.com/getting-started.html\">NEXT 参考</a></p>"},{"title":"SI4432","date":"2017-03-25T17:06:11.000Z","_content":"- - -\n## 注意事项\n### SPI方面\n- - - \n**1. 速率不要太高，SI4432手册上说不要大于10MHZ**        \n**2. MOSI、MOSO、SCK三个引脚配置为复用功能推挽输出**\n**3.SPI的时钟极性配置为：同步时钟的空闲状态为 低电平**\n**4.SPI的时钟的第2个跳变沿数据被采样。（SPI_CPHA）**\n**5.片选信号软件控制自己定义一个IO空控制片选吧，方便.**\n<!--more-->\n\n### 硬件\n- - -\n**1. SI4432有3个GPIO，一般自己是不用的，但是依然要配置，因为这个和模块相关**\n**2. 建议还是不要把SDN直接接地，毕竟发现异常后还可以将SDN拉高在置低来实现硬件复位 _(重要)_**\n**3. SI4432的SDN引脚，为高时：芯片停止工作。为低时：芯片允许工作。**\n\n### 软件\n- - -\n**1. SPI配置好以后，向SI4432写数据注意地址最高位置1。 如：SPI1_ReadWriteByte(addr|0x80)**\n**2.SI4432主要三个状态：接收状态、发送状态、挂起状态。发送和接收之间可以相互转换、但是转换之前需要先进入挂起状态然后至少15ms之后再进入发送或者接收状态。程序while（1）之前最好开始就配置为挂起状态：SI4432_WriteReg(0x07, 0x01);**\n**3. 软件复位内部寄存器，不能立刻写入寄存器**\n**4.某些寄存器写完之后，必须延时一段时间，才能继续写其他的寄存器，否则死机**","source":"_posts/SI4432.md","raw":"---\ntitle: SI4432\ndate: 2017-03-26 01:06:11\ntags: [SI4432,433MHZ]\n---\n- - -\n## 注意事项\n### SPI方面\n- - - \n**1. 速率不要太高，SI4432手册上说不要大于10MHZ**        \n**2. MOSI、MOSO、SCK三个引脚配置为复用功能推挽输出**\n**3.SPI的时钟极性配置为：同步时钟的空闲状态为 低电平**\n**4.SPI的时钟的第2个跳变沿数据被采样。（SPI_CPHA）**\n**5.片选信号软件控制自己定义一个IO空控制片选吧，方便.**\n<!--more-->\n\n### 硬件\n- - -\n**1. SI4432有3个GPIO，一般自己是不用的，但是依然要配置，因为这个和模块相关**\n**2. 建议还是不要把SDN直接接地，毕竟发现异常后还可以将SDN拉高在置低来实现硬件复位 _(重要)_**\n**3. SI4432的SDN引脚，为高时：芯片停止工作。为低时：芯片允许工作。**\n\n### 软件\n- - -\n**1. SPI配置好以后，向SI4432写数据注意地址最高位置1。 如：SPI1_ReadWriteByte(addr|0x80)**\n**2.SI4432主要三个状态：接收状态、发送状态、挂起状态。发送和接收之间可以相互转换、但是转换之前需要先进入挂起状态然后至少15ms之后再进入发送或者接收状态。程序while（1）之前最好开始就配置为挂起状态：SI4432_WriteReg(0x07, 0x01);**\n**3. 软件复位内部寄存器，不能立刻写入寄存器**\n**4.某些寄存器写完之后，必须延时一段时间，才能继续写其他的寄存器，否则死机**","slug":"SI4432","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7q000mtns16bqdd04k","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"SPI方面\"><a href=\"#SPI方面\" class=\"headerlink\" title=\"SPI方面\"></a>SPI方面</h3><hr>\n<p><strong>1. 速率不要太高，SI4432手册上说不要大于10MHZ</strong><br><strong>2. MOSI、MOSO、SCK三个引脚配置为复用功能推挽输出</strong><br><strong>3.SPI的时钟极性配置为：同步时钟的空闲状态为 低电平</strong><br><strong>4.SPI的时钟的第2个跳变沿数据被采样。（SPI_CPHA）</strong><br><strong>5.片选信号软件控制自己定义一个IO空控制片选吧，方便.</strong><br><a id=\"more\"></a></p>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><hr>\n<p><strong>1. SI4432有3个GPIO，一般自己是不用的，但是依然要配置，因为这个和模块相关</strong><br><strong>2. 建议还是不要把SDN直接接地，毕竟发现异常后还可以将SDN拉高在置低来实现硬件复位 <em>(重要)</em></strong><br><strong>3. SI4432的SDN引脚，为高时：芯片停止工作。为低时：芯片允许工作。</strong></p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><hr>\n<p><strong>1. SPI配置好以后，向SI4432写数据注意地址最高位置1。 如：SPI1_ReadWriteByte(addr|0x80)</strong><br><strong>2.SI4432主要三个状态：接收状态、发送状态、挂起状态。发送和接收之间可以相互转换、但是转换之前需要先进入挂起状态然后至少15ms之后再进入发送或者接收状态。程序while（1）之前最好开始就配置为挂起状态：SI4432_WriteReg(0x07, 0x01);</strong><br><strong>3. 软件复位内部寄存器，不能立刻写入寄存器</strong><br><strong>4.某些寄存器写完之后，必须延时一段时间，才能继续写其他的寄存器，否则死机</strong></p>\n","excerpt":"<hr>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"SPI方面\"><a href=\"#SPI方面\" class=\"headerlink\" title=\"SPI方面\"></a>SPI方面</h3><hr>\n<p><strong>1. 速率不要太高，SI4432手册上说不要大于10MHZ</strong><br><strong>2. MOSI、MOSO、SCK三个引脚配置为复用功能推挽输出</strong><br><strong>3.SPI的时钟极性配置为：同步时钟的空闲状态为 低电平</strong><br><strong>4.SPI的时钟的第2个跳变沿数据被采样。（SPI_CPHA）</strong><br><strong>5.片选信号软件控制自己定义一个IO空控制片选吧，方便.</strong><br>","more":"</p>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><hr>\n<p><strong>1. SI4432有3个GPIO，一般自己是不用的，但是依然要配置，因为这个和模块相关</strong><br><strong>2. 建议还是不要把SDN直接接地，毕竟发现异常后还可以将SDN拉高在置低来实现硬件复位 <em>(重要)</em></strong><br><strong>3. SI4432的SDN引脚，为高时：芯片停止工作。为低时：芯片允许工作。</strong></p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><hr>\n<p><strong>1. SPI配置好以后，向SI4432写数据注意地址最高位置1。 如：SPI1_ReadWriteByte(addr|0x80)</strong><br><strong>2.SI4432主要三个状态：接收状态、发送状态、挂起状态。发送和接收之间可以相互转换、但是转换之前需要先进入挂起状态然后至少15ms之后再进入发送或者接收状态。程序while（1）之前最好开始就配置为挂起状态：SI4432_WriteReg(0x07, 0x01);</strong><br><strong>3. 软件复位内部寄存器，不能立刻写入寄存器</strong><br><strong>4.某些寄存器写完之后，必须延时一段时间，才能继续写其他的寄存器，否则死机</strong></p>"},{"title":"STM32 命名规则","date":"2017-03-25T17:36:11.000Z","_content":"- - -\n## 命名规范\n以stm32f103c8t7xx为例子\n\n![命名规范](http://upload-images.jianshu.io/upload_images/1736256-7d5b4a61ad2948ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!--more-->\n\n| Device |  description |\n| ------------- |\n| STM32 |基于ARM?的32位微控制器产品类型。 |\n| F |通用类型产品子系列 |\n|Device subfamily|101 = 基本型 102 = USB基本型 103 = 增强型 105/107 = 互联型|\n|Pin count| T=36 C=48 R=64 V=100 Z=144| \n|Flash Size|6=32 8=64 B=128 C=256 D=384 E=512 |\n|Package|H = BGA T = LQFP U = VFQFPN Y = WLCSP64|\n\n## STM32 产品类型和启动文件的选择\n```\n- startup_stm32f10x_ld_vl.s: for STM32 Low density Value line devices\n- startup_stm32f10x_ld.s: for STM32 Low density devices\n- startup_stm32f10x_md_vl.s: for STM32 Medium density Value line devices\n- startup_stm32f10x_md.s: for STM32 Medium density devices\n- startup_stm32f10x_hd.s: for STM32 High density devices\n- startup_stm32f10x_xl.s: for STM32 XL density devices\n- startup_stm32f10x_cl.s: for STM32 Connectivity line devices\ncl：互联型产品，stm32f105/107系列\nvl：超值型产品，stm32f100系列\nxl：超高密度产品，stm32f101/103系列\nld：低密度产品，FLASH小于64K\nmd：中等密度产品，FLASH=64 or 128\nhd：高密度产品，FLASH大于128\n```\n## STM32 Flash 页面大小划分\nSTM32有4种Flash module organization，分别是：\n- low-density devices(32KB，1KB/page)\n- medium-density devices(128KB，1KB/page)\n- high-density devices(512KB，2KB/page)\n- connectivity line devices(256KB，2KB/page)\n- XL-density(devices(1M，2KB/page)","source":"_posts/STM32 命名规则.md","raw":"---\ntitle: STM32 命名规则\ndate: 2017-03-26 01:36:11\ntags: [ST,STM32]\n---\n- - -\n## 命名规范\n以stm32f103c8t7xx为例子\n\n![命名规范](http://upload-images.jianshu.io/upload_images/1736256-7d5b4a61ad2948ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!--more-->\n\n| Device |  description |\n| ------------- |\n| STM32 |基于ARM?的32位微控制器产品类型。 |\n| F |通用类型产品子系列 |\n|Device subfamily|101 = 基本型 102 = USB基本型 103 = 增强型 105/107 = 互联型|\n|Pin count| T=36 C=48 R=64 V=100 Z=144| \n|Flash Size|6=32 8=64 B=128 C=256 D=384 E=512 |\n|Package|H = BGA T = LQFP U = VFQFPN Y = WLCSP64|\n\n## STM32 产品类型和启动文件的选择\n```\n- startup_stm32f10x_ld_vl.s: for STM32 Low density Value line devices\n- startup_stm32f10x_ld.s: for STM32 Low density devices\n- startup_stm32f10x_md_vl.s: for STM32 Medium density Value line devices\n- startup_stm32f10x_md.s: for STM32 Medium density devices\n- startup_stm32f10x_hd.s: for STM32 High density devices\n- startup_stm32f10x_xl.s: for STM32 XL density devices\n- startup_stm32f10x_cl.s: for STM32 Connectivity line devices\ncl：互联型产品，stm32f105/107系列\nvl：超值型产品，stm32f100系列\nxl：超高密度产品，stm32f101/103系列\nld：低密度产品，FLASH小于64K\nmd：中等密度产品，FLASH=64 or 128\nhd：高密度产品，FLASH大于128\n```\n## STM32 Flash 页面大小划分\nSTM32有4种Flash module organization，分别是：\n- low-density devices(32KB，1KB/page)\n- medium-density devices(128KB，1KB/page)\n- high-density devices(512KB，2KB/page)\n- connectivity line devices(256KB，2KB/page)\n- XL-density(devices(1M，2KB/page)","slug":"STM32 命名规则","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7s000otns1xdvsq6v3","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>以stm32f103c8t7xx为例子</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-7d5b4a61ad2948ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"命名规范\"></p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th>Device</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>STM32</td>\n<td>基于ARM?的32位微控制器产品类型。</td>\n</tr>\n<tr>\n<td>F</td>\n<td>通用类型产品子系列</td>\n</tr>\n<tr>\n<td>Device subfamily</td>\n<td>101 = 基本型 102 = USB基本型 103 = 增强型 105/107 = 互联型</td>\n</tr>\n<tr>\n<td>Pin count</td>\n<td>T=36 C=48 R=64 V=100 Z=144</td>\n</tr>\n<tr>\n<td>Flash Size</td>\n<td>6=32 8=64 B=128 C=256 D=384 E=512</td>\n</tr>\n<tr>\n<td>Package</td>\n<td>H = BGA T = LQFP U = VFQFPN Y = WLCSP64</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"STM32-产品类型和启动文件的选择\"><a href=\"#STM32-产品类型和启动文件的选择\" class=\"headerlink\" title=\"STM32 产品类型和启动文件的选择\"></a>STM32 产品类型和启动文件的选择</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- startup_stm32f10x_ld_vl.s: for STM32 Low density Value line devices</div><div class=\"line\">- startup_stm32f10x_ld.s: for STM32 Low density devices</div><div class=\"line\">- startup_stm32f10x_md_vl.s: for STM32 Medium density Value line devices</div><div class=\"line\">- startup_stm32f10x_md.s: for STM32 Medium density devices</div><div class=\"line\">- startup_stm32f10x_hd.s: for STM32 High density devices</div><div class=\"line\">- startup_stm32f10x_xl.s: for STM32 XL density devices</div><div class=\"line\">- startup_stm32f10x_cl.s: for STM32 Connectivity line devices</div><div class=\"line\">cl：互联型产品，stm32f105/107系列</div><div class=\"line\">vl：超值型产品，stm32f100系列</div><div class=\"line\">xl：超高密度产品，stm32f101/103系列</div><div class=\"line\">ld：低密度产品，FLASH小于64K</div><div class=\"line\">md：中等密度产品，FLASH=64 or 128</div><div class=\"line\">hd：高密度产品，FLASH大于128</div></pre></td></tr></table></figure>\n<h2 id=\"STM32-Flash-页面大小划分\"><a href=\"#STM32-Flash-页面大小划分\" class=\"headerlink\" title=\"STM32 Flash 页面大小划分\"></a>STM32 Flash 页面大小划分</h2><p>STM32有4种Flash module organization，分别是：</p>\n<ul>\n<li>low-density devices(32KB，1KB/page)</li>\n<li>medium-density devices(128KB，1KB/page)</li>\n<li>high-density devices(512KB，2KB/page)</li>\n<li>connectivity line devices(256KB，2KB/page)</li>\n<li>XL-density(devices(1M，2KB/page)</li>\n</ul>\n","excerpt":"<hr>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>以stm32f103c8t7xx为例子</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-7d5b4a61ad2948ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"命名规范\"></p>","more":"<table>\n<thead>\n<tr>\n<th>Device</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>STM32</td>\n<td>基于ARM?的32位微控制器产品类型。</td>\n</tr>\n<tr>\n<td>F</td>\n<td>通用类型产品子系列</td>\n</tr>\n<tr>\n<td>Device subfamily</td>\n<td>101 = 基本型 102 = USB基本型 103 = 增强型 105/107 = 互联型</td>\n</tr>\n<tr>\n<td>Pin count</td>\n<td>T=36 C=48 R=64 V=100 Z=144</td>\n</tr>\n<tr>\n<td>Flash Size</td>\n<td>6=32 8=64 B=128 C=256 D=384 E=512</td>\n</tr>\n<tr>\n<td>Package</td>\n<td>H = BGA T = LQFP U = VFQFPN Y = WLCSP64</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"STM32-产品类型和启动文件的选择\"><a href=\"#STM32-产品类型和启动文件的选择\" class=\"headerlink\" title=\"STM32 产品类型和启动文件的选择\"></a>STM32 产品类型和启动文件的选择</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- startup_stm32f10x_ld_vl.s: for STM32 Low density Value line devices</div><div class=\"line\">- startup_stm32f10x_ld.s: for STM32 Low density devices</div><div class=\"line\">- startup_stm32f10x_md_vl.s: for STM32 Medium density Value line devices</div><div class=\"line\">- startup_stm32f10x_md.s: for STM32 Medium density devices</div><div class=\"line\">- startup_stm32f10x_hd.s: for STM32 High density devices</div><div class=\"line\">- startup_stm32f10x_xl.s: for STM32 XL density devices</div><div class=\"line\">- startup_stm32f10x_cl.s: for STM32 Connectivity line devices</div><div class=\"line\">cl：互联型产品，stm32f105/107系列</div><div class=\"line\">vl：超值型产品，stm32f100系列</div><div class=\"line\">xl：超高密度产品，stm32f101/103系列</div><div class=\"line\">ld：低密度产品，FLASH小于64K</div><div class=\"line\">md：中等密度产品，FLASH=64 or 128</div><div class=\"line\">hd：高密度产品，FLASH大于128</div></pre></td></tr></table></figure>\n<h2 id=\"STM32-Flash-页面大小划分\"><a href=\"#STM32-Flash-页面大小划分\" class=\"headerlink\" title=\"STM32 Flash 页面大小划分\"></a>STM32 Flash 页面大小划分</h2><p>STM32有4种Flash module organization，分别是：</p>\n<ul>\n<li>low-density devices(32KB，1KB/page)</li>\n<li>medium-density devices(128KB，1KB/page)</li>\n<li>high-density devices(512KB，2KB/page)</li>\n<li>connectivity line devices(256KB，2KB/page)</li>\n<li>XL-density(devices(1M，2KB/page)</li>\n</ul>"},{"title":"STM32---ADC","date":"2017-03-25T17:37:11.000Z","_content":"- - -\n## 引脚\n![STM32 ADC 引脚][1]\n## 工作流程\n1. **ADC通常要与DMA一起使用 这里只是简单的用库配置ADC 不断扫描来实现ADC的应用。**\n** 首先配置GPIO与ADC的时钟：**\n\n<!--more-->\n\n```\nADC_InitTypeDef  ADC_InitStructure; \nGPIO_InitTypeDef GPIO_InitStructure;\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); \nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);\nGPIO_InitStructure.GPIO_Pin  =GPIO_Pin_1; \nGPIO_InitStructure.GPIO_Mode =GPIO_Mode_AIN; \nGPIO_Init(GPIOB,&GPIO_InitStructure); //默认速度为两兆\n```\n2 .**配置ADC的运行：**\n```\nADC_InitStructure.ADC_Mode = ADC_Mode_Independent;  //独立模式 \nADC_InitStructure.ADC_ScanConvMode      =DISABLE;      //连续多通道模式 \nADC_InitStructure.ADC_ContinuousConvMode =ENABLE;      //连续转换 \nADC_InitStructure.ADC_ExternalTrigConv  = ADC_ExternalTrigConv_None; //转换不受外界决定\n ADC_InitStructure.ADC_DataAlign         =ADC_DataAlign_Right;   //右对齐 \nADC_InitStructure.ADC_NbrOfChannel      =1;       //扫描通道数\n ADC_Init(ADC1,&ADC_InitStructure);\n ADC_RegularChannelConfig(ADC1,ADC_Channel_9, 1,ADC_SampleTime_1Cycles5); //通道X,采样时间为1.5周期,1代表规则通道第1个这个1是啥意思我不太清楚只有是1的时候我的ADC才正常。\n ADC_Cmd  (ADC1,ENABLE);         //使能或者失能指定的ADC\n ADC_SoftwareStartConvCmd(ADC1,ENABLE); //使能或者失能指定的ADC的软件转换启动功能\n```\n**注意：为了能够正确地配置每一个ADC通道，用户在调用ADC_Init()之后，必须调用ADC_ChannelConfig()来配置每个所使用通道的转换次序和采样时间。**\n**然后就是不停的读；**\n```\nu16 TestAdc(void) \n{ \nu16 adc; \nwhile(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET); //检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位 \nadc=ADC_GetConversionValue(ADC1);\nreturnadc;//返回最近一次ADCx规则组的转换结果\n }\n```\n\n[1]:http://upload-images.jianshu.io/upload_images/1736256-98eeb51f671b5b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","source":"_posts/STM32---ADC.md","raw":"---\ntitle: STM32---ADC\ndate: 2017-03-26 01:37:11\ntags: [ST,STM32,ADC]\n---\n- - -\n## 引脚\n![STM32 ADC 引脚][1]\n## 工作流程\n1. **ADC通常要与DMA一起使用 这里只是简单的用库配置ADC 不断扫描来实现ADC的应用。**\n** 首先配置GPIO与ADC的时钟：**\n\n<!--more-->\n\n```\nADC_InitTypeDef  ADC_InitStructure; \nGPIO_InitTypeDef GPIO_InitStructure;\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); \nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);\nGPIO_InitStructure.GPIO_Pin  =GPIO_Pin_1; \nGPIO_InitStructure.GPIO_Mode =GPIO_Mode_AIN; \nGPIO_Init(GPIOB,&GPIO_InitStructure); //默认速度为两兆\n```\n2 .**配置ADC的运行：**\n```\nADC_InitStructure.ADC_Mode = ADC_Mode_Independent;  //独立模式 \nADC_InitStructure.ADC_ScanConvMode      =DISABLE;      //连续多通道模式 \nADC_InitStructure.ADC_ContinuousConvMode =ENABLE;      //连续转换 \nADC_InitStructure.ADC_ExternalTrigConv  = ADC_ExternalTrigConv_None; //转换不受外界决定\n ADC_InitStructure.ADC_DataAlign         =ADC_DataAlign_Right;   //右对齐 \nADC_InitStructure.ADC_NbrOfChannel      =1;       //扫描通道数\n ADC_Init(ADC1,&ADC_InitStructure);\n ADC_RegularChannelConfig(ADC1,ADC_Channel_9, 1,ADC_SampleTime_1Cycles5); //通道X,采样时间为1.5周期,1代表规则通道第1个这个1是啥意思我不太清楚只有是1的时候我的ADC才正常。\n ADC_Cmd  (ADC1,ENABLE);         //使能或者失能指定的ADC\n ADC_SoftwareStartConvCmd(ADC1,ENABLE); //使能或者失能指定的ADC的软件转换启动功能\n```\n**注意：为了能够正确地配置每一个ADC通道，用户在调用ADC_Init()之后，必须调用ADC_ChannelConfig()来配置每个所使用通道的转换次序和采样时间。**\n**然后就是不停的读；**\n```\nu16 TestAdc(void) \n{ \nu16 adc; \nwhile(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET); //检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位 \nadc=ADC_GetConversionValue(ADC1);\nreturnadc;//返回最近一次ADCx规则组的转换结果\n }\n```\n\n[1]:http://upload-images.jianshu.io/upload_images/1736256-98eeb51f671b5b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","slug":"STM32---ADC","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7u000qtns124myjlcb","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"引脚\"><a href=\"#引脚\" class=\"headerlink\" title=\"引脚\"></a>引脚</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-98eeb51f671b5b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM32 ADC 引脚\"></p>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol>\n<li><strong>ADC通常要与DMA一起使用 这里只是简单的用库配置ADC 不断扫描来实现ADC的应用。</strong><br><strong> 首先配置GPIO与ADC的时钟：</strong></li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADC_InitTypeDef  ADC_InitStructure; </div><div class=\"line\">GPIO_InitTypeDef GPIO_InitStructure;</div><div class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); </div><div class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</div><div class=\"line\">GPIO_InitStructure.GPIO_Pin  =GPIO_Pin_1; </div><div class=\"line\">GPIO_InitStructure.GPIO_Mode =GPIO_Mode_AIN; </div><div class=\"line\">GPIO_Init(GPIOB,&amp;GPIO_InitStructure); //默认速度为两兆</div></pre></td></tr></table></figure>\n<p>2 .<strong>配置ADC的运行：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;  //独立模式 </div><div class=\"line\">ADC_InitStructure.ADC_ScanConvMode      =DISABLE;      //连续多通道模式 </div><div class=\"line\">ADC_InitStructure.ADC_ContinuousConvMode =ENABLE;      //连续转换 </div><div class=\"line\">ADC_InitStructure.ADC_ExternalTrigConv  = ADC_ExternalTrigConv_None; //转换不受外界决定</div><div class=\"line\"> ADC_InitStructure.ADC_DataAlign         =ADC_DataAlign_Right;   //右对齐 </div><div class=\"line\">ADC_InitStructure.ADC_NbrOfChannel      =1;       //扫描通道数</div><div class=\"line\"> ADC_Init(ADC1,&amp;ADC_InitStructure);</div><div class=\"line\"> ADC_RegularChannelConfig(ADC1,ADC_Channel_9, 1,ADC_SampleTime_1Cycles5); //通道X,采样时间为1.5周期,1代表规则通道第1个这个1是啥意思我不太清楚只有是1的时候我的ADC才正常。</div><div class=\"line\"> ADC_Cmd  (ADC1,ENABLE);         //使能或者失能指定的ADC</div><div class=\"line\"> ADC_SoftwareStartConvCmd(ADC1,ENABLE); //使能或者失能指定的ADC的软件转换启动功能</div></pre></td></tr></table></figure></p>\n<p><strong>注意：为了能够正确地配置每一个ADC通道，用户在调用ADC_Init()之后，必须调用ADC_ChannelConfig()来配置每个所使用通道的转换次序和采样时间。</strong><br><strong>然后就是不停的读；</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">u16 TestAdc(void) </div><div class=\"line\">&#123; </div><div class=\"line\">u16 adc; </div><div class=\"line\">while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET); //检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位 </div><div class=\"line\">adc=ADC_GetConversionValue(ADC1);</div><div class=\"line\">returnadc;//返回最近一次ADCx规则组的转换结果</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<hr>\n<h2 id=\"引脚\"><a href=\"#引脚\" class=\"headerlink\" title=\"引脚\"></a>引脚</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-98eeb51f671b5b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM32 ADC 引脚\"></p>\n<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol>\n<li><strong>ADC通常要与DMA一起使用 这里只是简单的用库配置ADC 不断扫描来实现ADC的应用。</strong><br><strong> 首先配置GPIO与ADC的时钟：</strong></li>\n</ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADC_InitTypeDef  ADC_InitStructure; </div><div class=\"line\">GPIO_InitTypeDef GPIO_InitStructure;</div><div class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); </div><div class=\"line\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</div><div class=\"line\">GPIO_InitStructure.GPIO_Pin  =GPIO_Pin_1; </div><div class=\"line\">GPIO_InitStructure.GPIO_Mode =GPIO_Mode_AIN; </div><div class=\"line\">GPIO_Init(GPIOB,&amp;GPIO_InitStructure); //默认速度为两兆</div></pre></td></tr></table></figure>\n<p>2 .<strong>配置ADC的运行：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;  //独立模式 </div><div class=\"line\">ADC_InitStructure.ADC_ScanConvMode      =DISABLE;      //连续多通道模式 </div><div class=\"line\">ADC_InitStructure.ADC_ContinuousConvMode =ENABLE;      //连续转换 </div><div class=\"line\">ADC_InitStructure.ADC_ExternalTrigConv  = ADC_ExternalTrigConv_None; //转换不受外界决定</div><div class=\"line\"> ADC_InitStructure.ADC_DataAlign         =ADC_DataAlign_Right;   //右对齐 </div><div class=\"line\">ADC_InitStructure.ADC_NbrOfChannel      =1;       //扫描通道数</div><div class=\"line\"> ADC_Init(ADC1,&amp;ADC_InitStructure);</div><div class=\"line\"> ADC_RegularChannelConfig(ADC1,ADC_Channel_9, 1,ADC_SampleTime_1Cycles5); //通道X,采样时间为1.5周期,1代表规则通道第1个这个1是啥意思我不太清楚只有是1的时候我的ADC才正常。</div><div class=\"line\"> ADC_Cmd  (ADC1,ENABLE);         //使能或者失能指定的ADC</div><div class=\"line\"> ADC_SoftwareStartConvCmd(ADC1,ENABLE); //使能或者失能指定的ADC的软件转换启动功能</div></pre></td></tr></table></figure></p>\n<p><strong>注意：为了能够正确地配置每一个ADC通道，用户在调用ADC_Init()之后，必须调用ADC_ChannelConfig()来配置每个所使用通道的转换次序和采样时间。</strong><br><strong>然后就是不停的读；</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">u16 TestAdc(void) </div><div class=\"line\">&#123; </div><div class=\"line\">u16 adc; </div><div class=\"line\">while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET); //检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位 </div><div class=\"line\">adc=ADC_GetConversionValue(ADC1);</div><div class=\"line\">returnadc;//返回最近一次ADCx规则组的转换结果</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>"},{"title":"STM8 命名规则","date":"2017-03-25T17:16:11.000Z","_content":"- - -\n**STM8命名规则示列：STM8S005K6T6Cxxx**代表的意义为： 超值型 STM8内核（可以理解为8位51增强型内核）MCU,LQFP-32封装，32KB FLASH容量，温度范围-40℃-85℃；（工业级）\n**具体分解如下：**\n\n<!--more-->\n\n|**STM8**|**S**|**005**|**K**|**6**|**T**|**6**|**C**|**XXX**|\n|-|-|\n|1|2|3|4|5|6|7|8|9\n\n**1.产品系列:**\nSTM8单片机包括以下几个系列：\nSTM8： 8位MCU； STM8A：8位自动MCU； STM8T：8位触摸感应MCU； STM8TL：8位触摸感应低电压MCU；\n**2.产品类型:**\nS：标准型； L：低电压型；\n**3.产品子系列：**\n005：超值型STM8S005X，速度16MHz； 051：超低压ULTRA串口； 052：带LCD； 007：ARM3超值型，速度24 MHz； 00x：超值型； 003：子系列； 105：基本型STM8S1005X； 10X：基本型； 103：子系列； 207：中间层的外围设定; 208：所有层的外围设定; 903：903子系列; 151：超低压ULTRA串口; 152：超低压ULTRA串口带LCD; 101：子系列；\n**4.管脚数**\nF：20PIN；G：28PIN；K：32PIN；S：44PIN；C：48PIN；R：64PIN；M：80PIN；\n**5.Flash存存容量**\n1：2KB flash；（小容量）; 2：4KB flash；（小容量）; 3：8KB flash；（小容量）; 4：16KB flash；（小容量）; 6：32KB flash；（小容量）; 8：64KB flash；（中容量）; B：128KB flash；（中容量）; C：256KB flash；（大容量）; D：384KB flash；（大容量）; E：512KB flash；（大容量）; F：768KB flash；（大容量）; G：1MKB flash；（大容量）\n**6.封装**\nT：LQFP； P：TSSOP； U：UFQFPN； B：SDIP； M：SO； Y：WLCSP；\n**7.温度范围**\n3：-40℃-125℃；（工业级）; 6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）\n**8.包装尺寸**\n无特性：0.5mm；C：0.8mm; A：0.55mm的UFQFPN；Blank：0.5mm或0.65mm;\n低压101系列的A：COMP_REF可变；Blank：COMP_REF不可变;\n低压162系列的D：VDD的范围为1.8V-3.6V，且BOR使能； Blank：VDD的范围为1.8V-3.6V，且BOR不使能;\n**9.包装方式：**\nTR：带卷；无特性：盘装；\n- - -\n![STM8 MCU 选型列表](http://upload-images.jianshu.io/upload_images/1736256-f177ef8447b808f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![STM8L101F3P6](http://upload-images.jianshu.io/upload_images/1736256-d448c89177176b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![原理图](http://upload-images.jianshu.io/upload_images/1736256-37063209962e156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/STM8 命名规则.md","raw":"---\ntitle: STM8 命名规则\ndate: 2017-03-26 01:16:11\ntags: [ST,STM8]\n---\n- - -\n**STM8命名规则示列：STM8S005K6T6Cxxx**代表的意义为： 超值型 STM8内核（可以理解为8位51增强型内核）MCU,LQFP-32封装，32KB FLASH容量，温度范围-40℃-85℃；（工业级）\n**具体分解如下：**\n\n<!--more-->\n\n|**STM8**|**S**|**005**|**K**|**6**|**T**|**6**|**C**|**XXX**|\n|-|-|\n|1|2|3|4|5|6|7|8|9\n\n**1.产品系列:**\nSTM8单片机包括以下几个系列：\nSTM8： 8位MCU； STM8A：8位自动MCU； STM8T：8位触摸感应MCU； STM8TL：8位触摸感应低电压MCU；\n**2.产品类型:**\nS：标准型； L：低电压型；\n**3.产品子系列：**\n005：超值型STM8S005X，速度16MHz； 051：超低压ULTRA串口； 052：带LCD； 007：ARM3超值型，速度24 MHz； 00x：超值型； 003：子系列； 105：基本型STM8S1005X； 10X：基本型； 103：子系列； 207：中间层的外围设定; 208：所有层的外围设定; 903：903子系列; 151：超低压ULTRA串口; 152：超低压ULTRA串口带LCD; 101：子系列；\n**4.管脚数**\nF：20PIN；G：28PIN；K：32PIN；S：44PIN；C：48PIN；R：64PIN；M：80PIN；\n**5.Flash存存容量**\n1：2KB flash；（小容量）; 2：4KB flash；（小容量）; 3：8KB flash；（小容量）; 4：16KB flash；（小容量）; 6：32KB flash；（小容量）; 8：64KB flash；（中容量）; B：128KB flash；（中容量）; C：256KB flash；（大容量）; D：384KB flash；（大容量）; E：512KB flash；（大容量）; F：768KB flash；（大容量）; G：1MKB flash；（大容量）\n**6.封装**\nT：LQFP； P：TSSOP； U：UFQFPN； B：SDIP； M：SO； Y：WLCSP；\n**7.温度范围**\n3：-40℃-125℃；（工业级）; 6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）\n**8.包装尺寸**\n无特性：0.5mm；C：0.8mm; A：0.55mm的UFQFPN；Blank：0.5mm或0.65mm;\n低压101系列的A：COMP_REF可变；Blank：COMP_REF不可变;\n低压162系列的D：VDD的范围为1.8V-3.6V，且BOR使能； Blank：VDD的范围为1.8V-3.6V，且BOR不使能;\n**9.包装方式：**\nTR：带卷；无特性：盘装；\n- - -\n![STM8 MCU 选型列表](http://upload-images.jianshu.io/upload_images/1736256-f177ef8447b808f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![STM8L101F3P6](http://upload-images.jianshu.io/upload_images/1736256-d448c89177176b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![原理图](http://upload-images.jianshu.io/upload_images/1736256-37063209962e156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"STM8 命名规则","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7v000ttns13yatke2e","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<p><strong>STM8命名规则示列：STM8S005K6T6Cxxx</strong>代表的意义为： 超值型 STM8内核（可以理解为8位51增强型内核）MCU,LQFP-32封装，32KB FLASH容量，温度范围-40℃-85℃；（工业级）<br><strong>具体分解如下：</strong></p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th><strong>STM8</strong></th>\n<th><strong>S</strong></th>\n<th><strong>005</strong></th>\n<th><strong>K</strong></th>\n<th><strong>6</strong></th>\n<th><strong>T</strong></th>\n<th><strong>6</strong></th>\n<th><strong>C</strong></th>\n<th><strong>XXX</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p><strong>1.产品系列:</strong><br>STM8单片机包括以下几个系列：<br>STM8： 8位MCU； STM8A：8位自动MCU； STM8T：8位触摸感应MCU； STM8TL：8位触摸感应低电压MCU；<br><strong>2.产品类型:</strong><br>S：标准型； L：低电压型；<br><strong>3.产品子系列：</strong><br>005：超值型STM8S005X，速度16MHz； 051：超低压ULTRA串口； 052：带LCD； 007：ARM3超值型，速度24 MHz； 00x：超值型； 003：子系列； 105：基本型STM8S1005X； 10X：基本型； 103：子系列； 207：中间层的外围设定; 208：所有层的外围设定; 903：903子系列; 151：超低压ULTRA串口; 152：超低压ULTRA串口带LCD; 101：子系列；<br><strong>4.管脚数</strong><br>F：20PIN；G：28PIN；K：32PIN；S：44PIN；C：48PIN；R：64PIN；M：80PIN；<br><strong>5.Flash存存容量</strong><br>1：2KB flash；（小容量）; 2：4KB flash；（小容量）; 3：8KB flash；（小容量）; 4：16KB flash；（小容量）; 6：32KB flash；（小容量）; 8：64KB flash；（中容量）; B：128KB flash；（中容量）; C：256KB flash；（大容量）; D：384KB flash；（大容量）; E：512KB flash；（大容量）; F：768KB flash；（大容量）; G：1MKB flash；（大容量）<br><strong>6.封装</strong><br>T：LQFP； P：TSSOP； U：UFQFPN； B：SDIP； M：SO； Y：WLCSP；<br><strong>7.温度范围</strong><br>3：-40℃-125℃；（工业级）; 6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）<br><strong>8.包装尺寸</strong><br>无特性：0.5mm；C：0.8mm; A：0.55mm的UFQFPN；Blank：0.5mm或0.65mm;<br>低压101系列的A：COMP_REF可变；Blank：COMP_REF不可变;<br>低压162系列的D：VDD的范围为1.8V-3.6V，且BOR使能； Blank：VDD的范围为1.8V-3.6V，且BOR不使能;<br><strong>9.包装方式：</strong><br>TR：带卷；无特性：盘装；</p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-f177ef8447b808f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM8 MCU 选型列表\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d448c89177176b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM8L101F3P6\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-37063209962e156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"原理图\"></p>\n","excerpt":"<hr>\n<p><strong>STM8命名规则示列：STM8S005K6T6Cxxx</strong>代表的意义为： 超值型 STM8内核（可以理解为8位51增强型内核）MCU,LQFP-32封装，32KB FLASH容量，温度范围-40℃-85℃；（工业级）<br><strong>具体分解如下：</strong></p>","more":"<table>\n<thead>\n<tr>\n<th><strong>STM8</strong></th>\n<th><strong>S</strong></th>\n<th><strong>005</strong></th>\n<th><strong>K</strong></th>\n<th><strong>6</strong></th>\n<th><strong>T</strong></th>\n<th><strong>6</strong></th>\n<th><strong>C</strong></th>\n<th><strong>XXX</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p><strong>1.产品系列:</strong><br>STM8单片机包括以下几个系列：<br>STM8： 8位MCU； STM8A：8位自动MCU； STM8T：8位触摸感应MCU； STM8TL：8位触摸感应低电压MCU；<br><strong>2.产品类型:</strong><br>S：标准型； L：低电压型；<br><strong>3.产品子系列：</strong><br>005：超值型STM8S005X，速度16MHz； 051：超低压ULTRA串口； 052：带LCD； 007：ARM3超值型，速度24 MHz； 00x：超值型； 003：子系列； 105：基本型STM8S1005X； 10X：基本型； 103：子系列； 207：中间层的外围设定; 208：所有层的外围设定; 903：903子系列; 151：超低压ULTRA串口; 152：超低压ULTRA串口带LCD; 101：子系列；<br><strong>4.管脚数</strong><br>F：20PIN；G：28PIN；K：32PIN；S：44PIN；C：48PIN；R：64PIN；M：80PIN；<br><strong>5.Flash存存容量</strong><br>1：2KB flash；（小容量）; 2：4KB flash；（小容量）; 3：8KB flash；（小容量）; 4：16KB flash；（小容量）; 6：32KB flash；（小容量）; 8：64KB flash；（中容量）; B：128KB flash；（中容量）; C：256KB flash；（大容量）; D：384KB flash；（大容量）; E：512KB flash；（大容量）; F：768KB flash；（大容量）; G：1MKB flash；（大容量）<br><strong>6.封装</strong><br>T：LQFP； P：TSSOP； U：UFQFPN； B：SDIP； M：SO； Y：WLCSP；<br><strong>7.温度范围</strong><br>3：-40℃-125℃；（工业级）; 6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）<br><strong>8.包装尺寸</strong><br>无特性：0.5mm；C：0.8mm; A：0.55mm的UFQFPN；Blank：0.5mm或0.65mm;<br>低压101系列的A：COMP_REF可变；Blank：COMP_REF不可变;<br>低压162系列的D：VDD的范围为1.8V-3.6V，且BOR使能； Blank：VDD的范围为1.8V-3.6V，且BOR不使能;<br><strong>9.包装方式：</strong><br>TR：带卷；无特性：盘装；</p>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-f177ef8447b808f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM8 MCU 选型列表\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-d448c89177176b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"STM8L101F3P6\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-37063209962e156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"原理图\"></p>"},{"title":"tcpDump","date":"2017-07-01T11:05:11.000Z","top":1,"_content":"- - -\n## Linux 混杂模式设置\n**1. 查看网卡混杂模式状态**\n```\nalex@ubuntu:~$ ifconfig eth0\n\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1735 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1780 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1451555 (1.4 MB)  TX bytes:193802 (193.8 KB)\n```\n<!--more-->\n\n**2. 启动混杂模式**\n主要是这个:**PROMISC**\n```\nalex@ubuntu:~$ sudo ifconfig eth0 promisc\nalex@ubuntu:~$ ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1\n          RX packets:1742 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1782 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1452336 (1.4 MB)  TX bytes:194198 (194.1 KB)\n```\n**3. 关闭混杂模式**\n```\nalex@ubuntu:~$ sudo ifconfig eth0 -promisc\nalex@ubuntu:~$ ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1766 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1796 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1455202 (1.4 MB)  TX bytes:195410 (195.4 KB)\n```\n## TcpDump\n>- tcpdump存在于基本的FreeBSD系统中，由于它需要将网络界面设置为混杂模式，普通用户不能正常执行，但具备root权限的用户可以直接执行它来获取网络上的信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。\n- 显然为了安全起见，不用作网络管理用途的计算机上不应该运行这一类的网络分析软件，为了屏蔽它们，可以屏蔽内核中的bpfilter伪设备。一般情况下网络硬件和TCP/IP堆栈不支持接收或发送与本计算机无关的数据包，为了接收这些数据包，就必须使用网卡的混杂模式，并绕过标准的TCP/IP堆栈才行。在FreeBSD下，这就需要内核支持伪设备bpfilter。因此，在内核中取消bpfilter支持，就能屏蔽tcpdump之类的网络分析工具。\n- 并且当网卡被设置为混杂模式时，系统会在控制台和日志文件中留下记录，提醒管理员留意这台系统是否被用作攻击同网络的其他计算机的跳板。\n### 命令格式\n\ntcpdump采用命令行方式，它的命令格式为：\n    tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]\n　　　　　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]\n　　　　　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]\n　　　　　　　　　　\n### 命令参数\n\n|命令字|描述|\n|:----:|---|\n|-a |　　　将网络地址和广播地址转变成名字；\n|-d |　　　将匹配信息包的代码以人们能够理解的汇编格式给出；\n|-dd| 　　 将匹配信息包的代码以c语言程序段的格式给出；\n|-ddd|     将匹配信息包的代码以十进制的形式给出；\n|-e| 　　　在输出行打印出数据链路层的头部信息；\n|-f| 　　　将外部的Internet地址以数字的形式打印出来；\n|-l| 　　　使标准输出变为缓冲行形式；\n|-n| 　　　不把网络地址转换成名字；\n|-t| 　　　在输出的每一行不打印时间戳；\n|-v| 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；\n|-vv| 　　 输出详细的报文信息；\n|-c| 　　　在收到指定的包的数目后，tcpdump就会停止；\n|-F| 　　　从指定的文件中读取表达式,忽略其它的表达式；\n|-i| 　　　指定监听的网络接口；\n|-r| 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；\n|-w| 　　　直接将包写入文件中，并不分析和打印出来；\n|-T| 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）\n\n###  tcpdump的表达式介绍\n\n>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。在表达式中一般如下几种类型的关键字。\n\n#### 第一种是关于类型的关键字\n主要包括host，net，port, 例如 host 210.27.48.2，指明210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23指明端口号是23。如果没有指定类型，缺省的类型是host.\n\n#### 第二种是确定传输方向的关键字\n主要包括src , dst ,dst or src, dst and src,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。\n\n#### 第三种是协议的关键字\n主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是\"ether\"的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。\n\n#### 其他关键字\n除了这三种类型的关键字之外，其他重要的关键字如下：gateway,broadcast,less,greater,还有三种逻辑运算，取非运算是 'not ' '! ',与运算是'and','&&';或运算 是'or','││'；这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。\n\n- A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：\n```\n#tcpdump host 210.27.48.1\n```\n\n- B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：(在命令行中使用括号时，一定要添加'\\')\n```\n#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)\n```\n\n- C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：\n```\n#tcpdump tcp port 23 host 210.27.48.1\n```\n\n- E 对本机的udp 123 端口进行监视 123 为ntp的服务端口\n```\n# tcpdump udp port 123\n```\n\n- F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：\n```\n#tcpdump -i eth0 src host hostname\n```\n\n- G 下面的命令可以监视所有送到主机hostname的数据包：\n```\n#tcpdump -i eth0 dst host hostname\n```\n\n- H 我们还可以监视通过指定网关的数据包：\n```\n#tcpdump -i eth0 gateway Gatewayname\n```\n- I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：\n```\n#tcpdump -i eth0 host hostname and port 80\n```\n\n- J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：\n```\n#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)\n```\n\n- L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：\n```\n#tcpdump tcp port 23 host 210.27.48.1\n```\n\n### tcpdump的输出结果介绍\n下面我们介绍几种典型的tcpdump命令的输出信息\n\n- A,数据链路层头信息\n使用命令:\n```\n#tcpdump --e host ice\n```\nice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A；\nH219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；\n上一条命令的输出结果如下所示：\n```\n21:50:12.847509 eth0 < 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 > ice.telne\nt 0:0(0) ack 22535 win 8760 (DF)\n```\n    分析：21：50：12是显示的时间， 847509是ID号，eth0 <表示从网络接口eth0 接受该数据包，eth0>表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包.0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60是数据包的长度, h219.33357 > ice.telnet表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.\n\n- B,ARP包的TCPDUMP输出信息\n\n使用命令:\n```\n#tcpdump arp\n```\n得到的输出结果是：\n```\n22:32:42.802509 eth0 > arp who-has route tell ice (0:90:27:58:af:1a)\n22:32:42.802902 eth0 < arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)\n```\n\n    分析: 22:32:42是时间戳, 802509是ID号, eth0 >表明从主机发出该数据包, arp表明是ARP请求包,who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。0:90:27:58:af:1a是主机ICE的MAC地址。\n\n- C,TCP包的输出信息\n\n用TCPDUMP捕获的TCP包的一般输出信息是：\n```\nsrc > dst: flags data-seqno ack window urgent options\n```\n    src> dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R(RST) \".\" (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号,window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.\n\n- D,UDP包的输出信息\n\n用TCPDUMP捕获的UDP包的一般输出信息是：\n```\nroute.port1 > ice.port2: udp lenth\n```\n\n    UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth\n\n### 辅助工具\n\n- 想查看TCP或者UDP端口使用情况，使用\n```\n#netstat -anp\n```\n- 如果有些进程看不见，如只显示”-”，可以尝试\n```\n#sudo netstat -anp\n```\n\n- 如果想看某个端口的信息，使用lsof命令，如：\n```\n#sudo lsof -i :631\n```\n\n```\n-bash-3.00# netstat -tln\n```\n\n```\nnetstat -tln #命令是用来查看linux的端口使用情况\n```\n- 启动ftp端口\n```\n# /xtc/init.d/vsftp start\n```\n\n看文件/etc/services\nnetstat\n\n查看已经连接的服务端口（ESTABLISHED）\n\n- 查看所有的服务端口（LISTEN，ESTABLISHED）\n```\nnetstat -a\n```\n\n- 查看所有 的服务端口并显示对应的服务程序名\n```\nsudo netstat -ap\n```\n\n- nmap ＜扫描类型＞＜扫描参数＞\n例如：\n```\n#nmap localhost\n#nmap -p 1024-65535 localhost\n#nmap -PT 192.168.1.127-245\n```\n当我们使用　netstat -apn　查看网络连接的时候，会发现很多类似下面的内容：\n```\nProto Recv-Q Send-Q Local Address Foreign Address State PID/Program name\n\ntcp 0 52 218.104.81.152：7710 211.100.39.250：29488 ESTABLISHED 6111/1\n```\n\n显示这台服务器开放了7710端口，那么 这个端口属于哪个程序呢？我们可以使用　\n```\nlsof -i ：7710　\n```\n\n命令来查询：\n```\nCOMMAND PID USER FD TYPE DEVICE SIZE NODE NAME\n\nsshd 1990 root 3u IPv4 4836 TCP *：7710 （LISTEN）\n```\n    这样，我们就知道了7710端口是属于sshd程序的。\n\n- 运行tcpdump命令出现错误信息排除\n```\ntcpdump: no suitable device found\ntcpdump: no devices found /dev/bpf4: A file or directory in the path name does not exist.\n```\n\n解决方案 2种原因：\n1.权限不够，一般不经过处理，只用root用户能使用tcpdump\n2.缺省只能同时使用4个tcpdump，如用完，则报此类错。需要停掉多余的tcpdump\n\n### Ubuntu系统日志配置 /var/log/messages\n1. 问题描述\n　　今天需要查看Ubuntu系统的日志文件，但却没有找到/var/log/messages这个文件。网上搜素资料，说是要配置/etc/syslog.conf。syslog采用可配置的、统一的系统登记程序，随时从系统各处接受log请求，然后根据/etc/syslog.conf中的预先设定把log信息写入相应文件中、邮寄给特 定用户或者直接以消息的方式发往控制台。\n\n　　好吧，问题又来了。系统中依然没有/etc/syslog.conf，经过一番搜素，最后得到的结论是：在Ubuntu下对应的应该是/etc/rsyslog.conf和rsyslogd。\n\n2. 解决方案\n　　关于syslog.conf文件和syslog.d下文件功能解释可以参考下面这篇文章：\n　　http://www.linuxidc.com/Linux/2012-03/56434.htm\n　　通过查看rsyslog.conf文件，发现所有的配置文件都在/etc/rsyslog.d/文件夹下。\n\n```\n# /etc/rsyslog.conf Configuration file for rsyslog.\n#\n# For more information see\n# /usr/share/doc/rsyslog-doc/html/rsyslog_conf.html\n#\n# Default logging rules can be found in /etc/rsyslog.d/50-default.conf\n… …\n#\n# Include all config files in /etc/rsyslog.d/\n#\n$IncludeConfig /etc/rsyslog.d/*.conf\n```\n\n用vim打开/etc/rsyslog.d/50-default.conf文件增加一行内容如下：\n\n```\n*.info;mail.none;authpriv.none;cron.none /var/log/messages\n```\n\n[原文][1]\n\n  [1]: http://www.cnblogs.com/yc_sunniwell/archive/2010/07/05/1771563.html","source":"_posts/TcpDump.md","raw":"---\ntitle: tcpDump\ndate: 2017-07-01 19:05:11\ntags: [抓包工具,tcp]\ncategories: 工具\ntop: 1\n---\n- - -\n## Linux 混杂模式设置\n**1. 查看网卡混杂模式状态**\n```\nalex@ubuntu:~$ ifconfig eth0\n\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1735 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1780 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1451555 (1.4 MB)  TX bytes:193802 (193.8 KB)\n```\n<!--more-->\n\n**2. 启动混杂模式**\n主要是这个:**PROMISC**\n```\nalex@ubuntu:~$ sudo ifconfig eth0 promisc\nalex@ubuntu:~$ ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1\n          RX packets:1742 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1782 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1452336 (1.4 MB)  TX bytes:194198 (194.1 KB)\n```\n**3. 关闭混杂模式**\n```\nalex@ubuntu:~$ sudo ifconfig eth0 -promisc\nalex@ubuntu:~$ ifconfig eth0\neth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03\n          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0\n          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global\n          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global\n          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1766 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1796 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:1455202 (1.4 MB)  TX bytes:195410 (195.4 KB)\n```\n## TcpDump\n>- tcpdump存在于基本的FreeBSD系统中，由于它需要将网络界面设置为混杂模式，普通用户不能正常执行，但具备root权限的用户可以直接执行它来获取网络上的信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。\n- 显然为了安全起见，不用作网络管理用途的计算机上不应该运行这一类的网络分析软件，为了屏蔽它们，可以屏蔽内核中的bpfilter伪设备。一般情况下网络硬件和TCP/IP堆栈不支持接收或发送与本计算机无关的数据包，为了接收这些数据包，就必须使用网卡的混杂模式，并绕过标准的TCP/IP堆栈才行。在FreeBSD下，这就需要内核支持伪设备bpfilter。因此，在内核中取消bpfilter支持，就能屏蔽tcpdump之类的网络分析工具。\n- 并且当网卡被设置为混杂模式时，系统会在控制台和日志文件中留下记录，提醒管理员留意这台系统是否被用作攻击同网络的其他计算机的跳板。\n### 命令格式\n\ntcpdump采用命令行方式，它的命令格式为：\n    tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]\n　　　　　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]\n　　　　　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]\n　　　　　　　　　　\n### 命令参数\n\n|命令字|描述|\n|:----:|---|\n|-a |　　　将网络地址和广播地址转变成名字；\n|-d |　　　将匹配信息包的代码以人们能够理解的汇编格式给出；\n|-dd| 　　 将匹配信息包的代码以c语言程序段的格式给出；\n|-ddd|     将匹配信息包的代码以十进制的形式给出；\n|-e| 　　　在输出行打印出数据链路层的头部信息；\n|-f| 　　　将外部的Internet地址以数字的形式打印出来；\n|-l| 　　　使标准输出变为缓冲行形式；\n|-n| 　　　不把网络地址转换成名字；\n|-t| 　　　在输出的每一行不打印时间戳；\n|-v| 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；\n|-vv| 　　 输出详细的报文信息；\n|-c| 　　　在收到指定的包的数目后，tcpdump就会停止；\n|-F| 　　　从指定的文件中读取表达式,忽略其它的表达式；\n|-i| 　　　指定监听的网络接口；\n|-r| 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；\n|-w| 　　　直接将包写入文件中，并不分析和打印出来；\n|-T| 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）\n\n###  tcpdump的表达式介绍\n\n>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。在表达式中一般如下几种类型的关键字。\n\n#### 第一种是关于类型的关键字\n主要包括host，net，port, 例如 host 210.27.48.2，指明210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23指明端口号是23。如果没有指定类型，缺省的类型是host.\n\n#### 第二种是确定传输方向的关键字\n主要包括src , dst ,dst or src, dst and src,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。\n\n#### 第三种是协议的关键字\n主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是\"ether\"的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。\n\n#### 其他关键字\n除了这三种类型的关键字之外，其他重要的关键字如下：gateway,broadcast,less,greater,还有三种逻辑运算，取非运算是 'not ' '! ',与运算是'and','&&';或运算 是'or','││'；这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。\n\n- A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：\n```\n#tcpdump host 210.27.48.1\n```\n\n- B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：(在命令行中使用括号时，一定要添加'\\')\n```\n#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)\n```\n\n- C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：\n```\n#tcpdump tcp port 23 host 210.27.48.1\n```\n\n- E 对本机的udp 123 端口进行监视 123 为ntp的服务端口\n```\n# tcpdump udp port 123\n```\n\n- F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：\n```\n#tcpdump -i eth0 src host hostname\n```\n\n- G 下面的命令可以监视所有送到主机hostname的数据包：\n```\n#tcpdump -i eth0 dst host hostname\n```\n\n- H 我们还可以监视通过指定网关的数据包：\n```\n#tcpdump -i eth0 gateway Gatewayname\n```\n- I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：\n```\n#tcpdump -i eth0 host hostname and port 80\n```\n\n- J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：\n```\n#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)\n```\n\n- L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n```\n#tcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n- M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：\n```\n#tcpdump tcp port 23 host 210.27.48.1\n```\n\n### tcpdump的输出结果介绍\n下面我们介绍几种典型的tcpdump命令的输出信息\n\n- A,数据链路层头信息\n使用命令:\n```\n#tcpdump --e host ice\n```\nice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A；\nH219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；\n上一条命令的输出结果如下所示：\n```\n21:50:12.847509 eth0 < 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 > ice.telne\nt 0:0(0) ack 22535 win 8760 (DF)\n```\n    分析：21：50：12是显示的时间， 847509是ID号，eth0 <表示从网络接口eth0 接受该数据包，eth0>表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包.0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60是数据包的长度, h219.33357 > ice.telnet表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.\n\n- B,ARP包的TCPDUMP输出信息\n\n使用命令:\n```\n#tcpdump arp\n```\n得到的输出结果是：\n```\n22:32:42.802509 eth0 > arp who-has route tell ice (0:90:27:58:af:1a)\n22:32:42.802902 eth0 < arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)\n```\n\n    分析: 22:32:42是时间戳, 802509是ID号, eth0 >表明从主机发出该数据包, arp表明是ARP请求包,who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。0:90:27:58:af:1a是主机ICE的MAC地址。\n\n- C,TCP包的输出信息\n\n用TCPDUMP捕获的TCP包的一般输出信息是：\n```\nsrc > dst: flags data-seqno ack window urgent options\n```\n    src> dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R(RST) \".\" (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号,window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.\n\n- D,UDP包的输出信息\n\n用TCPDUMP捕获的UDP包的一般输出信息是：\n```\nroute.port1 > ice.port2: udp lenth\n```\n\n    UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth\n\n### 辅助工具\n\n- 想查看TCP或者UDP端口使用情况，使用\n```\n#netstat -anp\n```\n- 如果有些进程看不见，如只显示”-”，可以尝试\n```\n#sudo netstat -anp\n```\n\n- 如果想看某个端口的信息，使用lsof命令，如：\n```\n#sudo lsof -i :631\n```\n\n```\n-bash-3.00# netstat -tln\n```\n\n```\nnetstat -tln #命令是用来查看linux的端口使用情况\n```\n- 启动ftp端口\n```\n# /xtc/init.d/vsftp start\n```\n\n看文件/etc/services\nnetstat\n\n查看已经连接的服务端口（ESTABLISHED）\n\n- 查看所有的服务端口（LISTEN，ESTABLISHED）\n```\nnetstat -a\n```\n\n- 查看所有 的服务端口并显示对应的服务程序名\n```\nsudo netstat -ap\n```\n\n- nmap ＜扫描类型＞＜扫描参数＞\n例如：\n```\n#nmap localhost\n#nmap -p 1024-65535 localhost\n#nmap -PT 192.168.1.127-245\n```\n当我们使用　netstat -apn　查看网络连接的时候，会发现很多类似下面的内容：\n```\nProto Recv-Q Send-Q Local Address Foreign Address State PID/Program name\n\ntcp 0 52 218.104.81.152：7710 211.100.39.250：29488 ESTABLISHED 6111/1\n```\n\n显示这台服务器开放了7710端口，那么 这个端口属于哪个程序呢？我们可以使用　\n```\nlsof -i ：7710　\n```\n\n命令来查询：\n```\nCOMMAND PID USER FD TYPE DEVICE SIZE NODE NAME\n\nsshd 1990 root 3u IPv4 4836 TCP *：7710 （LISTEN）\n```\n    这样，我们就知道了7710端口是属于sshd程序的。\n\n- 运行tcpdump命令出现错误信息排除\n```\ntcpdump: no suitable device found\ntcpdump: no devices found /dev/bpf4: A file or directory in the path name does not exist.\n```\n\n解决方案 2种原因：\n1.权限不够，一般不经过处理，只用root用户能使用tcpdump\n2.缺省只能同时使用4个tcpdump，如用完，则报此类错。需要停掉多余的tcpdump\n\n### Ubuntu系统日志配置 /var/log/messages\n1. 问题描述\n　　今天需要查看Ubuntu系统的日志文件，但却没有找到/var/log/messages这个文件。网上搜素资料，说是要配置/etc/syslog.conf。syslog采用可配置的、统一的系统登记程序，随时从系统各处接受log请求，然后根据/etc/syslog.conf中的预先设定把log信息写入相应文件中、邮寄给特 定用户或者直接以消息的方式发往控制台。\n\n　　好吧，问题又来了。系统中依然没有/etc/syslog.conf，经过一番搜素，最后得到的结论是：在Ubuntu下对应的应该是/etc/rsyslog.conf和rsyslogd。\n\n2. 解决方案\n　　关于syslog.conf文件和syslog.d下文件功能解释可以参考下面这篇文章：\n　　http://www.linuxidc.com/Linux/2012-03/56434.htm\n　　通过查看rsyslog.conf文件，发现所有的配置文件都在/etc/rsyslog.d/文件夹下。\n\n```\n# /etc/rsyslog.conf Configuration file for rsyslog.\n#\n# For more information see\n# /usr/share/doc/rsyslog-doc/html/rsyslog_conf.html\n#\n# Default logging rules can be found in /etc/rsyslog.d/50-default.conf\n… …\n#\n# Include all config files in /etc/rsyslog.d/\n#\n$IncludeConfig /etc/rsyslog.d/*.conf\n```\n\n用vim打开/etc/rsyslog.d/50-default.conf文件增加一行内容如下：\n\n```\n*.info;mail.none;authpriv.none;cron.none /var/log/messages\n```\n\n[原文][1]\n\n  [1]: http://www.cnblogs.com/yc_sunniwell/archive/2010/07/05/1771563.html","slug":"TcpDump","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7w000vtns16fmzbqup","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"Linux-混杂模式设置\"><a href=\"#Linux-混杂模式设置\" class=\"headerlink\" title=\"Linux 混杂模式设置\"></a>Linux 混杂模式设置</h2><p><strong>1. 查看网卡混杂模式状态</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\"></div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1735 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1780 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1451555 (1.4 MB)  TX bytes:193802 (193.8 KB)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>2. 启动混杂模式</strong><br>主要是这个:<strong>PROMISC</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ sudo ifconfig eth0 promisc</div><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1742 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1782 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1452336 (1.4 MB)  TX bytes:194198 (194.1 KB)</div></pre></td></tr></table></figure></p>\n<p><strong>3. 关闭混杂模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ sudo ifconfig eth0 -promisc</div><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1766 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1796 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1455202 (1.4 MB)  TX bytes:195410 (195.4 KB)</div></pre></td></tr></table></figure></p>\n<h2 id=\"TcpDump\"><a href=\"#TcpDump\" class=\"headerlink\" title=\"TcpDump\"></a>TcpDump</h2><blockquote>\n<ul>\n<li>tcpdump存在于基本的FreeBSD系统中，由于它需要将网络界面设置为混杂模式，普通用户不能正常执行，但具备root权限的用户可以直接执行它来获取网络上的信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。</li>\n<li>显然为了安全起见，不用作网络管理用途的计算机上不应该运行这一类的网络分析软件，为了屏蔽它们，可以屏蔽内核中的bpfilter伪设备。一般情况下网络硬件和TCP/IP堆栈不支持接收或发送与本计算机无关的数据包，为了接收这些数据包，就必须使用网卡的混杂模式，并绕过标准的TCP/IP堆栈才行。在FreeBSD下，这就需要内核支持伪设备bpfilter。因此，在内核中取消bpfilter支持，就能屏蔽tcpdump之类的网络分析工具。</li>\n<li>并且当网卡被设置为混杂模式时，系统会在控制台和日志文件中留下记录，提醒管理员留意这台系统是否被用作攻击同网络的其他计算机的跳板。<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3></li>\n</ul>\n</blockquote>\n<p>tcpdump采用命令行方式，它的命令格式为：<br>    tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>　　　　　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>　　　　　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]\n　　　　　　　　　　</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td>　　　将网络地址和广播地址转变成名字；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td>　　　将匹配信息包的代码以人们能够理解的汇编格式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-dd</td>\n<td>　　 将匹配信息包的代码以c语言程序段的格式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ddd</td>\n<td>将匹配信息包的代码以十进制的形式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td>　　　在输出行打印出数据链路层的头部信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td>　　　将外部的Internet地址以数字的形式打印出来；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td>　　　使标准输出变为缓冲行形式；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-n</td>\n<td>　　　不把网络地址转换成名字；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-t</td>\n<td>　　　在输出的每一行不打印时间戳；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td>　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-vv</td>\n<td>　　 输出详细的报文信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td>　　　在收到指定的包的数目后，tcpdump就会停止；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td>　　　从指定的文件中读取表达式,忽略其它的表达式；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td>　　　指定监听的网络接口；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td>　　　从指定的文件中读取包(这些包一般通过-w选项产生)；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w</td>\n<td>　　　直接将包写入文件中，并不分析和打印出来；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-T</td>\n<td>　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"tcpdump的表达式介绍\"><a href=\"#tcpdump的表达式介绍\" class=\"headerlink\" title=\"tcpdump的表达式介绍\"></a>tcpdump的表达式介绍</h3><blockquote>\n<p>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。在表达式中一般如下几种类型的关键字。</p>\n</blockquote>\n<h4 id=\"第一种是关于类型的关键字\"><a href=\"#第一种是关于类型的关键字\" class=\"headerlink\" title=\"第一种是关于类型的关键字\"></a>第一种是关于类型的关键字</h4><p>主要包括host，net，port, 例如 host 210.27.48.2，指明210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23指明端口号是23。如果没有指定类型，缺省的类型是host.</p>\n<h4 id=\"第二种是确定传输方向的关键字\"><a href=\"#第二种是确定传输方向的关键字\" class=\"headerlink\" title=\"第二种是确定传输方向的关键字\"></a>第二种是确定传输方向的关键字</h4><p>主要包括src , dst ,dst or src, dst and src,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。</p>\n<h4 id=\"第三种是协议的关键字\"><a href=\"#第三种是协议的关键字\" class=\"headerlink\" title=\"第三种是协议的关键字\"></a>第三种是协议的关键字</h4><p>主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。</p>\n<h4 id=\"其他关键字\"><a href=\"#其他关键字\" class=\"headerlink\" title=\"其他关键字\"></a>其他关键字</h4><p>除了这三种类型的关键字之外，其他重要的关键字如下：gateway,broadcast,less,greater,还有三种逻辑运算，取非运算是 ‘not ‘ ‘! ‘,与运算是’and’,’&amp;&amp;’;或运算 是’or’,’││’；这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。</p>\n<ul>\n<li><p>A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：(在命令行中使用括号时，一定要添加’\\’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)</div></pre></td></tr></table></figure>\n</li>\n<li><p>C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump tcp port 23 host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>E 对本机的udp 123 端口进行监视 123 为ntp的服务端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tcpdump udp port 123</div></pre></td></tr></table></figure>\n</li>\n<li><p>F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 src host hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p>G 下面的命令可以监视所有送到主机hostname的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 dst host hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p>H 我们还可以监视通过指定网关的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 gateway Gatewayname</div></pre></td></tr></table></figure>\n</li>\n<li><p>I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 host hostname and port 80</div></pre></td></tr></table></figure>\n</li>\n<li><p>J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)</div></pre></td></tr></table></figure>\n</li>\n<li><p>L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump tcp port 23 host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"tcpdump的输出结果介绍\"><a href=\"#tcpdump的输出结果介绍\" class=\"headerlink\" title=\"tcpdump的输出结果介绍\"></a>tcpdump的输出结果介绍</h3><p>下面我们介绍几种典型的tcpdump命令的输出信息</p>\n<ul>\n<li>A,数据链路层头信息<br>使用命令:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump --e host ice</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A；<br>H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；<br>上一条命令的输出结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 &gt; ice.telne</div><div class=\"line\">t 0:0(0) ack 22535 win 8760 (DF)</div></pre></td></tr></table></figure></p>\n<pre><code>分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该数据包，eth0&gt;表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包.0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60是数据包的长度, h219.33357 &gt; ice.telnet表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.\n</code></pre><ul>\n<li>B,ARP包的TCPDUMP输出信息</li>\n</ul>\n<p>使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump arp</div></pre></td></tr></table></figure></p>\n<p>得到的输出结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">22:32:42.802509 eth0 &gt; arp who-has route tell ice (0:90:27:58:af:1a)</div><div class=\"line\">22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)</div></pre></td></tr></table></figure></p>\n<pre><code>分析: 22:32:42是时间戳, 802509是ID号, eth0 &gt;表明从主机发出该数据包, arp表明是ARP请求包,who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。0:90:27:58:af:1a是主机ICE的MAC地址。\n</code></pre><ul>\n<li>C,TCP包的输出信息</li>\n</ul>\n<p>用TCPDUMP捕获的TCP包的一般输出信息是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src &gt; dst: flags data-seqno ack window urgent options</div></pre></td></tr></table></figure></p>\n<pre><code>src&gt; dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R(RST) &quot;.&quot; (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号,window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.\n</code></pre><ul>\n<li>D,UDP包的输出信息</li>\n</ul>\n<p>用TCPDUMP捕获的UDP包的一般输出信息是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">route.port1 &gt; ice.port2: udp lenth</div></pre></td></tr></table></figure></p>\n<pre><code>UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth\n</code></pre><h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><ul>\n<li><p>想查看TCP或者UDP端口使用情况，使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#netstat -anp</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果有些进程看不见，如只显示”-”，可以尝试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sudo netstat -anp</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想看某个端口的信息，使用lsof命令，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sudo lsof -i :631</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-bash-3.00# netstat -tln</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -tln #命令是用来查看linux的端口使用情况</div></pre></td></tr></table></figure>\n<ul>\n<li>启动ftp端口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /xtc/init.d/vsftp start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>看文件/etc/services<br>netstat</p>\n<p>查看已经连接的服务端口（ESTABLISHED）</p>\n<ul>\n<li><p>查看所有的服务端口（LISTEN，ESTABLISHED）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -a</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有 的服务端口并显示对应的服务程序名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo netstat -ap</div></pre></td></tr></table></figure>\n</li>\n<li><p>nmap ＜扫描类型＞＜扫描参数＞<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#nmap localhost</div><div class=\"line\">#nmap -p 1024-65535 localhost</div><div class=\"line\">#nmap -PT 192.168.1.127-245</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当我们使用　netstat -apn　查看网络连接的时候，会发现很多类似下面的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name</div><div class=\"line\"></div><div class=\"line\">tcp 0 52 218.104.81.152：7710 211.100.39.250：29488 ESTABLISHED 6111/1</div></pre></td></tr></table></figure></p>\n<p>显示这台服务器开放了7710端口，那么 这个端口属于哪个程序呢？我们可以使用　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lsof -i ：7710</div></pre></td></tr></table></figure></p>\n<p>命令来查询：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME</div><div class=\"line\"></div><div class=\"line\">sshd 1990 root 3u IPv4 4836 TCP *：7710 （LISTEN）</div></pre></td></tr></table></figure></p>\n<pre><code>这样，我们就知道了7710端口是属于sshd程序的。\n</code></pre><ul>\n<li>运行tcpdump命令出现错误信息排除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump: no suitable device found</div><div class=\"line\">tcpdump: no devices found /dev/bpf4: A file or directory in the path name does not exist.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决方案 2种原因：<br>1.权限不够，一般不经过处理，只用root用户能使用tcpdump<br>2.缺省只能同时使用4个tcpdump，如用完，则报此类错。需要停掉多余的tcpdump</p>\n<h3 id=\"Ubuntu系统日志配置-var-log-messages\"><a href=\"#Ubuntu系统日志配置-var-log-messages\" class=\"headerlink\" title=\"Ubuntu系统日志配置 /var/log/messages\"></a>Ubuntu系统日志配置 /var/log/messages</h3><ol>\n<li>问题描述<br>　　今天需要查看Ubuntu系统的日志文件，但却没有找到/var/log/messages这个文件。网上搜素资料，说是要配置/etc/syslog.conf。syslog采用可配置的、统一的系统登记程序，随时从系统各处接受log请求，然后根据/etc/syslog.conf中的预先设定把log信息写入相应文件中、邮寄给特 定用户或者直接以消息的方式发往控制台。</li>\n</ol>\n<p>　　好吧，问题又来了。系统中依然没有/etc/syslog.conf，经过一番搜素，最后得到的结论是：在Ubuntu下对应的应该是/etc/rsyslog.conf和rsyslogd。</p>\n<ol>\n<li>解决方案<br>　　关于syslog.conf文件和syslog.d下文件功能解释可以参考下面这篇文章：<br>　　<a href=\"http://www.linuxidc.com/Linux/2012-03/56434.htm\" target=\"_blank\" rel=\"external\">http://www.linuxidc.com/Linux/2012-03/56434.htm</a><br>　　通过查看rsyslog.conf文件，发现所有的配置文件都在/etc/rsyslog.d/文件夹下。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /etc/rsyslog.conf Configuration file for rsyslog.</div><div class=\"line\">#</div><div class=\"line\"># For more information see</div><div class=\"line\"># /usr/share/doc/rsyslog-doc/html/rsyslog_conf.html</div><div class=\"line\">#</div><div class=\"line\"># Default logging rules can be found in /etc/rsyslog.d/50-default.conf</div><div class=\"line\">… …</div><div class=\"line\">#</div><div class=\"line\"># Include all config files in /etc/rsyslog.d/</div><div class=\"line\">#</div><div class=\"line\">$IncludeConfig /etc/rsyslog.d/*.conf</div></pre></td></tr></table></figure>\n<p>用vim打开/etc/rsyslog.d/50-default.conf文件增加一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.info;mail.none;authpriv.none;cron.none /var/log/messages</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/yc_sunniwell/archive/2010/07/05/1771563.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n","excerpt":"<hr>\n<h2 id=\"Linux-混杂模式设置\"><a href=\"#Linux-混杂模式设置\" class=\"headerlink\" title=\"Linux 混杂模式设置\"></a>Linux 混杂模式设置</h2><p><strong>1. 查看网卡混杂模式状态</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\"></div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1735 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1780 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1451555 (1.4 MB)  TX bytes:193802 (193.8 KB)</div></pre></td></tr></table></figure></p>","more":"<p><strong>2. 启动混杂模式</strong><br>主要是这个:<strong>PROMISC</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ sudo ifconfig eth0 promisc</div><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1742 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1782 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1452336 (1.4 MB)  TX bytes:194198 (194.1 KB)</div></pre></td></tr></table></figure></p>\n<p><strong>3. 关闭混杂模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@ubuntu:~$ sudo ifconfig eth0 -promisc</div><div class=\"line\">alex@ubuntu:~$ ifconfig eth0</div><div class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03</div><div class=\"line\">          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global</div><div class=\"line\">          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global</div><div class=\"line\">          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link</div><div class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class=\"line\">          RX packets:1766 errors:0 dropped:0 overruns:0 frame:0</div><div class=\"line\">          TX packets:1796 errors:0 dropped:0 overruns:0 carrier:0</div><div class=\"line\">          collisions:0 txqueuelen:1000</div><div class=\"line\">          RX bytes:1455202 (1.4 MB)  TX bytes:195410 (195.4 KB)</div></pre></td></tr></table></figure></p>\n<h2 id=\"TcpDump\"><a href=\"#TcpDump\" class=\"headerlink\" title=\"TcpDump\"></a>TcpDump</h2><blockquote>\n<ul>\n<li>tcpdump存在于基本的FreeBSD系统中，由于它需要将网络界面设置为混杂模式，普通用户不能正常执行，但具备root权限的用户可以直接执行它来获取网络上的信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。</li>\n<li>显然为了安全起见，不用作网络管理用途的计算机上不应该运行这一类的网络分析软件，为了屏蔽它们，可以屏蔽内核中的bpfilter伪设备。一般情况下网络硬件和TCP/IP堆栈不支持接收或发送与本计算机无关的数据包，为了接收这些数据包，就必须使用网卡的混杂模式，并绕过标准的TCP/IP堆栈才行。在FreeBSD下，这就需要内核支持伪设备bpfilter。因此，在内核中取消bpfilter支持，就能屏蔽tcpdump之类的网络分析工具。</li>\n<li>并且当网卡被设置为混杂模式时，系统会在控制台和日志文件中留下记录，提醒管理员留意这台系统是否被用作攻击同网络的其他计算机的跳板。<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3></li>\n</ul>\n</blockquote>\n<p>tcpdump采用命令行方式，它的命令格式为：<br>    tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>　　　　　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>　　　　　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]\n　　　　　　　　　　</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td>　　　将网络地址和广播地址转变成名字；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td>　　　将匹配信息包的代码以人们能够理解的汇编格式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-dd</td>\n<td>　　 将匹配信息包的代码以c语言程序段的格式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ddd</td>\n<td>将匹配信息包的代码以十进制的形式给出；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td>　　　在输出行打印出数据链路层的头部信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td>　　　将外部的Internet地址以数字的形式打印出来；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td>　　　使标准输出变为缓冲行形式；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-n</td>\n<td>　　　不把网络地址转换成名字；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-t</td>\n<td>　　　在输出的每一行不打印时间戳；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td>　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-vv</td>\n<td>　　 输出详细的报文信息；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td>　　　在收到指定的包的数目后，tcpdump就会停止；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td>　　　从指定的文件中读取表达式,忽略其它的表达式；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td>　　　指定监听的网络接口；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td>　　　从指定的文件中读取包(这些包一般通过-w选项产生)；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w</td>\n<td>　　　直接将包写入文件中，并不分析和打印出来；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-T</td>\n<td>　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"tcpdump的表达式介绍\"><a href=\"#tcpdump的表达式介绍\" class=\"headerlink\" title=\"tcpdump的表达式介绍\"></a>tcpdump的表达式介绍</h3><blockquote>\n<p>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。在表达式中一般如下几种类型的关键字。</p>\n</blockquote>\n<h4 id=\"第一种是关于类型的关键字\"><a href=\"#第一种是关于类型的关键字\" class=\"headerlink\" title=\"第一种是关于类型的关键字\"></a>第一种是关于类型的关键字</h4><p>主要包括host，net，port, 例如 host 210.27.48.2，指明210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23指明端口号是23。如果没有指定类型，缺省的类型是host.</p>\n<h4 id=\"第二种是确定传输方向的关键字\"><a href=\"#第二种是确定传输方向的关键字\" class=\"headerlink\" title=\"第二种是确定传输方向的关键字\"></a>第二种是确定传输方向的关键字</h4><p>主要包括src , dst ,dst or src, dst and src,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。</p>\n<h4 id=\"第三种是协议的关键字\"><a href=\"#第三种是协议的关键字\" class=\"headerlink\" title=\"第三种是协议的关键字\"></a>第三种是协议的关键字</h4><p>主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。</p>\n<h4 id=\"其他关键字\"><a href=\"#其他关键字\" class=\"headerlink\" title=\"其他关键字\"></a>其他关键字</h4><p>除了这三种类型的关键字之外，其他重要的关键字如下：gateway,broadcast,less,greater,还有三种逻辑运算，取非运算是 ‘not ‘ ‘! ‘,与运算是’and’,’&amp;&amp;’;或运算 是’or’,’││’；这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。</p>\n<ul>\n<li><p>A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：(在命令行中使用括号时，一定要添加’\\’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)</div></pre></td></tr></table></figure>\n</li>\n<li><p>C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump tcp port 23 host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>E 对本机的udp 123 端口进行监视 123 为ntp的服务端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tcpdump udp port 123</div></pre></td></tr></table></figure>\n</li>\n<li><p>F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 src host hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p>G 下面的命令可以监视所有送到主机hostname的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 dst host hostname</div></pre></td></tr></table></figure>\n</li>\n<li><p>H 我们还可以监视通过指定网关的数据包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 gateway Gatewayname</div></pre></td></tr></table></figure>\n</li>\n<li><p>I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump -i eth0 host hostname and port 80</div></pre></td></tr></table></figure>\n</li>\n<li><p>J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)</div></pre></td></tr></table></figure>\n</li>\n<li><p>L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump tcp port 23 host 210.27.48.1</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"tcpdump的输出结果介绍\"><a href=\"#tcpdump的输出结果介绍\" class=\"headerlink\" title=\"tcpdump的输出结果介绍\"></a>tcpdump的输出结果介绍</h3><p>下面我们介绍几种典型的tcpdump命令的输出信息</p>\n<ul>\n<li>A,数据链路层头信息<br>使用命令:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump --e host ice</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A；<br>H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；<br>上一条命令的输出结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 &gt; ice.telne</div><div class=\"line\">t 0:0(0) ack 22535 win 8760 (DF)</div></pre></td></tr></table></figure></p>\n<pre><code>分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该数据包，eth0&gt;表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包.0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60是数据包的长度, h219.33357 &gt; ice.telnet表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.\n</code></pre><ul>\n<li>B,ARP包的TCPDUMP输出信息</li>\n</ul>\n<p>使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#tcpdump arp</div></pre></td></tr></table></figure></p>\n<p>得到的输出结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">22:32:42.802509 eth0 &gt; arp who-has route tell ice (0:90:27:58:af:1a)</div><div class=\"line\">22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)</div></pre></td></tr></table></figure></p>\n<pre><code>分析: 22:32:42是时间戳, 802509是ID号, eth0 &gt;表明从主机发出该数据包, arp表明是ARP请求包,who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。0:90:27:58:af:1a是主机ICE的MAC地址。\n</code></pre><ul>\n<li>C,TCP包的输出信息</li>\n</ul>\n<p>用TCPDUMP捕获的TCP包的一般输出信息是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src &gt; dst: flags data-seqno ack window urgent options</div></pre></td></tr></table></figure></p>\n<pre><code>src&gt; dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R(RST) &quot;.&quot; (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号,window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.\n</code></pre><ul>\n<li>D,UDP包的输出信息</li>\n</ul>\n<p>用TCPDUMP捕获的UDP包的一般输出信息是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">route.port1 &gt; ice.port2: udp lenth</div></pre></td></tr></table></figure></p>\n<pre><code>UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth\n</code></pre><h3 id=\"辅助工具\"><a href=\"#辅助工具\" class=\"headerlink\" title=\"辅助工具\"></a>辅助工具</h3><ul>\n<li><p>想查看TCP或者UDP端口使用情况，使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#netstat -anp</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果有些进程看不见，如只显示”-”，可以尝试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sudo netstat -anp</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想看某个端口的信息，使用lsof命令，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#sudo lsof -i :631</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-bash-3.00# netstat -tln</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -tln #命令是用来查看linux的端口使用情况</div></pre></td></tr></table></figure>\n<ul>\n<li>启动ftp端口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /xtc/init.d/vsftp start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>看文件/etc/services<br>netstat</p>\n<p>查看已经连接的服务端口（ESTABLISHED）</p>\n<ul>\n<li><p>查看所有的服务端口（LISTEN，ESTABLISHED）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -a</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有 的服务端口并显示对应的服务程序名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo netstat -ap</div></pre></td></tr></table></figure>\n</li>\n<li><p>nmap ＜扫描类型＞＜扫描参数＞<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#nmap localhost</div><div class=\"line\">#nmap -p 1024-65535 localhost</div><div class=\"line\">#nmap -PT 192.168.1.127-245</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当我们使用　netstat -apn　查看网络连接的时候，会发现很多类似下面的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name</div><div class=\"line\"></div><div class=\"line\">tcp 0 52 218.104.81.152：7710 211.100.39.250：29488 ESTABLISHED 6111/1</div></pre></td></tr></table></figure></p>\n<p>显示这台服务器开放了7710端口，那么 这个端口属于哪个程序呢？我们可以使用　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lsof -i ：7710</div></pre></td></tr></table></figure></p>\n<p>命令来查询：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME</div><div class=\"line\"></div><div class=\"line\">sshd 1990 root 3u IPv4 4836 TCP *：7710 （LISTEN）</div></pre></td></tr></table></figure></p>\n<pre><code>这样，我们就知道了7710端口是属于sshd程序的。\n</code></pre><ul>\n<li>运行tcpdump命令出现错误信息排除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump: no suitable device found</div><div class=\"line\">tcpdump: no devices found /dev/bpf4: A file or directory in the path name does not exist.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决方案 2种原因：<br>1.权限不够，一般不经过处理，只用root用户能使用tcpdump<br>2.缺省只能同时使用4个tcpdump，如用完，则报此类错。需要停掉多余的tcpdump</p>\n<h3 id=\"Ubuntu系统日志配置-var-log-messages\"><a href=\"#Ubuntu系统日志配置-var-log-messages\" class=\"headerlink\" title=\"Ubuntu系统日志配置 /var/log/messages\"></a>Ubuntu系统日志配置 /var/log/messages</h3><ol>\n<li>问题描述<br>　　今天需要查看Ubuntu系统的日志文件，但却没有找到/var/log/messages这个文件。网上搜素资料，说是要配置/etc/syslog.conf。syslog采用可配置的、统一的系统登记程序，随时从系统各处接受log请求，然后根据/etc/syslog.conf中的预先设定把log信息写入相应文件中、邮寄给特 定用户或者直接以消息的方式发往控制台。</li>\n</ol>\n<p>　　好吧，问题又来了。系统中依然没有/etc/syslog.conf，经过一番搜素，最后得到的结论是：在Ubuntu下对应的应该是/etc/rsyslog.conf和rsyslogd。</p>\n<ol>\n<li>解决方案<br>　　关于syslog.conf文件和syslog.d下文件功能解释可以参考下面这篇文章：<br>　　<a href=\"http://www.linuxidc.com/Linux/2012-03/56434.htm\">http://www.linuxidc.com/Linux/2012-03/56434.htm</a><br>　　通过查看rsyslog.conf文件，发现所有的配置文件都在/etc/rsyslog.d/文件夹下。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /etc/rsyslog.conf Configuration file for rsyslog.</div><div class=\"line\">#</div><div class=\"line\"># For more information see</div><div class=\"line\"># /usr/share/doc/rsyslog-doc/html/rsyslog_conf.html</div><div class=\"line\">#</div><div class=\"line\"># Default logging rules can be found in /etc/rsyslog.d/50-default.conf</div><div class=\"line\">… …</div><div class=\"line\">#</div><div class=\"line\"># Include all config files in /etc/rsyslog.d/</div><div class=\"line\">#</div><div class=\"line\">$IncludeConfig /etc/rsyslog.d/*.conf</div></pre></td></tr></table></figure>\n<p>用vim打开/etc/rsyslog.d/50-default.conf文件增加一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.info;mail.none;authpriv.none;cron.none /var/log/messages</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/yc_sunniwell/archive/2010/07/05/1771563.html\">原文</a></p>"},{"title":"Hello World","date":"2017-03-25T16:39:12.000Z","_content":"- - -\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n\n<!--more-->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-03-26 0:39:12\n---\n- - -\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n\n<!--more-->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7w000wtns146stuvtp","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><a id=\"more\"></a>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<hr>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>","more":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"WireShark网络抓包","date":"2017-07-01T11:19:11.000Z","_content":"\n---\n## WireShark入门\n### 一、 打开WireShark\n![WireShark启动界面][1]\n\n<!--more-->\n### 二、界面分区\n![WireShark界面划分][2]\n### 三、过滤规则语句\n\n-  IP 过滤\n```\nip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107\n#或者\nip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP\n```\n\n-  过滤端口\n```\ntcp.port eq 80 // 不管端口是来源的还是目标的都显示\ntcp.port == 80\ntcp.port eq 2722\ntcp.port eq 80 or udp.port eq 80\ntcp.dstport == 80 // 只显tcp协议的目标端口80\ntcp.srcport == 80 // 只显tcp协议的来源端口80\n#端口范围\ntcp.port >= 1 and tcp.port <= 80\n```\n- 协议过滤\n```\ntcp、udp、arp、icmp、http、smtp、ftp、dns、msnms、ip、ssl、oicq、bootp #等等.\n#排除\n#排除arp包\n!arp  或者  not arp\n```\n- mac 过滤\n```\neth.dst == A0:00:00:04:C5:84 //过滤目标mac\neth.src eq A0:00:00:04:C5:84 //过滤来源mac\neth.dst==A0:00:00:04:C5:84\neth.dst==A0-00-00-04-C5-84\neth.addr eq A0:00:00:04:C5:84 //过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的MAC\n```\n- 数据包长度过滤\n```\nudp.length == 26 #这个长度是指udp本身固定长度8加上udp下面那块数据包之和\ntcp.len >= 7  #指的是ip数据包(tcp下面那块数据),不包括tcp本身\nip.len == 94 #除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后\nframe.len == 119 #整个数据包长度,从eth开始到最后\n#数据包组成成员\neth ---> ip or arp ---> tcp or udp ---> data\n```\n\n- http模式过滤\n```\nhttp.request.method == \"GET\"\nhttp.request.method == \"POST\"\nhttp.request.uri == \"/img/logo-edu.gif\"\nhttp contains \"GET\"\nhttp contains \"HTTP/1.\"\n\n// GET包\nhttp.request.method == \"GET\" && http contains \"Host: \"\nhttp.request.method == \"GET\" && http contains \"User-Agent: \"\n// POST包\nhttp.request.method == \"POST\" && http contains \"Host: \"\nhttp.request.method == \"POST\" && http contains \"User-Agent: \"\n// 响应包\nhttp contains \"HTTP/1.1 200 OK\" && http contains \"Content-Type: \"\nhttp contains \"HTTP/1.0 200 OK\" && http contains \"Content-Type: \"\n```\n- 两种条件成立过滤\n```\n过滤两种条件时，使用and连接，\n如过滤ip为192.168.101.8并且为http协议的，ip.src==192.168.101.8 and http。\n```\n- 域名过滤\n```\nhttp.host == \"gizwits.com\"\n```\n### 四、TCP包分析\n\n#### **一个TCP包由5部分组成分别是:**\n\n1. Frame:   物理层的数据帧概况\n2. Ethernet II: 数据链路层以太网帧头部信息\n3. Internet Protocol Version 4: 互联网层IP包头部信息\n4. Transmission Control Protocol:  传输层T的数据段头部信息，此处是mqtt\n5. Hypertext Transfer Protocol/Data:  应用层的信息，此处是mqtt协议\n\n#### **与之对应的网络七层协议图如下**\n![tcp数据层][3]\n#### OSI 参考模型与 TCP/IP分层模型\n![OSI 参考模型与 TCP/IP分层模型][5]\n\n#### **TCP 三次握手**\n**图片版本**\n![TCP三次握手][6]\n#### **WireShark抓包分析图**\n##### **第一次握手**\n代表客户端请求建立连接\n```\nSEQ=0\nACK=0\nFLAGS = 0x0002 （SYN）\n```\n**WireShark第一次TCP握手图**\n![TCP 第一次握手][7]\n\n##### **第二次握手：**\n服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SEQ加1以.即ACK=SEQ+1\n```\nSEQ = 0\nACK = SEQ+1\nFLAGS = 0X0012（SYN +ACK）\n```\n**WireShark第二次TCP握手图**\n![TCP 第二次握手][8]\n\n\n##### **第三次握手**\n客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放确在SEQ字段中发送给对方.\n```\nSEQ =SEQ+1\nACK = 1;\nFLAGS = 0X0001（ACK）\n```\n![TCP 第三次握手][9]\n\n### 五、WireShark 抓包异常情况分析\n\n#### 1. **tcp out-of-order**（tcp有问题）\n>**原因:** 应该有很多原因。但是多半是网络拥塞，导致顺序包抵达时间不同，延时太长，或者包丢失，需要重新组合数据单元 因为他们可能是通过不同的路径到达你电脑上面的。\n\n#### 2. **tcp segment of a reassembled PDU**\n>**原因:** 在连个连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，在局域网内一般都是**1460**.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了**“TCP segment of a reassembled PDU”**。TCP在发起连接的第一个报文的TCP头里通过MSS这个可选项告知对方本端能够接收的最大报文（当然，这个大小是TCP净荷的大小），以太网上这个值一般设置成1460，因为1460Byte净荷+20Byte TCP头+20Byte IP头 ＝ 1500字节，正好符合链路层最大报文的要求，被标记了的包的SEQ和ACK都和原来的包一致。\n#### 3. **Tcp previous segment lost（tcp先前的分片丢失）**\n>一般是网络中的网络设备发生的拥塞了，触发了TCP的拥塞控制机制。它告诉发送方数据段丢失；\n（1）、“TCP Previous segment lost” errors are not “fatal” errors. They simply indicate that the sequence number in the arriving packet is higher than the next-expected sequence number, indicating that at least one segment was dropped/lost. The receiving station remedies this situation by sending duplicate ACKs for each additional packet it receives until the sender retransmits the missing packet(s). TCP is designed to recover from this situation, which is why the image is downloaded correctly despite having a (briefly) missing packet.\nIf you are getting a large number of lost packets, then there is likely a communication problem between the sender and receiver. A common cause of this is un-matched duplex settings between the PC and the switch.\nWe (our lab) recently upgraded to Ethereal 0.10.14 with WinPCap 3.1.  If I remember correctly, we had previously been using 0.10.2 with WinPCap 3.0.  However, since the upgrade we have been noticing several issues.\nThe first issue is with “TCP Previous segment lost” and “TCP CHECKSUM INCORRECT” messages appearing in the Packet Listing window.  We do not remember seeing these in the previous version of Ethereal, or at least not nearly as many as we are seeing now.  For example, one task for the student instructional part of the lab involves visiting a website containing two images and observing the network activity.  After the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response packet, but the response packet for the other image will be displayed as “TCP Previous segment lost.”  However, both images are downloaded and displayed perfectly fine in the browser.  I would think that the segment lost error would mean the object wasn’t returned correctly and shouldn’t be able to be displayed, but apparently that is not the case.  (The cache had been cleared when this was performed, so it was not defaulting to a local copy of the image.)\nAnother problem we’ve been noticing is that some packets simply aren’t displayed in the Packet Listing window, even when they are obviously received.  Using the same example as above, after the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response, but the other response will not appear.  Yet both images are successfully displayed in the browser.  Is this a problem with Ethereal not detecting the packets?\nI’m not sure how typical this is, but we seem to be experiencing these issues often with 0.10.14 while we never did with 0.10.2.  Could it also be an issue with WinPCap, and not necessarily Ethereal?  I’m just trying to find some answers as to why we are seeing a sudden abundance of TCP related errors and uncaptured packets.  Thanks.\n（2）、I have a network client application that runs fine while I am debugging (no TCP errors),\nbut when I run the release version, it runs incredibly slow.  It runs as a series of\ntransactions, where each transaction is a separate connection to the server.  Wireshark\nanalysis has determined that about 50% of all transactions involve the series:\nTCP Previous Segment Lost\n\n#### 4. Tcpacked lost segment（tcp应答丢失）\n#### 5. Tcp window update（tcp窗口更新）\n#### 6. Tcp dup ack（tcp重复应答）\n>1)当收到tcp out-of-order 信号时，可能发送该信号， 这个相同应答的意图是让对端知道一个分片被收到的时候出现问题，并且告诉它希望得到的序列号。\n2)由于TCP不知道重复的ACK是由丢失的段引起的还是仅仅是重新排序段，所以等待接收到少量的重复的ACK。 假设如果只有段的重新排序，则在重新排序的段被处理之前将只有一个或两个重复的ACK，然后将生成新的ACK。 如果在一行中接收到三个或更多个重复的ACK，则表明段已经丢失。 TCP然后执行似乎是丢失段的重传，而不等待重传定时器到期。\n\n#### 7. **Tcp keep alive**（tcp保持活动）\n>在TCP中有一个Keep-alive的机制可以检测死连接，原理很简单，TCP会在空闲了一定时间后发送数据给对方：\n 1.如果主机可达，对方就会响应ACK应答，就认为是存活的。\n 2.如果可达，但应用程序退出，对方就发RST应答，发送TCP撤消连接。\n 3.如果可达，但应用程序崩溃，对方就发FIN消息。\n 4.如果对方主机不响应ack, rst，继续发送直到超时，就撤消连接。这个时间就是默认的二个小时。\n\n#### 8. **Tcp retransmission**（tcp重传）\n>作为一个可靠的传输协议，传输控制协议（TCP）在发送主机需要从目标主机收到一个包时确认。If the sender does not receive that acknowledgment within a certain amount of time, it acts under the assumption that the packet did not reach its destination and retransmits the packet.如果发件人没有收到的时间内一定之金额，确认，它的行为假设下，该数据包没有到达其目的地，以及转发数据包。\n\n\n## TCP 状态分析\nTCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n它们的含义是：\n\n 1. SYN(synchronous): 表示建立连接.\n 2. FIN(finish): 表示关闭连接.\n 3. ACK(acknowledgement): 表示响应.\n 4. PSH(push): 表示有DATA数据传输.\n 5. RST(reset): 表示连接重置.\n 6. URG(urgent):紧急.\n 7. SEQ(Sequence number):顺序号码\n\n## TCP 三次握手流程\n1. 主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n2. 主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；\n3. 主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。\n\n## 各种网络包头格式\n### 以太网头\n```\n// MAC地址长度\n#define MAC_ADDRESS_LEN 6\n\n// 常用的以太网帧类型\n#define ETHERNET_FRAME_IP       0x0800              // IP帧\n#define ETHERNET_FRAME_ARP      0x0806              // ARP帧\n#define ETHERNET_FRAME_RARP     0x8035              // RARP帧\n#define ETHERNET_FRAME_IPv6     0x86DD              // IP6帧\n\ntypedef struct _EthernetHeader      // 以太头\n{\n    UCHAR       DstMacAddr[MAC_ADDRESS_LEN];        // 目标MAC\n    UCHAR       SrcMacAddr[MAC_ADDRESS_LEN];        // 源MAC\n    USHORT      FrmType;                            // 类型\n}EthernetHeader, *PEthernetHeader;\n```\n### TCP 包格式\n```\n0                            15                              31\n-----------------------------------------------------------------\n|          source port          |       destination port        |\n-----------------------------------------------------------------\n|                        sequence number                        |\n-----------------------------------------------------------------\n|                     acknowledgment number                     |\n-----------------------------------------------------------------\n|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\n-----------------------------------------------------------------\n|         TCP checksum          |       urgent pointer          |\n-----------------------------------------------------------------\n|                           Optional                            |\n-----------------------------------------------------------------\n|                              Data                             |\n-----------------------------------------------------------------\n\n// TCP头标志位掩码 OffFlag\n#define TCP_HDR_LEN             0xF000              // TCP头长度<双字的个数>转化为字节数需要x4\n#define TCP_URG_FLAG            0x0020              // URG标志\n#define TCP_ACK_FLAG            0x0010              // ACK标志 应答1或请求0\n#define TCP_PSH_FLAG            0x0008              // psh标志 以最快速度传输数据\n#define TCP_RST_FLAG            0x0004              // RST标志 先断开连接,再重建连接\n#define TCP_SYN_FLAG            0x0002              // SYN标志 用来建立连接\n#define TCP_FIN_FLAG            0x0001              // FIN标志 发送方完成数据发送\n\ntypedef struct _TcpHeader           // TCP头 20 BYTES\n{\n    USHORT      SrcPort;                            // 源端口\n    USHORT      DstPort;                            // 目的端口\n    ULONG       SeqNum;                             // 序号\n    ULONG       AckNum;                             // 确认号\n    USHORT      OffFlag;                            // 首部长度<首部双字的个数>+保留位+标志位\n    USHORT      WndSize;                            // 窗口大小<实现流量控制>\n    USHORT      Checksum;                           // 效验和\n    USHORT      UrgPointer;                         // 紧急指针\n}TcpHeader, *PTcpHeader;\n\n// OffFlag : 4位首部长度 + 6位保留位 + URG+ACK+PSH+RST+SYN+FIN\n\ntypedef struct _TCPPACKET           // TCP封包 <当ip中没有附加数据时>\n{\n    EthernetHeader  Ehhdr;\n    IPHeader        Iphdr;\n    TcpHeader       Tcphdr;\n}TCPPACKET, *PTCPPACKET;\n```\n\nSYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n如果只是单个的一个SYN，它表示的只是建立连接。\n\n\n\n参考\n- - -\n- http://bbs.pediy.com/thread-147644.htm\n- http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html\n- http://www.9upk.com/article/2537.html （抓包工具教程）\n\n\n  [1]: http://static.zybuluo.com/AlexLin/4224884og6inde3h2q5wcw6a/image.png\n  [2]: http://static.zybuluo.com/AlexLin/zrfd5f3v3q3o8bjdjay8oxc1/image.png\n  [3]: http://static.zybuluo.com/AlexLin/9i2ohkrz9yuzz9r9bl2e03uy/image.png\n  [4]: http://static.zybuluo.com/AlexLin/hfo94lx43waw32h7modimump/image.png\n  [5]: http://static.zybuluo.com/AlexLin/kyugitt8dt3gmr6giuztsm6d/image.png\n  [6]: http://static.zybuluo.com/AlexLin/5agc64rl32b44qhqvbj533ug/image.png\n  [7]: http://static.zybuluo.com/AlexLin/3eqzyyj3av3lr9a6kafu9xnx/image.png\n  [8]: http://static.zybuluo.com/AlexLin/sahnt2ey9phdwwclu1q4hnke/image.png\n  [9]: http://static.zybuluo.com/AlexLin/gzzy5f4qh90wvu1992k61on7/image.png","source":"_posts/WireShark 网络抓包.md","raw":"---\ntitle: WireShark网络抓包\ndate: 2017-07-01 19:19:11\ntags: [抓包工具,wireShark]\ncategories: 工具\n---\n\n---\n## WireShark入门\n### 一、 打开WireShark\n![WireShark启动界面][1]\n\n<!--more-->\n### 二、界面分区\n![WireShark界面划分][2]\n### 三、过滤规则语句\n\n-  IP 过滤\n```\nip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107\n#或者\nip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP\n```\n\n-  过滤端口\n```\ntcp.port eq 80 // 不管端口是来源的还是目标的都显示\ntcp.port == 80\ntcp.port eq 2722\ntcp.port eq 80 or udp.port eq 80\ntcp.dstport == 80 // 只显tcp协议的目标端口80\ntcp.srcport == 80 // 只显tcp协议的来源端口80\n#端口范围\ntcp.port >= 1 and tcp.port <= 80\n```\n- 协议过滤\n```\ntcp、udp、arp、icmp、http、smtp、ftp、dns、msnms、ip、ssl、oicq、bootp #等等.\n#排除\n#排除arp包\n!arp  或者  not arp\n```\n- mac 过滤\n```\neth.dst == A0:00:00:04:C5:84 //过滤目标mac\neth.src eq A0:00:00:04:C5:84 //过滤来源mac\neth.dst==A0:00:00:04:C5:84\neth.dst==A0-00-00-04-C5-84\neth.addr eq A0:00:00:04:C5:84 //过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的MAC\n```\n- 数据包长度过滤\n```\nudp.length == 26 #这个长度是指udp本身固定长度8加上udp下面那块数据包之和\ntcp.len >= 7  #指的是ip数据包(tcp下面那块数据),不包括tcp本身\nip.len == 94 #除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后\nframe.len == 119 #整个数据包长度,从eth开始到最后\n#数据包组成成员\neth ---> ip or arp ---> tcp or udp ---> data\n```\n\n- http模式过滤\n```\nhttp.request.method == \"GET\"\nhttp.request.method == \"POST\"\nhttp.request.uri == \"/img/logo-edu.gif\"\nhttp contains \"GET\"\nhttp contains \"HTTP/1.\"\n\n// GET包\nhttp.request.method == \"GET\" && http contains \"Host: \"\nhttp.request.method == \"GET\" && http contains \"User-Agent: \"\n// POST包\nhttp.request.method == \"POST\" && http contains \"Host: \"\nhttp.request.method == \"POST\" && http contains \"User-Agent: \"\n// 响应包\nhttp contains \"HTTP/1.1 200 OK\" && http contains \"Content-Type: \"\nhttp contains \"HTTP/1.0 200 OK\" && http contains \"Content-Type: \"\n```\n- 两种条件成立过滤\n```\n过滤两种条件时，使用and连接，\n如过滤ip为192.168.101.8并且为http协议的，ip.src==192.168.101.8 and http。\n```\n- 域名过滤\n```\nhttp.host == \"gizwits.com\"\n```\n### 四、TCP包分析\n\n#### **一个TCP包由5部分组成分别是:**\n\n1. Frame:   物理层的数据帧概况\n2. Ethernet II: 数据链路层以太网帧头部信息\n3. Internet Protocol Version 4: 互联网层IP包头部信息\n4. Transmission Control Protocol:  传输层T的数据段头部信息，此处是mqtt\n5. Hypertext Transfer Protocol/Data:  应用层的信息，此处是mqtt协议\n\n#### **与之对应的网络七层协议图如下**\n![tcp数据层][3]\n#### OSI 参考模型与 TCP/IP分层模型\n![OSI 参考模型与 TCP/IP分层模型][5]\n\n#### **TCP 三次握手**\n**图片版本**\n![TCP三次握手][6]\n#### **WireShark抓包分析图**\n##### **第一次握手**\n代表客户端请求建立连接\n```\nSEQ=0\nACK=0\nFLAGS = 0x0002 （SYN）\n```\n**WireShark第一次TCP握手图**\n![TCP 第一次握手][7]\n\n##### **第二次握手：**\n服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SEQ加1以.即ACK=SEQ+1\n```\nSEQ = 0\nACK = SEQ+1\nFLAGS = 0X0012（SYN +ACK）\n```\n**WireShark第二次TCP握手图**\n![TCP 第二次握手][8]\n\n\n##### **第三次握手**\n客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放确在SEQ字段中发送给对方.\n```\nSEQ =SEQ+1\nACK = 1;\nFLAGS = 0X0001（ACK）\n```\n![TCP 第三次握手][9]\n\n### 五、WireShark 抓包异常情况分析\n\n#### 1. **tcp out-of-order**（tcp有问题）\n>**原因:** 应该有很多原因。但是多半是网络拥塞，导致顺序包抵达时间不同，延时太长，或者包丢失，需要重新组合数据单元 因为他们可能是通过不同的路径到达你电脑上面的。\n\n#### 2. **tcp segment of a reassembled PDU**\n>**原因:** 在连个连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，在局域网内一般都是**1460**.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了**“TCP segment of a reassembled PDU”**。TCP在发起连接的第一个报文的TCP头里通过MSS这个可选项告知对方本端能够接收的最大报文（当然，这个大小是TCP净荷的大小），以太网上这个值一般设置成1460，因为1460Byte净荷+20Byte TCP头+20Byte IP头 ＝ 1500字节，正好符合链路层最大报文的要求，被标记了的包的SEQ和ACK都和原来的包一致。\n#### 3. **Tcp previous segment lost（tcp先前的分片丢失）**\n>一般是网络中的网络设备发生的拥塞了，触发了TCP的拥塞控制机制。它告诉发送方数据段丢失；\n（1）、“TCP Previous segment lost” errors are not “fatal” errors. They simply indicate that the sequence number in the arriving packet is higher than the next-expected sequence number, indicating that at least one segment was dropped/lost. The receiving station remedies this situation by sending duplicate ACKs for each additional packet it receives until the sender retransmits the missing packet(s). TCP is designed to recover from this situation, which is why the image is downloaded correctly despite having a (briefly) missing packet.\nIf you are getting a large number of lost packets, then there is likely a communication problem between the sender and receiver. A common cause of this is un-matched duplex settings between the PC and the switch.\nWe (our lab) recently upgraded to Ethereal 0.10.14 with WinPCap 3.1.  If I remember correctly, we had previously been using 0.10.2 with WinPCap 3.0.  However, since the upgrade we have been noticing several issues.\nThe first issue is with “TCP Previous segment lost” and “TCP CHECKSUM INCORRECT” messages appearing in the Packet Listing window.  We do not remember seeing these in the previous version of Ethereal, or at least not nearly as many as we are seeing now.  For example, one task for the student instructional part of the lab involves visiting a website containing two images and observing the network activity.  After the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response packet, but the response packet for the other image will be displayed as “TCP Previous segment lost.”  However, both images are downloaded and displayed perfectly fine in the browser.  I would think that the segment lost error would mean the object wasn’t returned correctly and shouldn’t be able to be displayed, but apparently that is not the case.  (The cache had been cleared when this was performed, so it was not defaulting to a local copy of the image.)\nAnother problem we’ve been noticing is that some packets simply aren’t displayed in the Packet Listing window, even when they are obviously received.  Using the same example as above, after the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response, but the other response will not appear.  Yet both images are successfully displayed in the browser.  Is this a problem with Ethereal not detecting the packets?\nI’m not sure how typical this is, but we seem to be experiencing these issues often with 0.10.14 while we never did with 0.10.2.  Could it also be an issue with WinPCap, and not necessarily Ethereal?  I’m just trying to find some answers as to why we are seeing a sudden abundance of TCP related errors and uncaptured packets.  Thanks.\n（2）、I have a network client application that runs fine while I am debugging (no TCP errors),\nbut when I run the release version, it runs incredibly slow.  It runs as a series of\ntransactions, where each transaction is a separate connection to the server.  Wireshark\nanalysis has determined that about 50% of all transactions involve the series:\nTCP Previous Segment Lost\n\n#### 4. Tcpacked lost segment（tcp应答丢失）\n#### 5. Tcp window update（tcp窗口更新）\n#### 6. Tcp dup ack（tcp重复应答）\n>1)当收到tcp out-of-order 信号时，可能发送该信号， 这个相同应答的意图是让对端知道一个分片被收到的时候出现问题，并且告诉它希望得到的序列号。\n2)由于TCP不知道重复的ACK是由丢失的段引起的还是仅仅是重新排序段，所以等待接收到少量的重复的ACK。 假设如果只有段的重新排序，则在重新排序的段被处理之前将只有一个或两个重复的ACK，然后将生成新的ACK。 如果在一行中接收到三个或更多个重复的ACK，则表明段已经丢失。 TCP然后执行似乎是丢失段的重传，而不等待重传定时器到期。\n\n#### 7. **Tcp keep alive**（tcp保持活动）\n>在TCP中有一个Keep-alive的机制可以检测死连接，原理很简单，TCP会在空闲了一定时间后发送数据给对方：\n 1.如果主机可达，对方就会响应ACK应答，就认为是存活的。\n 2.如果可达，但应用程序退出，对方就发RST应答，发送TCP撤消连接。\n 3.如果可达，但应用程序崩溃，对方就发FIN消息。\n 4.如果对方主机不响应ack, rst，继续发送直到超时，就撤消连接。这个时间就是默认的二个小时。\n\n#### 8. **Tcp retransmission**（tcp重传）\n>作为一个可靠的传输协议，传输控制协议（TCP）在发送主机需要从目标主机收到一个包时确认。If the sender does not receive that acknowledgment within a certain amount of time, it acts under the assumption that the packet did not reach its destination and retransmits the packet.如果发件人没有收到的时间内一定之金额，确认，它的行为假设下，该数据包没有到达其目的地，以及转发数据包。\n\n\n## TCP 状态分析\nTCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n它们的含义是：\n\n 1. SYN(synchronous): 表示建立连接.\n 2. FIN(finish): 表示关闭连接.\n 3. ACK(acknowledgement): 表示响应.\n 4. PSH(push): 表示有DATA数据传输.\n 5. RST(reset): 表示连接重置.\n 6. URG(urgent):紧急.\n 7. SEQ(Sequence number):顺序号码\n\n## TCP 三次握手流程\n1. 主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n2. 主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；\n3. 主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。\n\n## 各种网络包头格式\n### 以太网头\n```\n// MAC地址长度\n#define MAC_ADDRESS_LEN 6\n\n// 常用的以太网帧类型\n#define ETHERNET_FRAME_IP       0x0800              // IP帧\n#define ETHERNET_FRAME_ARP      0x0806              // ARP帧\n#define ETHERNET_FRAME_RARP     0x8035              // RARP帧\n#define ETHERNET_FRAME_IPv6     0x86DD              // IP6帧\n\ntypedef struct _EthernetHeader      // 以太头\n{\n    UCHAR       DstMacAddr[MAC_ADDRESS_LEN];        // 目标MAC\n    UCHAR       SrcMacAddr[MAC_ADDRESS_LEN];        // 源MAC\n    USHORT      FrmType;                            // 类型\n}EthernetHeader, *PEthernetHeader;\n```\n### TCP 包格式\n```\n0                            15                              31\n-----------------------------------------------------------------\n|          source port          |       destination port        |\n-----------------------------------------------------------------\n|                        sequence number                        |\n-----------------------------------------------------------------\n|                     acknowledgment number                     |\n-----------------------------------------------------------------\n|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\n-----------------------------------------------------------------\n|         TCP checksum          |       urgent pointer          |\n-----------------------------------------------------------------\n|                           Optional                            |\n-----------------------------------------------------------------\n|                              Data                             |\n-----------------------------------------------------------------\n\n// TCP头标志位掩码 OffFlag\n#define TCP_HDR_LEN             0xF000              // TCP头长度<双字的个数>转化为字节数需要x4\n#define TCP_URG_FLAG            0x0020              // URG标志\n#define TCP_ACK_FLAG            0x0010              // ACK标志 应答1或请求0\n#define TCP_PSH_FLAG            0x0008              // psh标志 以最快速度传输数据\n#define TCP_RST_FLAG            0x0004              // RST标志 先断开连接,再重建连接\n#define TCP_SYN_FLAG            0x0002              // SYN标志 用来建立连接\n#define TCP_FIN_FLAG            0x0001              // FIN标志 发送方完成数据发送\n\ntypedef struct _TcpHeader           // TCP头 20 BYTES\n{\n    USHORT      SrcPort;                            // 源端口\n    USHORT      DstPort;                            // 目的端口\n    ULONG       SeqNum;                             // 序号\n    ULONG       AckNum;                             // 确认号\n    USHORT      OffFlag;                            // 首部长度<首部双字的个数>+保留位+标志位\n    USHORT      WndSize;                            // 窗口大小<实现流量控制>\n    USHORT      Checksum;                           // 效验和\n    USHORT      UrgPointer;                         // 紧急指针\n}TcpHeader, *PTcpHeader;\n\n// OffFlag : 4位首部长度 + 6位保留位 + URG+ACK+PSH+RST+SYN+FIN\n\ntypedef struct _TCPPACKET           // TCP封包 <当ip中没有附加数据时>\n{\n    EthernetHeader  Ehhdr;\n    IPHeader        Iphdr;\n    TcpHeader       Tcphdr;\n}TCPPACKET, *PTCPPACKET;\n```\n\nSYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n如果只是单个的一个SYN，它表示的只是建立连接。\n\n\n\n参考\n- - -\n- http://bbs.pediy.com/thread-147644.htm\n- http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html\n- http://www.9upk.com/article/2537.html （抓包工具教程）\n\n\n  [1]: http://static.zybuluo.com/AlexLin/4224884og6inde3h2q5wcw6a/image.png\n  [2]: http://static.zybuluo.com/AlexLin/zrfd5f3v3q3o8bjdjay8oxc1/image.png\n  [3]: http://static.zybuluo.com/AlexLin/9i2ohkrz9yuzz9r9bl2e03uy/image.png\n  [4]: http://static.zybuluo.com/AlexLin/hfo94lx43waw32h7modimump/image.png\n  [5]: http://static.zybuluo.com/AlexLin/kyugitt8dt3gmr6giuztsm6d/image.png\n  [6]: http://static.zybuluo.com/AlexLin/5agc64rl32b44qhqvbj533ug/image.png\n  [7]: http://static.zybuluo.com/AlexLin/3eqzyyj3av3lr9a6kafu9xnx/image.png\n  [8]: http://static.zybuluo.com/AlexLin/sahnt2ey9phdwwclu1q4hnke/image.png\n  [9]: http://static.zybuluo.com/AlexLin/gzzy5f4qh90wvu1992k61on7/image.png","slug":"WireShark 网络抓包","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7y000ytns195yxb8i1","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h2 id=\"WireShark入门\"><a href=\"#WireShark入门\" class=\"headerlink\" title=\"WireShark入门\"></a>WireShark入门</h2><h3 id=\"一、-打开WireShark\"><a href=\"#一、-打开WireShark\" class=\"headerlink\" title=\"一、 打开WireShark\"></a>一、 打开WireShark</h3><p><img src=\"http://static.zybuluo.com/AlexLin/4224884og6inde3h2q5wcw6a/image.png\" alt=\"WireShark启动界面\"></p>\n<a id=\"more\"></a>\n<h3 id=\"二、界面分区\"><a href=\"#二、界面分区\" class=\"headerlink\" title=\"二、界面分区\"></a>二、界面分区</h3><p><img src=\"http://static.zybuluo.com/AlexLin/zrfd5f3v3q3o8bjdjay8oxc1/image.png\" alt=\"WireShark界面划分\"></p>\n<h3 id=\"三、过滤规则语句\"><a href=\"#三、过滤规则语句\" class=\"headerlink\" title=\"三、过滤规则语句\"></a>三、过滤规则语句</h3><ul>\n<li><p>IP 过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107</div><div class=\"line\">#或者</div><div class=\"line\">ip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP</div></pre></td></tr></table></figure>\n</li>\n<li><p>过滤端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcp.port eq 80 // 不管端口是来源的还是目标的都显示</div><div class=\"line\">tcp.port == 80</div><div class=\"line\">tcp.port eq 2722</div><div class=\"line\">tcp.port eq 80 or udp.port eq 80</div><div class=\"line\">tcp.dstport == 80 // 只显tcp协议的目标端口80</div><div class=\"line\">tcp.srcport == 80 // 只显tcp协议的来源端口80</div><div class=\"line\">#端口范围</div><div class=\"line\">tcp.port &gt;= 1 and tcp.port &lt;= 80</div></pre></td></tr></table></figure>\n</li>\n<li><p>协议过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcp、udp、arp、icmp、http、smtp、ftp、dns、msnms、ip、ssl、oicq、bootp #等等.</div><div class=\"line\">#排除</div><div class=\"line\">#排除arp包</div><div class=\"line\">!arp  或者  not arp</div></pre></td></tr></table></figure>\n</li>\n<li><p>mac 过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">eth.dst == A0:00:00:04:C5:84 //过滤目标mac</div><div class=\"line\">eth.src eq A0:00:00:04:C5:84 //过滤来源mac</div><div class=\"line\">eth.dst==A0:00:00:04:C5:84</div><div class=\"line\">eth.dst==A0-00-00-04-C5-84</div><div class=\"line\">eth.addr eq A0:00:00:04:C5:84 //过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的MAC</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据包长度过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">udp.length == 26 #这个长度是指udp本身固定长度8加上udp下面那块数据包之和</div><div class=\"line\">tcp.len &gt;= 7  #指的是ip数据包(tcp下面那块数据),不包括tcp本身</div><div class=\"line\">ip.len == 94 #除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后</div><div class=\"line\">frame.len == 119 #整个数据包长度,从eth开始到最后</div><div class=\"line\">#数据包组成成员</div><div class=\"line\">eth ---&gt; ip or arp ---&gt; tcp or udp ---&gt; data</div></pre></td></tr></table></figure>\n</li>\n<li><p>http模式过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.request.method == &quot;GET&quot;</div><div class=\"line\">http.request.method == &quot;POST&quot;</div><div class=\"line\">http.request.uri == &quot;/img/logo-edu.gif&quot;</div><div class=\"line\">http contains &quot;GET&quot;</div><div class=\"line\">http contains &quot;HTTP/1.&quot;</div><div class=\"line\"></div><div class=\"line\">// GET包</div><div class=\"line\">http.request.method == &quot;GET&quot; &amp;&amp; http contains &quot;Host: &quot;</div><div class=\"line\">http.request.method == &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent: &quot;</div><div class=\"line\">// POST包</div><div class=\"line\">http.request.method == &quot;POST&quot; &amp;&amp; http contains &quot;Host: &quot;</div><div class=\"line\">http.request.method == &quot;POST&quot; &amp;&amp; http contains &quot;User-Agent: &quot;</div><div class=\"line\">// 响应包</div><div class=\"line\">http contains &quot;HTTP/1.1 200 OK&quot; &amp;&amp; http contains &quot;Content-Type: &quot;</div><div class=\"line\">http contains &quot;HTTP/1.0 200 OK&quot; &amp;&amp; http contains &quot;Content-Type: &quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>两种条件成立过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">过滤两种条件时，使用and连接，</div><div class=\"line\">如过滤ip为192.168.101.8并且为http协议的，ip.src==192.168.101.8 and http。</div></pre></td></tr></table></figure>\n</li>\n<li><p>域名过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.host == &quot;gizwits.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、TCP包分析\"><a href=\"#四、TCP包分析\" class=\"headerlink\" title=\"四、TCP包分析\"></a>四、TCP包分析</h3><h4 id=\"一个TCP包由5部分组成分别是\"><a href=\"#一个TCP包由5部分组成分别是\" class=\"headerlink\" title=\"一个TCP包由5部分组成分别是:\"></a><strong>一个TCP包由5部分组成分别是:</strong></h4><ol>\n<li>Frame:   物理层的数据帧概况</li>\n<li>Ethernet II: 数据链路层以太网帧头部信息</li>\n<li>Internet Protocol Version 4: 互联网层IP包头部信息</li>\n<li>Transmission Control Protocol:  传输层T的数据段头部信息，此处是mqtt</li>\n<li>Hypertext Transfer Protocol/Data:  应用层的信息，此处是mqtt协议</li>\n</ol>\n<h4 id=\"与之对应的网络七层协议图如下\"><a href=\"#与之对应的网络七层协议图如下\" class=\"headerlink\" title=\"与之对应的网络七层协议图如下\"></a><strong>与之对应的网络七层协议图如下</strong></h4><p><img src=\"http://static.zybuluo.com/AlexLin/9i2ohkrz9yuzz9r9bl2e03uy/image.png\" alt=\"tcp数据层\"></p>\n<h4 id=\"OSI-参考模型与-TCP-IP分层模型\"><a href=\"#OSI-参考模型与-TCP-IP分层模型\" class=\"headerlink\" title=\"OSI 参考模型与 TCP/IP分层模型\"></a>OSI 参考模型与 TCP/IP分层模型</h4><p><img src=\"http://static.zybuluo.com/AlexLin/kyugitt8dt3gmr6giuztsm6d/image.png\" alt=\"OSI 参考模型与 TCP/IP分层模型\"></p>\n<h4 id=\"TCP-三次握手\"><a href=\"#TCP-三次握手\" class=\"headerlink\" title=\"TCP 三次握手\"></a><strong>TCP 三次握手</strong></h4><p><strong>图片版本</strong><br><img src=\"http://static.zybuluo.com/AlexLin/5agc64rl32b44qhqvbj533ug/image.png\" alt=\"TCP三次握手\"></p>\n<h4 id=\"WireShark抓包分析图\"><a href=\"#WireShark抓包分析图\" class=\"headerlink\" title=\"WireShark抓包分析图\"></a><strong>WireShark抓包分析图</strong></h4><h5 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a><strong>第一次握手</strong></h5><p>代表客户端请求建立连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ=0</div><div class=\"line\">ACK=0</div><div class=\"line\">FLAGS = 0x0002 （SYN）</div></pre></td></tr></table></figure></p>\n<p><strong>WireShark第一次TCP握手图</strong><br><img src=\"http://static.zybuluo.com/AlexLin/3eqzyyj3av3lr9a6kafu9xnx/image.png\" alt=\"TCP 第一次握手\"></p>\n<h5 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a><strong>第二次握手：</strong></h5><p>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SEQ加1以.即ACK=SEQ+1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ = 0</div><div class=\"line\">ACK = SEQ+1</div><div class=\"line\">FLAGS = 0X0012（SYN +ACK）</div></pre></td></tr></table></figure></p>\n<p><strong>WireShark第二次TCP握手图</strong><br><img src=\"http://static.zybuluo.com/AlexLin/sahnt2ey9phdwwclu1q4hnke/image.png\" alt=\"TCP 第二次握手\"></p>\n<h5 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a><strong>第三次握手</strong></h5><p>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放确在SEQ字段中发送给对方.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ =SEQ+1</div><div class=\"line\">ACK = 1;</div><div class=\"line\">FLAGS = 0X0001（ACK）</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://static.zybuluo.com/AlexLin/gzzy5f4qh90wvu1992k61on7/image.png\" alt=\"TCP 第三次握手\"></p>\n<h3 id=\"五、WireShark-抓包异常情况分析\"><a href=\"#五、WireShark-抓包异常情况分析\" class=\"headerlink\" title=\"五、WireShark 抓包异常情况分析\"></a>五、WireShark 抓包异常情况分析</h3><h4 id=\"1-tcp-out-of-order（tcp有问题）\"><a href=\"#1-tcp-out-of-order（tcp有问题）\" class=\"headerlink\" title=\"1. tcp out-of-order（tcp有问题）\"></a>1. <strong>tcp out-of-order</strong>（tcp有问题）</h4><blockquote>\n<p><strong>原因:</strong> 应该有很多原因。但是多半是网络拥塞，导致顺序包抵达时间不同，延时太长，或者包丢失，需要重新组合数据单元 因为他们可能是通过不同的路径到达你电脑上面的。</p>\n</blockquote>\n<h4 id=\"2-tcp-segment-of-a-reassembled-PDU\"><a href=\"#2-tcp-segment-of-a-reassembled-PDU\" class=\"headerlink\" title=\"2. tcp segment of a reassembled PDU\"></a>2. <strong>tcp segment of a reassembled PDU</strong></h4><blockquote>\n<p><strong>原因:</strong> 在连个连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，在局域网内一般都是<strong>1460</strong>.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了<strong>“TCP segment of a reassembled PDU”</strong>。TCP在发起连接的第一个报文的TCP头里通过MSS这个可选项告知对方本端能够接收的最大报文（当然，这个大小是TCP净荷的大小），以太网上这个值一般设置成1460，因为1460Byte净荷+20Byte TCP头+20Byte IP头 ＝ 1500字节，正好符合链路层最大报文的要求，被标记了的包的SEQ和ACK都和原来的包一致。</p>\n<h4 id=\"3-Tcp-previous-segment-lost（tcp先前的分片丢失）\"><a href=\"#3-Tcp-previous-segment-lost（tcp先前的分片丢失）\" class=\"headerlink\" title=\"3. Tcp previous segment lost（tcp先前的分片丢失）\"></a>3. <strong>Tcp previous segment lost（tcp先前的分片丢失）</strong></h4><p>一般是网络中的网络设备发生的拥塞了，触发了TCP的拥塞控制机制。它告诉发送方数据段丢失；<br>（1）、“TCP Previous segment lost” errors are not “fatal” errors. They simply indicate that the sequence number in the arriving packet is higher than the next-expected sequence number, indicating that at least one segment was dropped/lost. The receiving station remedies this situation by sending duplicate ACKs for each additional packet it receives until the sender retransmits the missing packet(s). TCP is designed to recover from this situation, which is why the image is downloaded correctly despite having a (briefly) missing packet.<br>If you are getting a large number of lost packets, then there is likely a communication problem between the sender and receiver. A common cause of this is un-matched duplex settings between the PC and the switch.<br>We (our lab) recently upgraded to Ethereal 0.10.14 with WinPCap 3.1.  If I remember correctly, we had previously been using 0.10.2 with WinPCap 3.0.  However, since the upgrade we have been noticing several issues.<br>The first issue is with “TCP Previous segment lost” and “TCP CHECKSUM INCORRECT” messages appearing in the Packet Listing window.  We do not remember seeing these in the previous version of Ethereal, or at least not nearly as many as we are seeing now.  For example, one task for the student instructional part of the lab involves visiting a website containing two images and observing the network activity.  After the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response packet, but the response packet for the other image will be displayed as “TCP Previous segment lost.”  However, both images are downloaded and displayed perfectly fine in the browser.  I would think that the segment lost error would mean the object wasn’t returned correctly and shouldn’t be able to be displayed, but apparently that is not the case.  (The cache had been cleared when this was performed, so it was not defaulting to a local copy of the image.)<br>Another problem we’ve been noticing is that some packets simply aren’t displayed in the Packet Listing window, even when they are obviously received.  Using the same example as above, after the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response, but the other response will not appear.  Yet both images are successfully displayed in the browser.  Is this a problem with Ethereal not detecting the packets?<br>I’m not sure how typical this is, but we seem to be experiencing these issues often with 0.10.14 while we never did with 0.10.2.  Could it also be an issue with WinPCap, and not necessarily Ethereal?  I’m just trying to find some answers as to why we are seeing a sudden abundance of TCP related errors and uncaptured packets.  Thanks.<br>（2）、I have a network client application that runs fine while I am debugging (no TCP errors),<br>but when I run the release version, it runs incredibly slow.  It runs as a series of<br>transactions, where each transaction is a separate connection to the server.  Wireshark<br>analysis has determined that about 50% of all transactions involve the series:<br>TCP Previous Segment Lost</p>\n</blockquote>\n<h4 id=\"4-Tcpacked-lost-segment（tcp应答丢失）\"><a href=\"#4-Tcpacked-lost-segment（tcp应答丢失）\" class=\"headerlink\" title=\"4. Tcpacked lost segment（tcp应答丢失）\"></a>4. Tcpacked lost segment（tcp应答丢失）</h4><h4 id=\"5-Tcp-window-update（tcp窗口更新）\"><a href=\"#5-Tcp-window-update（tcp窗口更新）\" class=\"headerlink\" title=\"5. Tcp window update（tcp窗口更新）\"></a>5. Tcp window update（tcp窗口更新）</h4><h4 id=\"6-Tcp-dup-ack（tcp重复应答）\"><a href=\"#6-Tcp-dup-ack（tcp重复应答）\" class=\"headerlink\" title=\"6. Tcp dup ack（tcp重复应答）\"></a>6. Tcp dup ack（tcp重复应答）</h4><blockquote>\n<p>1)当收到tcp out-of-order 信号时，可能发送该信号， 这个相同应答的意图是让对端知道一个分片被收到的时候出现问题，并且告诉它希望得到的序列号。<br>2)由于TCP不知道重复的ACK是由丢失的段引起的还是仅仅是重新排序段，所以等待接收到少量的重复的ACK。 假设如果只有段的重新排序，则在重新排序的段被处理之前将只有一个或两个重复的ACK，然后将生成新的ACK。 如果在一行中接收到三个或更多个重复的ACK，则表明段已经丢失。 TCP然后执行似乎是丢失段的重传，而不等待重传定时器到期。</p>\n</blockquote>\n<h4 id=\"7-Tcp-keep-alive（tcp保持活动）\"><a href=\"#7-Tcp-keep-alive（tcp保持活动）\" class=\"headerlink\" title=\"7. Tcp keep alive（tcp保持活动）\"></a>7. <strong>Tcp keep alive</strong>（tcp保持活动）</h4><blockquote>\n<p>在TCP中有一个Keep-alive的机制可以检测死连接，原理很简单，TCP会在空闲了一定时间后发送数据给对方：<br> 1.如果主机可达，对方就会响应ACK应答，就认为是存活的。<br> 2.如果可达，但应用程序退出，对方就发RST应答，发送TCP撤消连接。<br> 3.如果可达，但应用程序崩溃，对方就发FIN消息。<br> 4.如果对方主机不响应ack, rst，继续发送直到超时，就撤消连接。这个时间就是默认的二个小时。</p>\n</blockquote>\n<h4 id=\"8-Tcp-retransmission（tcp重传）\"><a href=\"#8-Tcp-retransmission（tcp重传）\" class=\"headerlink\" title=\"8. Tcp retransmission（tcp重传）\"></a>8. <strong>Tcp retransmission</strong>（tcp重传）</h4><blockquote>\n<p>作为一个可靠的传输协议，传输控制协议（TCP）在发送主机需要从目标主机收到一个包时确认。If the sender does not receive that acknowledgment within a certain amount of time, it acts under the assumption that the packet did not reach its destination and retransmits the packet.如果发件人没有收到的时间内一定之金额，确认，它的行为假设下，该数据包没有到达其目的地，以及转发数据包。</p>\n</blockquote>\n<h2 id=\"TCP-状态分析\"><a href=\"#TCP-状态分析\" class=\"headerlink\" title=\"TCP 状态分析\"></a>TCP 状态分析</h2><p>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)<br>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.<br>它们的含义是：</p>\n<ol>\n<li>SYN(synchronous): 表示建立连接.</li>\n<li>FIN(finish): 表示关闭连接.</li>\n<li>ACK(acknowledgement): 表示响应.</li>\n<li>PSH(push): 表示有DATA数据传输.</li>\n<li>RST(reset): 表示连接重置.</li>\n<li>URG(urgent):紧急.</li>\n<li>SEQ(Sequence number):顺序号码</li>\n</ol>\n<h2 id=\"TCP-三次握手流程\"><a href=\"#TCP-三次握手流程\" class=\"headerlink\" title=\"TCP 三次握手流程\"></a>TCP 三次握手流程</h2><ol>\n<li>主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li>\n<li>主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</li>\n<li>主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li>\n</ol>\n<h2 id=\"各种网络包头格式\"><a href=\"#各种网络包头格式\" class=\"headerlink\" title=\"各种网络包头格式\"></a>各种网络包头格式</h2><h3 id=\"以太网头\"><a href=\"#以太网头\" class=\"headerlink\" title=\"以太网头\"></a>以太网头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// MAC地址长度</div><div class=\"line\">#define MAC_ADDRESS_LEN 6</div><div class=\"line\"></div><div class=\"line\">// 常用的以太网帧类型</div><div class=\"line\">#define ETHERNET_FRAME_IP       0x0800              // IP帧</div><div class=\"line\">#define ETHERNET_FRAME_ARP      0x0806              // ARP帧</div><div class=\"line\">#define ETHERNET_FRAME_RARP     0x8035              // RARP帧</div><div class=\"line\">#define ETHERNET_FRAME_IPv6     0x86DD              // IP6帧</div><div class=\"line\"></div><div class=\"line\">typedef struct _EthernetHeader      // 以太头</div><div class=\"line\">&#123;</div><div class=\"line\">    UCHAR       DstMacAddr[MAC_ADDRESS_LEN];        // 目标MAC</div><div class=\"line\">    UCHAR       SrcMacAddr[MAC_ADDRESS_LEN];        // 源MAC</div><div class=\"line\">    USHORT      FrmType;                            // 类型</div><div class=\"line\">&#125;EthernetHeader, *PEthernetHeader;</div></pre></td></tr></table></figure>\n<h3 id=\"TCP-包格式\"><a href=\"#TCP-包格式\" class=\"headerlink\" title=\"TCP 包格式\"></a>TCP 包格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">0                            15                              31</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|          source port          |       destination port        |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                        sequence number                        |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                     acknowledgment number                     |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|         TCP checksum          |       urgent pointer          |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                           Optional                            |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                              Data                             |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">// TCP头标志位掩码 OffFlag</div><div class=\"line\">#define TCP_HDR_LEN             0xF000              // TCP头长度&lt;双字的个数&gt;转化为字节数需要x4</div><div class=\"line\">#define TCP_URG_FLAG            0x0020              // URG标志</div><div class=\"line\">#define TCP_ACK_FLAG            0x0010              // ACK标志 应答1或请求0</div><div class=\"line\">#define TCP_PSH_FLAG            0x0008              // psh标志 以最快速度传输数据</div><div class=\"line\">#define TCP_RST_FLAG            0x0004              // RST标志 先断开连接,再重建连接</div><div class=\"line\">#define TCP_SYN_FLAG            0x0002              // SYN标志 用来建立连接</div><div class=\"line\">#define TCP_FIN_FLAG            0x0001              // FIN标志 发送方完成数据发送</div><div class=\"line\"></div><div class=\"line\">typedef struct _TcpHeader           // TCP头 20 BYTES</div><div class=\"line\">&#123;</div><div class=\"line\">    USHORT      SrcPort;                            // 源端口</div><div class=\"line\">    USHORT      DstPort;                            // 目的端口</div><div class=\"line\">    ULONG       SeqNum;                             // 序号</div><div class=\"line\">    ULONG       AckNum;                             // 确认号</div><div class=\"line\">    USHORT      OffFlag;                            // 首部长度&lt;首部双字的个数&gt;+保留位+标志位</div><div class=\"line\">    USHORT      WndSize;                            // 窗口大小&lt;实现流量控制&gt;</div><div class=\"line\">    USHORT      Checksum;                           // 效验和</div><div class=\"line\">    USHORT      UrgPointer;                         // 紧急指针</div><div class=\"line\">&#125;TcpHeader, *PTcpHeader;</div><div class=\"line\"></div><div class=\"line\">// OffFlag : 4位首部长度 + 6位保留位 + URG+ACK+PSH+RST+SYN+FIN</div><div class=\"line\"></div><div class=\"line\">typedef struct _TCPPACKET           // TCP封包 &lt;当ip中没有附加数据时&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    EthernetHeader  Ehhdr;</div><div class=\"line\">    IPHeader        Iphdr;</div><div class=\"line\">    TcpHeader       Tcphdr;</div><div class=\"line\">&#125;TCPPACKET, *PTCPPACKET;</div></pre></td></tr></table></figure>\n<p>SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，<br>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>参考</p>\n<hr>\n<ul>\n<li><a href=\"http://bbs.pediy.com/thread-147644.htm\" target=\"_blank\" rel=\"external\">http://bbs.pediy.com/thread-147644.htm</a></li>\n<li><a href=\"http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html\" target=\"_blank\" rel=\"external\">http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html</a></li>\n<li><a href=\"http://www.9upk.com/article/2537.html\" target=\"_blank\" rel=\"external\">http://www.9upk.com/article/2537.html</a> （抓包工具教程）</li>\n</ul>\n","excerpt":"<hr>\n<h2 id=\"WireShark入门\"><a href=\"#WireShark入门\" class=\"headerlink\" title=\"WireShark入门\"></a>WireShark入门</h2><h3 id=\"一、-打开WireShark\"><a href=\"#一、-打开WireShark\" class=\"headerlink\" title=\"一、 打开WireShark\"></a>一、 打开WireShark</h3><p><img src=\"http://static.zybuluo.com/AlexLin/4224884og6inde3h2q5wcw6a/image.png\" alt=\"WireShark启动界面\"></p>","more":"<h3 id=\"二、界面分区\"><a href=\"#二、界面分区\" class=\"headerlink\" title=\"二、界面分区\"></a>二、界面分区</h3><p><img src=\"http://static.zybuluo.com/AlexLin/zrfd5f3v3q3o8bjdjay8oxc1/image.png\" alt=\"WireShark界面划分\"></p>\n<h3 id=\"三、过滤规则语句\"><a href=\"#三、过滤规则语句\" class=\"headerlink\" title=\"三、过滤规则语句\"></a>三、过滤规则语句</h3><ul>\n<li><p>IP 过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107</div><div class=\"line\">#或者</div><div class=\"line\">ip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP</div></pre></td></tr></table></figure>\n</li>\n<li><p>过滤端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcp.port eq 80 // 不管端口是来源的还是目标的都显示</div><div class=\"line\">tcp.port == 80</div><div class=\"line\">tcp.port eq 2722</div><div class=\"line\">tcp.port eq 80 or udp.port eq 80</div><div class=\"line\">tcp.dstport == 80 // 只显tcp协议的目标端口80</div><div class=\"line\">tcp.srcport == 80 // 只显tcp协议的来源端口80</div><div class=\"line\">#端口范围</div><div class=\"line\">tcp.port &gt;= 1 and tcp.port &lt;= 80</div></pre></td></tr></table></figure>\n</li>\n<li><p>协议过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcp、udp、arp、icmp、http、smtp、ftp、dns、msnms、ip、ssl、oicq、bootp #等等.</div><div class=\"line\">#排除</div><div class=\"line\">#排除arp包</div><div class=\"line\">!arp  或者  not arp</div></pre></td></tr></table></figure>\n</li>\n<li><p>mac 过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">eth.dst == A0:00:00:04:C5:84 //过滤目标mac</div><div class=\"line\">eth.src eq A0:00:00:04:C5:84 //过滤来源mac</div><div class=\"line\">eth.dst==A0:00:00:04:C5:84</div><div class=\"line\">eth.dst==A0-00-00-04-C5-84</div><div class=\"line\">eth.addr eq A0:00:00:04:C5:84 //过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的MAC</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据包长度过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">udp.length == 26 #这个长度是指udp本身固定长度8加上udp下面那块数据包之和</div><div class=\"line\">tcp.len &gt;= 7  #指的是ip数据包(tcp下面那块数据),不包括tcp本身</div><div class=\"line\">ip.len == 94 #除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后</div><div class=\"line\">frame.len == 119 #整个数据包长度,从eth开始到最后</div><div class=\"line\">#数据包组成成员</div><div class=\"line\">eth ---&gt; ip or arp ---&gt; tcp or udp ---&gt; data</div></pre></td></tr></table></figure>\n</li>\n<li><p>http模式过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.request.method == &quot;GET&quot;</div><div class=\"line\">http.request.method == &quot;POST&quot;</div><div class=\"line\">http.request.uri == &quot;/img/logo-edu.gif&quot;</div><div class=\"line\">http contains &quot;GET&quot;</div><div class=\"line\">http contains &quot;HTTP/1.&quot;</div><div class=\"line\"></div><div class=\"line\">// GET包</div><div class=\"line\">http.request.method == &quot;GET&quot; &amp;&amp; http contains &quot;Host: &quot;</div><div class=\"line\">http.request.method == &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent: &quot;</div><div class=\"line\">// POST包</div><div class=\"line\">http.request.method == &quot;POST&quot; &amp;&amp; http contains &quot;Host: &quot;</div><div class=\"line\">http.request.method == &quot;POST&quot; &amp;&amp; http contains &quot;User-Agent: &quot;</div><div class=\"line\">// 响应包</div><div class=\"line\">http contains &quot;HTTP/1.1 200 OK&quot; &amp;&amp; http contains &quot;Content-Type: &quot;</div><div class=\"line\">http contains &quot;HTTP/1.0 200 OK&quot; &amp;&amp; http contains &quot;Content-Type: &quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>两种条件成立过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">过滤两种条件时，使用and连接，</div><div class=\"line\">如过滤ip为192.168.101.8并且为http协议的，ip.src==192.168.101.8 and http。</div></pre></td></tr></table></figure>\n</li>\n<li><p>域名过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.host == &quot;gizwits.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、TCP包分析\"><a href=\"#四、TCP包分析\" class=\"headerlink\" title=\"四、TCP包分析\"></a>四、TCP包分析</h3><h4 id=\"一个TCP包由5部分组成分别是\"><a href=\"#一个TCP包由5部分组成分别是\" class=\"headerlink\" title=\"一个TCP包由5部分组成分别是:\"></a><strong>一个TCP包由5部分组成分别是:</strong></h4><ol>\n<li>Frame:   物理层的数据帧概况</li>\n<li>Ethernet II: 数据链路层以太网帧头部信息</li>\n<li>Internet Protocol Version 4: 互联网层IP包头部信息</li>\n<li>Transmission Control Protocol:  传输层T的数据段头部信息，此处是mqtt</li>\n<li>Hypertext Transfer Protocol/Data:  应用层的信息，此处是mqtt协议</li>\n</ol>\n<h4 id=\"与之对应的网络七层协议图如下\"><a href=\"#与之对应的网络七层协议图如下\" class=\"headerlink\" title=\"与之对应的网络七层协议图如下\"></a><strong>与之对应的网络七层协议图如下</strong></h4><p><img src=\"http://static.zybuluo.com/AlexLin/9i2ohkrz9yuzz9r9bl2e03uy/image.png\" alt=\"tcp数据层\"></p>\n<h4 id=\"OSI-参考模型与-TCP-IP分层模型\"><a href=\"#OSI-参考模型与-TCP-IP分层模型\" class=\"headerlink\" title=\"OSI 参考模型与 TCP/IP分层模型\"></a>OSI 参考模型与 TCP/IP分层模型</h4><p><img src=\"http://static.zybuluo.com/AlexLin/kyugitt8dt3gmr6giuztsm6d/image.png\" alt=\"OSI 参考模型与 TCP/IP分层模型\"></p>\n<h4 id=\"TCP-三次握手\"><a href=\"#TCP-三次握手\" class=\"headerlink\" title=\"TCP 三次握手\"></a><strong>TCP 三次握手</strong></h4><p><strong>图片版本</strong><br><img src=\"http://static.zybuluo.com/AlexLin/5agc64rl32b44qhqvbj533ug/image.png\" alt=\"TCP三次握手\"></p>\n<h4 id=\"WireShark抓包分析图\"><a href=\"#WireShark抓包分析图\" class=\"headerlink\" title=\"WireShark抓包分析图\"></a><strong>WireShark抓包分析图</strong></h4><h5 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a><strong>第一次握手</strong></h5><p>代表客户端请求建立连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ=0</div><div class=\"line\">ACK=0</div><div class=\"line\">FLAGS = 0x0002 （SYN）</div></pre></td></tr></table></figure></p>\n<p><strong>WireShark第一次TCP握手图</strong><br><img src=\"http://static.zybuluo.com/AlexLin/3eqzyyj3av3lr9a6kafu9xnx/image.png\" alt=\"TCP 第一次握手\"></p>\n<h5 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a><strong>第二次握手：</strong></h5><p>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SEQ加1以.即ACK=SEQ+1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ = 0</div><div class=\"line\">ACK = SEQ+1</div><div class=\"line\">FLAGS = 0X0012（SYN +ACK）</div></pre></td></tr></table></figure></p>\n<p><strong>WireShark第二次TCP握手图</strong><br><img src=\"http://static.zybuluo.com/AlexLin/sahnt2ey9phdwwclu1q4hnke/image.png\" alt=\"TCP 第二次握手\"></p>\n<h5 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a><strong>第三次握手</strong></h5><p>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放确在SEQ字段中发送给对方.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEQ =SEQ+1</div><div class=\"line\">ACK = 1;</div><div class=\"line\">FLAGS = 0X0001（ACK）</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://static.zybuluo.com/AlexLin/gzzy5f4qh90wvu1992k61on7/image.png\" alt=\"TCP 第三次握手\"></p>\n<h3 id=\"五、WireShark-抓包异常情况分析\"><a href=\"#五、WireShark-抓包异常情况分析\" class=\"headerlink\" title=\"五、WireShark 抓包异常情况分析\"></a>五、WireShark 抓包异常情况分析</h3><h4 id=\"1-tcp-out-of-order（tcp有问题）\"><a href=\"#1-tcp-out-of-order（tcp有问题）\" class=\"headerlink\" title=\"1. tcp out-of-order（tcp有问题）\"></a>1. <strong>tcp out-of-order</strong>（tcp有问题）</h4><blockquote>\n<p><strong>原因:</strong> 应该有很多原因。但是多半是网络拥塞，导致顺序包抵达时间不同，延时太长，或者包丢失，需要重新组合数据单元 因为他们可能是通过不同的路径到达你电脑上面的。</p>\n</blockquote>\n<h4 id=\"2-tcp-segment-of-a-reassembled-PDU\"><a href=\"#2-tcp-segment-of-a-reassembled-PDU\" class=\"headerlink\" title=\"2. tcp segment of a reassembled PDU\"></a>2. <strong>tcp segment of a reassembled PDU</strong></h4><blockquote>\n<p><strong>原因:</strong> 在连个连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，在局域网内一般都是<strong>1460</strong>.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了<strong>“TCP segment of a reassembled PDU”</strong>。TCP在发起连接的第一个报文的TCP头里通过MSS这个可选项告知对方本端能够接收的最大报文（当然，这个大小是TCP净荷的大小），以太网上这个值一般设置成1460，因为1460Byte净荷+20Byte TCP头+20Byte IP头 ＝ 1500字节，正好符合链路层最大报文的要求，被标记了的包的SEQ和ACK都和原来的包一致。</p>\n<h4 id=\"3-Tcp-previous-segment-lost（tcp先前的分片丢失）\"><a href=\"#3-Tcp-previous-segment-lost（tcp先前的分片丢失）\" class=\"headerlink\" title=\"3. Tcp previous segment lost（tcp先前的分片丢失）\"></a>3. <strong>Tcp previous segment lost（tcp先前的分片丢失）</strong></h4><p>一般是网络中的网络设备发生的拥塞了，触发了TCP的拥塞控制机制。它告诉发送方数据段丢失；<br>（1）、“TCP Previous segment lost” errors are not “fatal” errors. They simply indicate that the sequence number in the arriving packet is higher than the next-expected sequence number, indicating that at least one segment was dropped/lost. The receiving station remedies this situation by sending duplicate ACKs for each additional packet it receives until the sender retransmits the missing packet(s). TCP is designed to recover from this situation, which is why the image is downloaded correctly despite having a (briefly) missing packet.<br>If you are getting a large number of lost packets, then there is likely a communication problem between the sender and receiver. A common cause of this is un-matched duplex settings between the PC and the switch.<br>We (our lab) recently upgraded to Ethereal 0.10.14 with WinPCap 3.1.  If I remember correctly, we had previously been using 0.10.2 with WinPCap 3.0.  However, since the upgrade we have been noticing several issues.<br>The first issue is with “TCP Previous segment lost” and “TCP CHECKSUM INCORRECT” messages appearing in the Packet Listing window.  We do not remember seeing these in the previous version of Ethereal, or at least not nearly as many as we are seeing now.  For example, one task for the student instructional part of the lab involves visiting a website containing two images and observing the network activity.  After the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response packet, but the response packet for the other image will be displayed as “TCP Previous segment lost.”  However, both images are downloaded and displayed perfectly fine in the browser.  I would think that the segment lost error would mean the object wasn’t returned correctly and shouldn’t be able to be displayed, but apparently that is not the case.  (The cache had been cleared when this was performed, so it was not defaulting to a local copy of the image.)<br>Another problem we’ve been noticing is that some packets simply aren’t displayed in the Packet Listing window, even when they are obviously received.  Using the same example as above, after the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response, but the other response will not appear.  Yet both images are successfully displayed in the browser.  Is this a problem with Ethereal not detecting the packets?<br>I’m not sure how typical this is, but we seem to be experiencing these issues often with 0.10.14 while we never did with 0.10.2.  Could it also be an issue with WinPCap, and not necessarily Ethereal?  I’m just trying to find some answers as to why we are seeing a sudden abundance of TCP related errors and uncaptured packets.  Thanks.<br>（2）、I have a network client application that runs fine while I am debugging (no TCP errors),<br>but when I run the release version, it runs incredibly slow.  It runs as a series of<br>transactions, where each transaction is a separate connection to the server.  Wireshark<br>analysis has determined that about 50% of all transactions involve the series:<br>TCP Previous Segment Lost</p>\n</blockquote>\n<h4 id=\"4-Tcpacked-lost-segment（tcp应答丢失）\"><a href=\"#4-Tcpacked-lost-segment（tcp应答丢失）\" class=\"headerlink\" title=\"4. Tcpacked lost segment（tcp应答丢失）\"></a>4. Tcpacked lost segment（tcp应答丢失）</h4><h4 id=\"5-Tcp-window-update（tcp窗口更新）\"><a href=\"#5-Tcp-window-update（tcp窗口更新）\" class=\"headerlink\" title=\"5. Tcp window update（tcp窗口更新）\"></a>5. Tcp window update（tcp窗口更新）</h4><h4 id=\"6-Tcp-dup-ack（tcp重复应答）\"><a href=\"#6-Tcp-dup-ack（tcp重复应答）\" class=\"headerlink\" title=\"6. Tcp dup ack（tcp重复应答）\"></a>6. Tcp dup ack（tcp重复应答）</h4><blockquote>\n<p>1)当收到tcp out-of-order 信号时，可能发送该信号， 这个相同应答的意图是让对端知道一个分片被收到的时候出现问题，并且告诉它希望得到的序列号。<br>2)由于TCP不知道重复的ACK是由丢失的段引起的还是仅仅是重新排序段，所以等待接收到少量的重复的ACK。 假设如果只有段的重新排序，则在重新排序的段被处理之前将只有一个或两个重复的ACK，然后将生成新的ACK。 如果在一行中接收到三个或更多个重复的ACK，则表明段已经丢失。 TCP然后执行似乎是丢失段的重传，而不等待重传定时器到期。</p>\n</blockquote>\n<h4 id=\"7-Tcp-keep-alive（tcp保持活动）\"><a href=\"#7-Tcp-keep-alive（tcp保持活动）\" class=\"headerlink\" title=\"7. Tcp keep alive（tcp保持活动）\"></a>7. <strong>Tcp keep alive</strong>（tcp保持活动）</h4><blockquote>\n<p>在TCP中有一个Keep-alive的机制可以检测死连接，原理很简单，TCP会在空闲了一定时间后发送数据给对方：<br> 1.如果主机可达，对方就会响应ACK应答，就认为是存活的。<br> 2.如果可达，但应用程序退出，对方就发RST应答，发送TCP撤消连接。<br> 3.如果可达，但应用程序崩溃，对方就发FIN消息。<br> 4.如果对方主机不响应ack, rst，继续发送直到超时，就撤消连接。这个时间就是默认的二个小时。</p>\n</blockquote>\n<h4 id=\"8-Tcp-retransmission（tcp重传）\"><a href=\"#8-Tcp-retransmission（tcp重传）\" class=\"headerlink\" title=\"8. Tcp retransmission（tcp重传）\"></a>8. <strong>Tcp retransmission</strong>（tcp重传）</h4><blockquote>\n<p>作为一个可靠的传输协议，传输控制协议（TCP）在发送主机需要从目标主机收到一个包时确认。If the sender does not receive that acknowledgment within a certain amount of time, it acts under the assumption that the packet did not reach its destination and retransmits the packet.如果发件人没有收到的时间内一定之金额，确认，它的行为假设下，该数据包没有到达其目的地，以及转发数据包。</p>\n</blockquote>\n<h2 id=\"TCP-状态分析\"><a href=\"#TCP-状态分析\" class=\"headerlink\" title=\"TCP 状态分析\"></a>TCP 状态分析</h2><p>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)<br>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.<br>它们的含义是：</p>\n<ol>\n<li>SYN(synchronous): 表示建立连接.</li>\n<li>FIN(finish): 表示关闭连接.</li>\n<li>ACK(acknowledgement): 表示响应.</li>\n<li>PSH(push): 表示有DATA数据传输.</li>\n<li>RST(reset): 表示连接重置.</li>\n<li>URG(urgent):紧急.</li>\n<li>SEQ(Sequence number):顺序号码</li>\n</ol>\n<h2 id=\"TCP-三次握手流程\"><a href=\"#TCP-三次握手流程\" class=\"headerlink\" title=\"TCP 三次握手流程\"></a>TCP 三次握手流程</h2><ol>\n<li>主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li>\n<li>主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</li>\n<li>主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li>\n</ol>\n<h2 id=\"各种网络包头格式\"><a href=\"#各种网络包头格式\" class=\"headerlink\" title=\"各种网络包头格式\"></a>各种网络包头格式</h2><h3 id=\"以太网头\"><a href=\"#以太网头\" class=\"headerlink\" title=\"以太网头\"></a>以太网头</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// MAC地址长度</div><div class=\"line\">#define MAC_ADDRESS_LEN 6</div><div class=\"line\"></div><div class=\"line\">// 常用的以太网帧类型</div><div class=\"line\">#define ETHERNET_FRAME_IP       0x0800              // IP帧</div><div class=\"line\">#define ETHERNET_FRAME_ARP      0x0806              // ARP帧</div><div class=\"line\">#define ETHERNET_FRAME_RARP     0x8035              // RARP帧</div><div class=\"line\">#define ETHERNET_FRAME_IPv6     0x86DD              // IP6帧</div><div class=\"line\"></div><div class=\"line\">typedef struct _EthernetHeader      // 以太头</div><div class=\"line\">&#123;</div><div class=\"line\">    UCHAR       DstMacAddr[MAC_ADDRESS_LEN];        // 目标MAC</div><div class=\"line\">    UCHAR       SrcMacAddr[MAC_ADDRESS_LEN];        // 源MAC</div><div class=\"line\">    USHORT      FrmType;                            // 类型</div><div class=\"line\">&#125;EthernetHeader, *PEthernetHeader;</div></pre></td></tr></table></figure>\n<h3 id=\"TCP-包格式\"><a href=\"#TCP-包格式\" class=\"headerlink\" title=\"TCP 包格式\"></a>TCP 包格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">0                            15                              31</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|          source port          |       destination port        |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                        sequence number                        |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                     acknowledgment number                     |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|         TCP checksum          |       urgent pointer          |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                           Optional                            |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\">|                              Data                             |</div><div class=\"line\">-----------------------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">// TCP头标志位掩码 OffFlag</div><div class=\"line\">#define TCP_HDR_LEN             0xF000              // TCP头长度&lt;双字的个数&gt;转化为字节数需要x4</div><div class=\"line\">#define TCP_URG_FLAG            0x0020              // URG标志</div><div class=\"line\">#define TCP_ACK_FLAG            0x0010              // ACK标志 应答1或请求0</div><div class=\"line\">#define TCP_PSH_FLAG            0x0008              // psh标志 以最快速度传输数据</div><div class=\"line\">#define TCP_RST_FLAG            0x0004              // RST标志 先断开连接,再重建连接</div><div class=\"line\">#define TCP_SYN_FLAG            0x0002              // SYN标志 用来建立连接</div><div class=\"line\">#define TCP_FIN_FLAG            0x0001              // FIN标志 发送方完成数据发送</div><div class=\"line\"></div><div class=\"line\">typedef struct _TcpHeader           // TCP头 20 BYTES</div><div class=\"line\">&#123;</div><div class=\"line\">    USHORT      SrcPort;                            // 源端口</div><div class=\"line\">    USHORT      DstPort;                            // 目的端口</div><div class=\"line\">    ULONG       SeqNum;                             // 序号</div><div class=\"line\">    ULONG       AckNum;                             // 确认号</div><div class=\"line\">    USHORT      OffFlag;                            // 首部长度&lt;首部双字的个数&gt;+保留位+标志位</div><div class=\"line\">    USHORT      WndSize;                            // 窗口大小&lt;实现流量控制&gt;</div><div class=\"line\">    USHORT      Checksum;                           // 效验和</div><div class=\"line\">    USHORT      UrgPointer;                         // 紧急指针</div><div class=\"line\">&#125;TcpHeader, *PTcpHeader;</div><div class=\"line\"></div><div class=\"line\">// OffFlag : 4位首部长度 + 6位保留位 + URG+ACK+PSH+RST+SYN+FIN</div><div class=\"line\"></div><div class=\"line\">typedef struct _TCPPACKET           // TCP封包 &lt;当ip中没有附加数据时&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    EthernetHeader  Ehhdr;</div><div class=\"line\">    IPHeader        Iphdr;</div><div class=\"line\">    TcpHeader       Tcphdr;</div><div class=\"line\">&#125;TCPPACKET, *PTCPPACKET;</div></pre></td></tr></table></figure>\n<p>SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，<br>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>参考</p>\n<hr>\n<ul>\n<li><a href=\"http://bbs.pediy.com/thread-147644.htm\">http://bbs.pediy.com/thread-147644.htm</a></li>\n<li><a href=\"http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html\">http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html</a></li>\n<li><a href=\"http://www.9upk.com/article/2537.html\">http://www.9upk.com/article/2537.html</a> （抓包工具教程）</li>\n</ul>"},{"title":"Hexo自动备份教程","date":"2017-08-01T06:44:11.000Z","_content":"\n[连接][1]\n\n\n[1]: https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html","source":"_posts/hexo自动备份教程.md","raw":"---\ntitle: Hexo自动备份教程\ndate: 2017-08-01 14:44:11\n---\n\n[连接][1]\n\n\n[1]: https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html","slug":"hexo自动备份教程","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt7y0010tns191go92rx","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html\" target=\"_blank\" rel=\"external\">连接</a></p>\n","excerpt":"","more":"<p><a href=\"https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html\">连接</a></p>\n"},{"title":"linux 工具函数之网络工具函数","date":"2017-03-25T17:17:11.000Z","_content":"- - -\n**本地IP、子网掩码、网关、MAC地址 获取方法 **\n<!--more-->\n\n```c\n#include <stdio.h>      \n#include <sys/types.h>\n#include <ifaddrs.h>\n#include <netinet/in.h> \n#include <string.h> \n#include <arpa/inet.h>\n#include <net/if.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <linux/sockios.h>\n\nchar* getLocalIp( )  \n{  \n    int sock_get_ip;  \n    char ipaddr[50];  \n  \n    struct   sockaddr_in *sin;  \n    struct   ifreq ifr_ip;     \n  \n    if ((sock_get_ip=socket(AF_INET, SOCK_STREAM, 0)) == -1)  \n    {  \n         printf(\"socket create failse...GetLocalIp!\\n\");  \n         return NULL;  \n    }  \n     \n    memset(&ifr_ip, 0, sizeof(ifr_ip));    \n    //指定网卡为 eth0 \n    strncpy(ifr_ip.ifr_name, \"eth0\", sizeof(ifr_ip.ifr_name) - 1);     \n   \n    if( ioctl( sock_get_ip, SIOCGIFADDR, &ifr_ip) < 0 )     \n    {     \n         return NULL;     \n    }       \n    sin = (struct sockaddr_in *)&ifr_ip.ifr_addr;     \n    strcpy(ipaddr,inet_ntoa(sin->sin_addr));         \n    \n    printf(\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\", \"eth0\", ipaddr);    \n    close( sock_get_ip );  \n      \n    return NULL;  \n}  \nvoid getlocalIp2()\n{\n    struct ifaddrs * ifAddrStruct=NULL;  \n    void * tmpAddrPtr=NULL;  \n  \n    getifaddrs(&ifAddrStruct);  \n  \n   //获取所有网卡的ip\n    while (ifAddrStruct!=NULL)   \n    {  \n        if (ifAddrStruct->ifa_addr->sa_family==AF_INET)  \n        {   // check it is IP4  \n            // is a valid IP4 Address  \n            tmpAddrPtr = &((struct sockaddr_in *)ifAddrStruct->ifa_addr)->sin_addr;  \n            char addressBuffer[INET_ADDRSTRLEN];  \n            inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN);  \n            printf(\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\", ifAddrStruct->ifa_name, addressBuffer);   \n        }  \n        else if (ifAddrStruct->ifa_addr->sa_family==AF_INET6)  \n        {   // check it is IP6  \n            // is a valid IP6 Address  \n            tmpAddrPtr=&((struct sockaddr_in *)ifAddrStruct->ifa_addr)->sin_addr;  \n            char addressBuffer[INET6_ADDRSTRLEN];  \n            inet_ntop(AF_INET6, tmpAddrPtr, addressBuffer, INET6_ADDRSTRLEN);  \n            printf(\"local net adapter:[ %-5s ] ip_v6 [ %-20s ]\\n\", ifAddrStruct->ifa_name, addressBuffer);   \n        }   \n        ifAddrStruct = ifAddrStruct->ifa_next;  \n    }  \n    return 0; \n}\nint SetLocalIp( const char *ipaddr )  \n{  \n  \n    int sock_set_ip;  \n      \n    struct sockaddr_in sin_set_ip;  \n    struct ifreq ifr_set_ip;  \n  \n    bzero( &ifr_set_ip,sizeof(ifr_set_ip));  \n   \n    if( ipaddr == NULL )  \n        return -1;  \n  \n    if(sock_set_ip = socket( AF_INET, SOCK_STREAM, 0 ) == -1);  \n    {  \n        perror(\"socket create failse...SetLocalIp!\\n\");  \n        return -1;  \n    }  \n   \n    memset( &sin_set_ip, 0, sizeof(sin_set_ip));  \n    strncpy(ifr_set_ip.ifr_name, \"eth0\", sizeof(ifr_set_ip.ifr_name)-1);     \n      \n    sin_set_ip.sin_family = AF_INET;  \n    sin_set_ip.sin_addr.s_addr = inet_addr(ipaddr);  \n    memcpy( &ifr_set_ip.ifr_addr, &sin_set_ip, sizeof(sin_set_ip));  \n  \n    if( ioctl( sock_set_ip, SIOCSIFADDR, &ifr_set_ip) < 0 )  \n    {  \n        perror( \"Not setup interface\\n\");  \n        return -1;  \n    }  \n  \n    //设置激活标志  \n    ifr_set_ip.ifr_flags |= IFF_UP |IFF_RUNNING;  \n  \n    //get the status of the device  \n    if( ioctl( sock_set_ip, SIOCSIFFLAGS, &ifr_set_ip ) < 0 )  \n    {  \n         perror(\"SIOCSIFFLAGS\");  \n         return -1;  \n    }  \n  \n    close( sock_set_ip );  \n    return 0;  \n}  \nvoid getLocalNetMask()  \n{  \n    int sock_netmask;  \n    char netmask_addr[50];  \n  \n    struct ifreq ifr_mask;  \n    struct sockaddr_in *net_mask;  \n          \n    sock_netmask = socket( AF_INET, SOCK_STREAM, 0 );  \n    if( sock_netmask == -1)  \n    {  \n        perror(\"create socket failture...GetLocalNetMask\\n\");  \n        return ;  \n    }  \n      \n    memset(&ifr_mask, 0, sizeof(ifr_mask));    \n\n    /* 获取指定网卡的子网掩码 */\n    strncpy(ifr_mask.ifr_name, \"eth0\", sizeof(ifr_mask.ifr_name )-1);     \n  \n    if( (ioctl( sock_netmask, SIOCGIFNETMASK, &ifr_mask ) ) < 0 )   \n    {  \n        printf(\"mac ioctl error\\n\");  \n        return ;  \n    }  \n      \n    net_mask = ( struct sockaddr_in * )&( ifr_mask.ifr_netmask );  \n    strcpy( netmask_addr, inet_ntoa( net_mask -> sin_addr ) );  \n      \n    printf(\"local net adapter:[ %-5s ] mask  [ %-20s ]\\n\",\"eth0\",netmask_addr);      \n      \n    close( sock_netmask );  \n    return ;  \n}\nvoid getLocalMac()  \n{  \n    int sock_mac;  \n      \n    struct ifreq ifr_mac;  \n    char mac_addr[30];     \n      \n    sock_mac = socket( AF_INET, SOCK_STREAM, 0 );  \n    if( sock_mac == -1)  \n    {  \n        perror(\"create socket falise...mac\\n\");  \n        return ;  \n    }  \n      \n    memset(&ifr_mac,0,sizeof(ifr_mac));     \n    strncpy(ifr_mac.ifr_name, \"eth0\", sizeof(ifr_mac.ifr_name)-1);     \n  \n    if( (ioctl( sock_mac, SIOCGIFHWADDR, &ifr_mac)) < 0)  \n    {  \n        printf(\"mac ioctl error\\n\");  \n        return ;  \n    }  \n      \n    sprintf(mac_addr,\"%02x%02x%02x%02x%02x%02x\",  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[0],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[1],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[2],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[3],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[4],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[5]);  \n  \n    printf(\"local net adapter:[ %-5s ] mac   [ %-20s ]\\n\",\"eth0\",mac_addr);      \n      \n    close( sock_mac );  \n    return ;  \n}   \nvoid getGateWay()  \n{  \n    FILE *fp;  \n    char buf[512];  \n    char cmd[128];  \n    char gateway[30];  \n    char *tmp;  \n  \n    strcpy(cmd, \"ip route\");  \n    fp = popen(cmd, \"r\");  \n    if(NULL == fp)  \n    {  \n        perror(\"popen error\");  \n        return ;  \n    }  \n    while(fgets(buf, sizeof(buf), fp) != NULL)  \n    {  \n        tmp =buf;  \n        while(*tmp && isspace(*tmp))  \n            ++ tmp;  \n        if(strncmp(tmp, \"default\", strlen(\"default\")) == 0)  \n            break;  \n    }  \n    sscanf(buf, \"%*s%*s%s\", gateway);         \n    printf(\"default gateway:%s\\n\", gateway);  \n    pclose(fp);  \n      \n    return ;  \n}  \nvoid main( )\n{\n    getLocalIp( ) ;\n    getlocalIp2( );\n    getLocalNetMask();\n    getLocalMac();\n    getGateWay();\n}\n```\n**运行结果：**\n![net.png](http://upload-images.jianshu.io/upload_images/1736256-22fbb52f340934b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/linux 工具函数之网络工具函数.md","raw":"---\ntitle: linux 工具函数之网络工具函数\ndate: 2017-03-26 01:17:11\ntags: [Linux,网络]\n---\n- - -\n**本地IP、子网掩码、网关、MAC地址 获取方法 **\n<!--more-->\n\n```c\n#include <stdio.h>      \n#include <sys/types.h>\n#include <ifaddrs.h>\n#include <netinet/in.h> \n#include <string.h> \n#include <arpa/inet.h>\n#include <net/if.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <linux/sockios.h>\n\nchar* getLocalIp( )  \n{  \n    int sock_get_ip;  \n    char ipaddr[50];  \n  \n    struct   sockaddr_in *sin;  \n    struct   ifreq ifr_ip;     \n  \n    if ((sock_get_ip=socket(AF_INET, SOCK_STREAM, 0)) == -1)  \n    {  \n         printf(\"socket create failse...GetLocalIp!\\n\");  \n         return NULL;  \n    }  \n     \n    memset(&ifr_ip, 0, sizeof(ifr_ip));    \n    //指定网卡为 eth0 \n    strncpy(ifr_ip.ifr_name, \"eth0\", sizeof(ifr_ip.ifr_name) - 1);     \n   \n    if( ioctl( sock_get_ip, SIOCGIFADDR, &ifr_ip) < 0 )     \n    {     \n         return NULL;     \n    }       \n    sin = (struct sockaddr_in *)&ifr_ip.ifr_addr;     \n    strcpy(ipaddr,inet_ntoa(sin->sin_addr));         \n    \n    printf(\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\", \"eth0\", ipaddr);    \n    close( sock_get_ip );  \n      \n    return NULL;  \n}  \nvoid getlocalIp2()\n{\n    struct ifaddrs * ifAddrStruct=NULL;  \n    void * tmpAddrPtr=NULL;  \n  \n    getifaddrs(&ifAddrStruct);  \n  \n   //获取所有网卡的ip\n    while (ifAddrStruct!=NULL)   \n    {  \n        if (ifAddrStruct->ifa_addr->sa_family==AF_INET)  \n        {   // check it is IP4  \n            // is a valid IP4 Address  \n            tmpAddrPtr = &((struct sockaddr_in *)ifAddrStruct->ifa_addr)->sin_addr;  \n            char addressBuffer[INET_ADDRSTRLEN];  \n            inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN);  \n            printf(\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\", ifAddrStruct->ifa_name, addressBuffer);   \n        }  \n        else if (ifAddrStruct->ifa_addr->sa_family==AF_INET6)  \n        {   // check it is IP6  \n            // is a valid IP6 Address  \n            tmpAddrPtr=&((struct sockaddr_in *)ifAddrStruct->ifa_addr)->sin_addr;  \n            char addressBuffer[INET6_ADDRSTRLEN];  \n            inet_ntop(AF_INET6, tmpAddrPtr, addressBuffer, INET6_ADDRSTRLEN);  \n            printf(\"local net adapter:[ %-5s ] ip_v6 [ %-20s ]\\n\", ifAddrStruct->ifa_name, addressBuffer);   \n        }   \n        ifAddrStruct = ifAddrStruct->ifa_next;  \n    }  \n    return 0; \n}\nint SetLocalIp( const char *ipaddr )  \n{  \n  \n    int sock_set_ip;  \n      \n    struct sockaddr_in sin_set_ip;  \n    struct ifreq ifr_set_ip;  \n  \n    bzero( &ifr_set_ip,sizeof(ifr_set_ip));  \n   \n    if( ipaddr == NULL )  \n        return -1;  \n  \n    if(sock_set_ip = socket( AF_INET, SOCK_STREAM, 0 ) == -1);  \n    {  \n        perror(\"socket create failse...SetLocalIp!\\n\");  \n        return -1;  \n    }  \n   \n    memset( &sin_set_ip, 0, sizeof(sin_set_ip));  \n    strncpy(ifr_set_ip.ifr_name, \"eth0\", sizeof(ifr_set_ip.ifr_name)-1);     \n      \n    sin_set_ip.sin_family = AF_INET;  \n    sin_set_ip.sin_addr.s_addr = inet_addr(ipaddr);  \n    memcpy( &ifr_set_ip.ifr_addr, &sin_set_ip, sizeof(sin_set_ip));  \n  \n    if( ioctl( sock_set_ip, SIOCSIFADDR, &ifr_set_ip) < 0 )  \n    {  \n        perror( \"Not setup interface\\n\");  \n        return -1;  \n    }  \n  \n    //设置激活标志  \n    ifr_set_ip.ifr_flags |= IFF_UP |IFF_RUNNING;  \n  \n    //get the status of the device  \n    if( ioctl( sock_set_ip, SIOCSIFFLAGS, &ifr_set_ip ) < 0 )  \n    {  \n         perror(\"SIOCSIFFLAGS\");  \n         return -1;  \n    }  \n  \n    close( sock_set_ip );  \n    return 0;  \n}  \nvoid getLocalNetMask()  \n{  \n    int sock_netmask;  \n    char netmask_addr[50];  \n  \n    struct ifreq ifr_mask;  \n    struct sockaddr_in *net_mask;  \n          \n    sock_netmask = socket( AF_INET, SOCK_STREAM, 0 );  \n    if( sock_netmask == -1)  \n    {  \n        perror(\"create socket failture...GetLocalNetMask\\n\");  \n        return ;  \n    }  \n      \n    memset(&ifr_mask, 0, sizeof(ifr_mask));    \n\n    /* 获取指定网卡的子网掩码 */\n    strncpy(ifr_mask.ifr_name, \"eth0\", sizeof(ifr_mask.ifr_name )-1);     \n  \n    if( (ioctl( sock_netmask, SIOCGIFNETMASK, &ifr_mask ) ) < 0 )   \n    {  \n        printf(\"mac ioctl error\\n\");  \n        return ;  \n    }  \n      \n    net_mask = ( struct sockaddr_in * )&( ifr_mask.ifr_netmask );  \n    strcpy( netmask_addr, inet_ntoa( net_mask -> sin_addr ) );  \n      \n    printf(\"local net adapter:[ %-5s ] mask  [ %-20s ]\\n\",\"eth0\",netmask_addr);      \n      \n    close( sock_netmask );  \n    return ;  \n}\nvoid getLocalMac()  \n{  \n    int sock_mac;  \n      \n    struct ifreq ifr_mac;  \n    char mac_addr[30];     \n      \n    sock_mac = socket( AF_INET, SOCK_STREAM, 0 );  \n    if( sock_mac == -1)  \n    {  \n        perror(\"create socket falise...mac\\n\");  \n        return ;  \n    }  \n      \n    memset(&ifr_mac,0,sizeof(ifr_mac));     \n    strncpy(ifr_mac.ifr_name, \"eth0\", sizeof(ifr_mac.ifr_name)-1);     \n  \n    if( (ioctl( sock_mac, SIOCGIFHWADDR, &ifr_mac)) < 0)  \n    {  \n        printf(\"mac ioctl error\\n\");  \n        return ;  \n    }  \n      \n    sprintf(mac_addr,\"%02x%02x%02x%02x%02x%02x\",  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[0],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[1],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[2],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[3],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[4],  \n            (unsigned char)ifr_mac.ifr_hwaddr.sa_data[5]);  \n  \n    printf(\"local net adapter:[ %-5s ] mac   [ %-20s ]\\n\",\"eth0\",mac_addr);      \n      \n    close( sock_mac );  \n    return ;  \n}   \nvoid getGateWay()  \n{  \n    FILE *fp;  \n    char buf[512];  \n    char cmd[128];  \n    char gateway[30];  \n    char *tmp;  \n  \n    strcpy(cmd, \"ip route\");  \n    fp = popen(cmd, \"r\");  \n    if(NULL == fp)  \n    {  \n        perror(\"popen error\");  \n        return ;  \n    }  \n    while(fgets(buf, sizeof(buf), fp) != NULL)  \n    {  \n        tmp =buf;  \n        while(*tmp && isspace(*tmp))  \n            ++ tmp;  \n        if(strncmp(tmp, \"default\", strlen(\"default\")) == 0)  \n            break;  \n    }  \n    sscanf(buf, \"%*s%*s%s\", gateway);         \n    printf(\"default gateway:%s\\n\", gateway);  \n    pclose(fp);  \n      \n    return ;  \n}  \nvoid main( )\n{\n    getLocalIp( ) ;\n    getlocalIp2( );\n    getLocalNetMask();\n    getLocalMac();\n    getGateWay();\n}\n```\n**运行结果：**\n![net.png](http://upload-images.jianshu.io/upload_images/1736256-22fbb52f340934b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"linux 工具函数之网络工具函数","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt800012tns1vorm0mel","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<p><strong>本地IP、子网掩码、网关、MAC地址 获取方法 </strong><br><a id=\"more\"></a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;      </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ifaddrs.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;net/if.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/sockios.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getLocalIp</span><span class=\"params\">( )</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_get_ip;  </div><div class=\"line\">    <span class=\"keyword\">char</span> ipaddr[<span class=\"number\">50</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">struct</span>   sockaddr_in *<span class=\"built_in\">sin</span>;  </div><div class=\"line\">    <span class=\"keyword\">struct</span>   ifreq ifr_ip;     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((sock_get_ip=socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket create failse...GetLocalIp!\\n\"</span>);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_ip, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ifr_ip));    </div><div class=\"line\">    <span class=\"comment\">//指定网卡为 eth0 </span></div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_ip.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_ip.ifr_name) - <span class=\"number\">1</span>);     </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_get_ip, SIOCGIFADDR, &amp;ifr_ip) &lt; <span class=\"number\">0</span> )     </div><div class=\"line\">    &#123;     </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;     </div><div class=\"line\">    &#125;       </div><div class=\"line\">    <span class=\"built_in\">sin</span> = (<span class=\"keyword\">struct</span> sockaddr_in *)&amp;ifr_ip.ifr_addr;     </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(ipaddr,inet_ntoa(<span class=\"built_in\">sin</span>-&gt;sin_addr));         </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\"</span>, <span class=\"string\">\"eth0\"</span>, ipaddr);    </div><div class=\"line\">    close( sock_get_ip );  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getlocalIp2</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ifaddrs * ifAddrStruct=<span class=\"literal\">NULL</span>;  </div><div class=\"line\">    <span class=\"keyword\">void</span> * tmpAddrPtr=<span class=\"literal\">NULL</span>;  </div><div class=\"line\">  </div><div class=\"line\">    getifaddrs(&amp;ifAddrStruct);  </div><div class=\"line\">  </div><div class=\"line\">   <span class=\"comment\">//获取所有网卡的ip</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (ifAddrStruct!=<span class=\"literal\">NULL</span>)   </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (ifAddrStruct-&gt;ifa_addr-&gt;sa_family==AF_INET)  </div><div class=\"line\">        &#123;   <span class=\"comment\">// check it is IP4  </span></div><div class=\"line\">            <span class=\"comment\">// is a valid IP4 Address  </span></div><div class=\"line\">            tmpAddrPtr = &amp;((<span class=\"keyword\">struct</span> sockaddr_in *)ifAddrStruct-&gt;ifa_addr)-&gt;sin_addr;  </div><div class=\"line\">            <span class=\"keyword\">char</span> addressBuffer[INET_ADDRSTRLEN];  </div><div class=\"line\">            inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN);  </div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\"</span>, ifAddrStruct-&gt;ifa_name, addressBuffer);   </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ifAddrStruct-&gt;ifa_addr-&gt;sa_family==AF_INET6)  </div><div class=\"line\">        &#123;   <span class=\"comment\">// check it is IP6  </span></div><div class=\"line\">            <span class=\"comment\">// is a valid IP6 Address  </span></div><div class=\"line\">            tmpAddrPtr=&amp;((<span class=\"keyword\">struct</span> sockaddr_in *)ifAddrStruct-&gt;ifa_addr)-&gt;sin_addr;  </div><div class=\"line\">            <span class=\"keyword\">char</span> addressBuffer[INET6_ADDRSTRLEN];  </div><div class=\"line\">            inet_ntop(AF_INET6, tmpAddrPtr, addressBuffer, INET6_ADDRSTRLEN);  </div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v6 [ %-20s ]\\n\"</span>, ifAddrStruct-&gt;ifa_name, addressBuffer);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        ifAddrStruct = ifAddrStruct-&gt;ifa_next;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SetLocalIp</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ipaddr )</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_set_ip;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in sin_set_ip;  </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_set_ip;  </div><div class=\"line\">  </div><div class=\"line\">    bzero( &amp;ifr_set_ip,<span class=\"keyword\">sizeof</span>(ifr_set_ip));  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span>( ipaddr == <span class=\"literal\">NULL</span> )  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>(sock_set_ip = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> ) == <span class=\"number\">-1</span>);  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"socket create failse...SetLocalIp!\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">memset</span>( &amp;sin_set_ip, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sin_set_ip));  </div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_set_ip.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_set_ip.ifr_name)<span class=\"number\">-1</span>);     </div><div class=\"line\">      </div><div class=\"line\">    sin_set_ip.sin_family = AF_INET;  </div><div class=\"line\">    sin_set_ip.sin_addr.s_addr = inet_addr(ipaddr);  </div><div class=\"line\">    <span class=\"built_in\">memcpy</span>( &amp;ifr_set_ip.ifr_addr, &amp;sin_set_ip, <span class=\"keyword\">sizeof</span>(sin_set_ip));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_set_ip, SIOCSIFADDR, &amp;ifr_set_ip) &lt; <span class=\"number\">0</span> )  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror( <span class=\"string\">\"Not setup interface\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//设置激活标志  </span></div><div class=\"line\">    ifr_set_ip.ifr_flags |= IFF_UP |IFF_RUNNING;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//get the status of the device  </span></div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_set_ip, SIOCSIFFLAGS, &amp;ifr_set_ip ) &lt; <span class=\"number\">0</span> )  </div><div class=\"line\">    &#123;  </div><div class=\"line\">         perror(<span class=\"string\">\"SIOCSIFFLAGS\"</span>);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    close( sock_set_ip );  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLocalNetMask</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_netmask;  </div><div class=\"line\">    <span class=\"keyword\">char</span> netmask_addr[<span class=\"number\">50</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_mask;  </div><div class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in *net_mask;  </div><div class=\"line\">          </div><div class=\"line\">    sock_netmask = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );  </div><div class=\"line\">    <span class=\"keyword\">if</span>( sock_netmask == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"create socket failture...GetLocalNetMask\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_mask, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ifr_mask));    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 获取指定网卡的子网掩码 */</span></div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_mask.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_mask.ifr_name )<span class=\"number\">-1</span>);     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( (ioctl( sock_netmask, SIOCGIFNETMASK, &amp;ifr_mask ) ) &lt; <span class=\"number\">0</span> )   </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"mac ioctl error\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    net_mask = ( <span class=\"keyword\">struct</span> sockaddr_in * )&amp;( ifr_mask.ifr_netmask );  </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>( netmask_addr, inet_ntoa( net_mask -&gt; sin_addr ) );  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] mask  [ %-20s ]\\n\"</span>,<span class=\"string\">\"eth0\"</span>,netmask_addr);      </div><div class=\"line\">      </div><div class=\"line\">    close( sock_netmask );  </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLocalMac</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_mac;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_mac;  </div><div class=\"line\">    <span class=\"keyword\">char</span> mac_addr[<span class=\"number\">30</span>];     </div><div class=\"line\">      </div><div class=\"line\">    sock_mac = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );  </div><div class=\"line\">    <span class=\"keyword\">if</span>( sock_mac == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"create socket falise...mac\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_mac,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(ifr_mac));     </div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_mac.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_mac.ifr_name)<span class=\"number\">-1</span>);     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( (ioctl( sock_mac, SIOCGIFHWADDR, &amp;ifr_mac)) &lt; <span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"mac ioctl error\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(mac_addr,<span class=\"string\">\"%02x%02x%02x%02x%02x%02x\"</span>,  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">0</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">1</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">2</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">3</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">4</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">5</span>]);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] mac   [ %-20s ]\\n\"</span>,<span class=\"string\">\"eth0\"</span>,mac_addr);      </div><div class=\"line\">      </div><div class=\"line\">    close( sock_mac );  </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getGateWay</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    FILE *fp;  </div><div class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">512</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> cmd[<span class=\"number\">128</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> gateway[<span class=\"number\">30</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> *tmp;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(cmd, <span class=\"string\">\"ip route\"</span>);  </div><div class=\"line\">    fp = popen(cmd, <span class=\"string\">\"r\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"popen error\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(fgets(buf, <span class=\"keyword\">sizeof</span>(buf), fp) != <span class=\"literal\">NULL</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        tmp =buf;  </div><div class=\"line\">        <span class=\"keyword\">while</span>(*tmp &amp;&amp; <span class=\"built_in\">isspace</span>(*tmp))  </div><div class=\"line\">            ++ tmp;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(tmp, <span class=\"string\">\"default\"</span>, <span class=\"built_in\">strlen</span>(<span class=\"string\">\"default\"</span>)) == <span class=\"number\">0</span>)  </div><div class=\"line\">            <span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">sscanf</span>(buf, <span class=\"string\">\"%*s%*s%s\"</span>, gateway);         </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"default gateway:%s\\n\"</span>, gateway);  </div><div class=\"line\">    pclose(fp);  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    getLocalIp( ) ;</div><div class=\"line\">    getlocalIp2( );</div><div class=\"line\">    getLocalNetMask();</div><div class=\"line\">    getLocalMac();</div><div class=\"line\">    getGateWay();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-22fbb52f340934b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"net.png\"></p>\n","excerpt":"<hr>\n<p><strong>本地IP、子网掩码、网关、MAC地址 获取方法 </strong><br>","more":"</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;      </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ifaddrs.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;net/if.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/sockios.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getLocalIp</span><span class=\"params\">( )</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_get_ip;  </div><div class=\"line\">    <span class=\"keyword\">char</span> ipaddr[<span class=\"number\">50</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">struct</span>   sockaddr_in *<span class=\"built_in\">sin</span>;  </div><div class=\"line\">    <span class=\"keyword\">struct</span>   ifreq ifr_ip;     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((sock_get_ip=socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket create failse...GetLocalIp!\\n\"</span>);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_ip, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ifr_ip));    </div><div class=\"line\">    <span class=\"comment\">//指定网卡为 eth0 </span></div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_ip.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_ip.ifr_name) - <span class=\"number\">1</span>);     </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_get_ip, SIOCGIFADDR, &amp;ifr_ip) &lt; <span class=\"number\">0</span> )     </div><div class=\"line\">    &#123;     </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;     </div><div class=\"line\">    &#125;       </div><div class=\"line\">    <span class=\"built_in\">sin</span> = (<span class=\"keyword\">struct</span> sockaddr_in *)&amp;ifr_ip.ifr_addr;     </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(ipaddr,inet_ntoa(<span class=\"built_in\">sin</span>-&gt;sin_addr));         </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\"</span>, <span class=\"string\">\"eth0\"</span>, ipaddr);    </div><div class=\"line\">    close( sock_get_ip );  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getlocalIp2</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ifaddrs * ifAddrStruct=<span class=\"literal\">NULL</span>;  </div><div class=\"line\">    <span class=\"keyword\">void</span> * tmpAddrPtr=<span class=\"literal\">NULL</span>;  </div><div class=\"line\">  </div><div class=\"line\">    getifaddrs(&amp;ifAddrStruct);  </div><div class=\"line\">  </div><div class=\"line\">   <span class=\"comment\">//获取所有网卡的ip</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (ifAddrStruct!=<span class=\"literal\">NULL</span>)   </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (ifAddrStruct-&gt;ifa_addr-&gt;sa_family==AF_INET)  </div><div class=\"line\">        &#123;   <span class=\"comment\">// check it is IP4  </span></div><div class=\"line\">            <span class=\"comment\">// is a valid IP4 Address  </span></div><div class=\"line\">            tmpAddrPtr = &amp;((<span class=\"keyword\">struct</span> sockaddr_in *)ifAddrStruct-&gt;ifa_addr)-&gt;sin_addr;  </div><div class=\"line\">            <span class=\"keyword\">char</span> addressBuffer[INET_ADDRSTRLEN];  </div><div class=\"line\">            inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN);  </div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\\n\"</span>, ifAddrStruct-&gt;ifa_name, addressBuffer);   </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ifAddrStruct-&gt;ifa_addr-&gt;sa_family==AF_INET6)  </div><div class=\"line\">        &#123;   <span class=\"comment\">// check it is IP6  </span></div><div class=\"line\">            <span class=\"comment\">// is a valid IP6 Address  </span></div><div class=\"line\">            tmpAddrPtr=&amp;((<span class=\"keyword\">struct</span> sockaddr_in *)ifAddrStruct-&gt;ifa_addr)-&gt;sin_addr;  </div><div class=\"line\">            <span class=\"keyword\">char</span> addressBuffer[INET6_ADDRSTRLEN];  </div><div class=\"line\">            inet_ntop(AF_INET6, tmpAddrPtr, addressBuffer, INET6_ADDRSTRLEN);  </div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] ip_v6 [ %-20s ]\\n\"</span>, ifAddrStruct-&gt;ifa_name, addressBuffer);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        ifAddrStruct = ifAddrStruct-&gt;ifa_next;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">SetLocalIp</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ipaddr )</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_set_ip;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in sin_set_ip;  </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_set_ip;  </div><div class=\"line\">  </div><div class=\"line\">    bzero( &amp;ifr_set_ip,<span class=\"keyword\">sizeof</span>(ifr_set_ip));  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span>( ipaddr == <span class=\"literal\">NULL</span> )  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>(sock_set_ip = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> ) == <span class=\"number\">-1</span>);  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"socket create failse...SetLocalIp!\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">memset</span>( &amp;sin_set_ip, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sin_set_ip));  </div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_set_ip.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_set_ip.ifr_name)<span class=\"number\">-1</span>);     </div><div class=\"line\">      </div><div class=\"line\">    sin_set_ip.sin_family = AF_INET;  </div><div class=\"line\">    sin_set_ip.sin_addr.s_addr = inet_addr(ipaddr);  </div><div class=\"line\">    <span class=\"built_in\">memcpy</span>( &amp;ifr_set_ip.ifr_addr, &amp;sin_set_ip, <span class=\"keyword\">sizeof</span>(sin_set_ip));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_set_ip, SIOCSIFADDR, &amp;ifr_set_ip) &lt; <span class=\"number\">0</span> )  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror( <span class=\"string\">\"Not setup interface\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//设置激活标志  </span></div><div class=\"line\">    ifr_set_ip.ifr_flags |= IFF_UP |IFF_RUNNING;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//get the status of the device  </span></div><div class=\"line\">    <span class=\"keyword\">if</span>( ioctl( sock_set_ip, SIOCSIFFLAGS, &amp;ifr_set_ip ) &lt; <span class=\"number\">0</span> )  </div><div class=\"line\">    &#123;  </div><div class=\"line\">         perror(<span class=\"string\">\"SIOCSIFFLAGS\"</span>);  </div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    close( sock_set_ip );  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLocalNetMask</span><span class=\"params\">()</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_netmask;  </div><div class=\"line\">    <span class=\"keyword\">char</span> netmask_addr[<span class=\"number\">50</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_mask;  </div><div class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in *net_mask;  </div><div class=\"line\">          </div><div class=\"line\">    sock_netmask = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );  </div><div class=\"line\">    <span class=\"keyword\">if</span>( sock_netmask == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"create socket failture...GetLocalNetMask\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_mask, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ifr_mask));    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* 获取指定网卡的子网掩码 */</span></div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_mask.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_mask.ifr_name )<span class=\"number\">-1</span>);     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( (ioctl( sock_netmask, SIOCGIFNETMASK, &amp;ifr_mask ) ) &lt; <span class=\"number\">0</span> )   </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"mac ioctl error\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    net_mask = ( <span class=\"keyword\">struct</span> sockaddr_in * )&amp;( ifr_mask.ifr_netmask );  </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>( netmask_addr, inet_ntoa( net_mask -&gt; sin_addr ) );  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] mask  [ %-20s ]\\n\"</span>,<span class=\"string\">\"eth0\"</span>,netmask_addr);      </div><div class=\"line\">      </div><div class=\"line\">    close( sock_netmask );  </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getLocalMac</span><span class=\"params\">()</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> sock_mac;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">struct</span> ifreq ifr_mac;  </div><div class=\"line\">    <span class=\"keyword\">char</span> mac_addr[<span class=\"number\">30</span>];     </div><div class=\"line\">      </div><div class=\"line\">    sock_mac = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );  </div><div class=\"line\">    <span class=\"keyword\">if</span>( sock_mac == <span class=\"number\">-1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"create socket falise...mac\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ifr_mac,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(ifr_mac));     </div><div class=\"line\">    <span class=\"built_in\">strncpy</span>(ifr_mac.ifr_name, <span class=\"string\">\"eth0\"</span>, <span class=\"keyword\">sizeof</span>(ifr_mac.ifr_name)<span class=\"number\">-1</span>);     </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span>( (ioctl( sock_mac, SIOCGIFHWADDR, &amp;ifr_mac)) &lt; <span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"mac ioctl error\\n\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(mac_addr,<span class=\"string\">\"%02x%02x%02x%02x%02x%02x\"</span>,  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">0</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">1</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">2</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">3</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">4</span>],  </div><div class=\"line\">            (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)ifr_mac.ifr_hwaddr.sa_data[<span class=\"number\">5</span>]);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"local net adapter:[ %-5s ] mac   [ %-20s ]\\n\"</span>,<span class=\"string\">\"eth0\"</span>,mac_addr);      </div><div class=\"line\">      </div><div class=\"line\">    close( sock_mac );  </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getGateWay</span><span class=\"params\">()</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    FILE *fp;  </div><div class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">512</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> cmd[<span class=\"number\">128</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> gateway[<span class=\"number\">30</span>];  </div><div class=\"line\">    <span class=\"keyword\">char</span> *tmp;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(cmd, <span class=\"string\">\"ip route\"</span>);  </div><div class=\"line\">    fp = popen(cmd, <span class=\"string\">\"r\"</span>);  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        perror(<span class=\"string\">\"popen error\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> ;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(fgets(buf, <span class=\"keyword\">sizeof</span>(buf), fp) != <span class=\"literal\">NULL</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        tmp =buf;  </div><div class=\"line\">        <span class=\"keyword\">while</span>(*tmp &amp;&amp; <span class=\"built_in\">isspace</span>(*tmp))  </div><div class=\"line\">            ++ tmp;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(tmp, <span class=\"string\">\"default\"</span>, <span class=\"built_in\">strlen</span>(<span class=\"string\">\"default\"</span>)) == <span class=\"number\">0</span>)  </div><div class=\"line\">            <span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"built_in\">sscanf</span>(buf, <span class=\"string\">\"%*s%*s%s\"</span>, gateway);         </div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"default gateway:%s\\n\"</span>, gateway);  </div><div class=\"line\">    pclose(fp);  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> ;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    getLocalIp( ) ;</div><div class=\"line\">    getlocalIp2( );</div><div class=\"line\">    getLocalNetMask();</div><div class=\"line\">    getLocalMac();</div><div class=\"line\">    getGateWay();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/1736256-22fbb52f340934b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"net.png\"></p>"},{"title":"Tool 记","date":"2017-03-25T16:40:11.000Z","_content":"- - -\n# 工具1--esptool\n\n## 安装方法:\n1.超级简单按照方法\n``` bash \n $  pip install esptool\n```\n2.源码安装方法.\n``` bash \n # 下载源码\n $ git@github.com:themadinventor/esptool.git\n #安装依赖\n $ pip install pyserial, easy_install pyserial \n #或者 depending on your platform. \n $ apt-get install python-serial\n ```\n<!--more-->\n\n## 帮助说明\n```\nesptool.py write_flash -h\n```\n\n## 使用例子:\n```\nsudo python esptool.py --port /dev/ttyUSB0 --baud 1500000 \\\nwrite_flash -fm qio -fs 32m -ff 40m 0x3fc000 ../bin/0x3fc000.bin\n```\n## 几个文件一起烧录\n```\nsudo esptool.py --port /dev/tty.usbserial-DA00H0QE \\\n--baud 1500000 write_flash -fm qio -fs 32m -ff 40m 0x00000 \\\n../boot_v1.6.bin 0x01000 user1.4096.new.6.bin 0x3fc000 \\\n../esp_init_data_default.bin 0x3fe000 ../blank.bin \n```\n### 解释\n|关键字| 解释|\n|----|\n|**port**|                 指定串口号|\n|**baud**|               指定下载波特率\n|**write_flash**|      烧写二进制文件到指定位置\n|**-fm**|                  SPI Flash mode( 'qio', 'qout', 'dio', 'dout')     \n|**-ff**|                    SPI Flash frequency('40m', '26m', '20m', '80m')\n|**-fs**|                   SPI Flash size in Mbit(4m', '2m', '8m', '16m', '32m', '16m-c1', '32m-c1', '32m-c2', '64m', '128m')\n|**0x3fc000**|         指定烧录地址\n|**0x3fc000.bin**|   对应的烧录文件","source":"_posts/tool.md","raw":"---\ntitle: Tool 记\ndate: 2017-03-26 00:40:11\ntags: [WiFi,esp8266,esptool]\n---\n- - -\n# 工具1--esptool\n\n## 安装方法:\n1.超级简单按照方法\n``` bash \n $  pip install esptool\n```\n2.源码安装方法.\n``` bash \n # 下载源码\n $ git@github.com:themadinventor/esptool.git\n #安装依赖\n $ pip install pyserial, easy_install pyserial \n #或者 depending on your platform. \n $ apt-get install python-serial\n ```\n<!--more-->\n\n## 帮助说明\n```\nesptool.py write_flash -h\n```\n\n## 使用例子:\n```\nsudo python esptool.py --port /dev/ttyUSB0 --baud 1500000 \\\nwrite_flash -fm qio -fs 32m -ff 40m 0x3fc000 ../bin/0x3fc000.bin\n```\n## 几个文件一起烧录\n```\nsudo esptool.py --port /dev/tty.usbserial-DA00H0QE \\\n--baud 1500000 write_flash -fm qio -fs 32m -ff 40m 0x00000 \\\n../boot_v1.6.bin 0x01000 user1.4096.new.6.bin 0x3fc000 \\\n../esp_init_data_default.bin 0x3fe000 ../blank.bin \n```\n### 解释\n|关键字| 解释|\n|----|\n|**port**|                 指定串口号|\n|**baud**|               指定下载波特率\n|**write_flash**|      烧写二进制文件到指定位置\n|**-fm**|                  SPI Flash mode( 'qio', 'qout', 'dio', 'dout')     \n|**-ff**|                    SPI Flash frequency('40m', '26m', '20m', '80m')\n|**-fs**|                   SPI Flash size in Mbit(4m', '2m', '8m', '16m', '32m', '16m-c1', '32m-c1', '32m-c2', '64m', '128m')\n|**0x3fc000**|         指定烧录地址\n|**0x3fc000.bin**|   对应的烧录文件","slug":"tool","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt820015tns1sy8txafi","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h1 id=\"工具1–esptool\"><a href=\"#工具1–esptool\" class=\"headerlink\" title=\"工具1–esptool\"></a>工具1–esptool</h1><h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法:\"></a>安装方法:</h2><p>1.超级简单按照方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  pip install esptool</div></pre></td></tr></table></figure></p>\n<p>2.源码安装方法.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载源码</span></div><div class=\"line\">$ git@github.com:themadinventor/esptool.git</div><div class=\"line\"><span class=\"comment\">#安装依赖</span></div><div class=\"line\">$ pip install pyserial, easy_install pyserial </div><div class=\"line\"><span class=\"comment\">#或者 depending on your platform. </span></div><div class=\"line\">$ apt-get install python-serial</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"帮助说明\"><a href=\"#帮助说明\" class=\"headerlink\" title=\"帮助说明\"></a>帮助说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">esptool.py write_flash -h</div></pre></td></tr></table></figure>\n<h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子:\"></a>使用例子:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo python esptool.py --port /dev/ttyUSB0 --baud 1500000 \\</div><div class=\"line\">write_flash -fm qio -fs 32m -ff 40m 0x3fc000 ../bin/0x3fc000.bin</div></pre></td></tr></table></figure>\n<h2 id=\"几个文件一起烧录\"><a href=\"#几个文件一起烧录\" class=\"headerlink\" title=\"几个文件一起烧录\"></a>几个文件一起烧录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo esptool.py --port /dev/tty.usbserial-DA00H0QE \\</div><div class=\"line\">--baud 1500000 write_flash -fm qio -fs 32m -ff 40m 0x00000 \\</div><div class=\"line\">../boot_v1.6.bin 0x01000 user1.4096.new.6.bin 0x3fc000 \\</div><div class=\"line\">../esp_init_data_default.bin 0x3fe000 ../blank.bin</div></pre></td></tr></table></figure>\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>port</strong></td>\n<td>指定串口号</td>\n</tr>\n<tr>\n<td><strong>baud</strong></td>\n<td>指定下载波特率</td>\n</tr>\n<tr>\n<td><strong>write_flash</strong></td>\n<td>烧写二进制文件到指定位置</td>\n</tr>\n<tr>\n<td><strong>-fm</strong></td>\n<td>SPI Flash mode( ‘qio’, ‘qout’, ‘dio’, ‘dout’)     </td>\n</tr>\n<tr>\n<td><strong>-ff</strong></td>\n<td>SPI Flash frequency(‘40m’, ‘26m’, ‘20m’, ‘80m’)</td>\n</tr>\n<tr>\n<td><strong>-fs</strong></td>\n<td>SPI Flash size in Mbit(4m’, ‘2m’, ‘8m’, ‘16m’, ‘32m’, ‘16m-c1’, ‘32m-c1’, ‘32m-c2’, ‘64m’, ‘128m’)</td>\n</tr>\n<tr>\n<td><strong>0x3fc000</strong></td>\n<td>指定烧录地址</td>\n</tr>\n<tr>\n<td><strong>0x3fc000.bin</strong></td>\n<td>对应的烧录文件</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<hr>\n<h1 id=\"工具1–esptool\"><a href=\"#工具1–esptool\" class=\"headerlink\" title=\"工具1–esptool\"></a>工具1–esptool</h1><h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法:\"></a>安装方法:</h2><p>1.超级简单按照方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  pip install esptool</div></pre></td></tr></table></figure></p>\n<p>2.源码安装方法.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载源码</span></div><div class=\"line\">$ git@github.com:themadinventor/esptool.git</div><div class=\"line\"><span class=\"comment\">#安装依赖</span></div><div class=\"line\">$ pip install pyserial, easy_install pyserial </div><div class=\"line\"><span class=\"comment\">#或者 depending on your platform. </span></div><div class=\"line\">$ apt-get install python-serial</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"帮助说明\"><a href=\"#帮助说明\" class=\"headerlink\" title=\"帮助说明\"></a>帮助说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">esptool.py write_flash -h</div></pre></td></tr></table></figure>\n<h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子:\"></a>使用例子:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo python esptool.py --port /dev/ttyUSB0 --baud 1500000 \\</div><div class=\"line\">write_flash -fm qio -fs 32m -ff 40m 0x3fc000 ../bin/0x3fc000.bin</div></pre></td></tr></table></figure>\n<h2 id=\"几个文件一起烧录\"><a href=\"#几个文件一起烧录\" class=\"headerlink\" title=\"几个文件一起烧录\"></a>几个文件一起烧录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo esptool.py --port /dev/tty.usbserial-DA00H0QE \\</div><div class=\"line\">--baud 1500000 write_flash -fm qio -fs 32m -ff 40m 0x00000 \\</div><div class=\"line\">../boot_v1.6.bin 0x01000 user1.4096.new.6.bin 0x3fc000 \\</div><div class=\"line\">../esp_init_data_default.bin 0x3fe000 ../blank.bin</div></pre></td></tr></table></figure>\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>port</strong></td>\n<td>指定串口号</td>\n</tr>\n<tr>\n<td><strong>baud</strong></td>\n<td>指定下载波特率</td>\n</tr>\n<tr>\n<td><strong>write_flash</strong></td>\n<td>烧写二进制文件到指定位置</td>\n</tr>\n<tr>\n<td><strong>-fm</strong></td>\n<td>SPI Flash mode( ‘qio’, ‘qout’, ‘dio’, ‘dout’)     </td>\n</tr>\n<tr>\n<td><strong>-ff</strong></td>\n<td>SPI Flash frequency(‘40m’, ‘26m’, ‘20m’, ‘80m’)</td>\n</tr>\n<tr>\n<td><strong>-fs</strong></td>\n<td>SPI Flash size in Mbit(4m’, ‘2m’, ‘8m’, ‘16m’, ‘32m’, ‘16m-c1’, ‘32m-c1’, ‘32m-c2’, ‘64m’, ‘128m’)</td>\n</tr>\n<tr>\n<td><strong>0x3fc000</strong></td>\n<td>指定烧录地址</td>\n</tr>\n<tr>\n<td><strong>0x3fc000.bin</strong></td>\n<td>对应的烧录文件</td>\n</tr>\n</tbody>\n</table>"},{"title":"如何搭建自己平台的esp8266编译器","date":"2017-08-01T14:42:11.000Z","_content":"\n---\n### 为什么要搭建自己平台的编译器\n在乐鑫的官网上已经有公布了编译好的编译器，:http://bbs.espressif.com/viewtopic.php?f=57&t=2\n但是这里的编译器只是适合32位系统上的；\n![image.png-39.4kB][1]\n若你的系统是64位的，或者你在其他的平台上，那么就得自己编译生成对应平台的编译器了；\n下面以64位Ubuntu系统为例子，演示如何编译自己平台的esp8266编译器;\n\n<!--more-->\n\n### Ubuntu 基本信息\n```\nalex@alex-virtual-machine:/$ uname -a\nLinux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nalex@alex-virtual-machine:/$ gcc -v\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.3' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)\n```\n### 第一步，安装编译需要的软件包\n```shell\nsudo apt-get install git autoconf build-essential gperf bison flex texinfo libtool libncurses5-dev wget gawk libc6-dev-amd64 python-serial libexpat-dev\n```\n### 第二步，下载编译器源码\n```shell\n# 创建源码目录\ncd ~/\nmkdir esptool/buildTool\ncd esptool/buildTool\n# 下载源码\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git\n```\n>**一定要注意下载的是 lx106 分支的代码，因为ESP8266内置Tensilical L106 32bit微处理器**\n\n### 第三部，生成配置文件\n```\ncd crosstool-NG\n#生成.configure\n./bootstrap\n#将检查依赖文件包，并通过--prefix配置安装路径为当前目录\n#若有提示确实的依赖文件，解决方法：sudo apt-get install libtool\n./configure --prefix=`pwd`\nmake\nmake install\n./ct-ng xtensa-lx106-elf\n```\n运行过程日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./bootstrap\nRunning autoconf...\nDone. You may now run:\n    ./configure\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./configure --prefix=`pwd`\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking for grep that handles long lines and -e... /bin/grep\nchecking for egrep... /bin/grep -E\nchecking for a sed that does not truncate output... /bin/sed\nchecking whether sed understands -r -i -e... yes\nchecking whether ln -s works... yes\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables...\nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking how to run the C preprocessor... gcc -E\nchecking for ranlib... ranlib\nchecking for gobjcopy... no\nchecking for objcopy... objcopy\nchecking for absolute path to objcopy... /usr/bin/objcopy\nchecking for gobjdump... no\nchecking for objdump... objdump\nchecking for absolute path to objdump... /usr/bin/objdump\nchecking for greadelf... no\nchecking for readelf... readelf\nchecking for absolute path to readelf... /usr/bin/readelf\nchecking for gperf... gperf\nchecking for absolute path to gperf... /usr/bin/gperf\nchecking for bison... bison\nchecking for flex... flex\nchecking for makeinfo... makeinfo\nchecking for cut... cut\nchecking for stat... stat\nchecking for readlink... readlink\nchecking for wget... wget\nchecking for tar... tar\nchecking for gzip... gzip\nchecking for bzip2... bzip2\nchecking for patch... /usr/bin/patch\nchecking for bash >= 3.1... /bin/bash\nchecking for GNU awk... /usr/bin/gawk\nchecking for GNU make >= 3.80... /usr/bin/make\nchecking whether /usr/bin/make sets $(MAKE)... yes\nchecking for make 3.81... yes\nchecking for GNU libtool >= 1.5.26... /usr/bin/libtool\nchecking for GNU libtool >= 1.5.26... /usr/bin/libtool\nchecking for GNU libtoolize >= 1.5.26... /usr/bin/libtoolize\nchecking for GNU automake >= 1.10... /usr/bin/automake\nchecking for xz... xz\nchecking for cvs... no\nchecking for svn... no\nchecking for inline... inline\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible malloc... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible realloc... yes\nchecking for size_t... yes\nchecking for working alloca.h... yes\nchecking for alloca... yes\nchecking libintl.h usability... yes\nchecking libintl.h presence... yes\nchecking for libintl.h... yes\nchecking whether gettext is declared... yes\nchecking ncurses/ncurses.h usability... no\nchecking ncurses/ncurses.h presence... no\nchecking for ncurses/ncurses.h... no\nchecking ncurses/curses.h usability... no\nchecking ncurses/curses.h presence... no\nchecking for ncurses/curses.h... no\nchecking ncursesw/curses.h usability... no\nchecking ncursesw/curses.h presence... no\nchecking for ncursesw/curses.h... no\nchecking ncurses.h usability... yes\nchecking ncurses.h presence... yes\nchecking for ncurses.h... yes\nchecking for library containing initscr... -lncurses\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make\n  SED    'ct-ng'\n  SED    'scripts/crosstool-NG.sh'\n  SED    'scripts/saveSample.sh'\n  SED    'scripts/showTuple.sh'\n  GEN    'config/configure.in'\n  GEN    'paths.mk'\n  GEN    'paths.sh'\n  SED    'docs/ct-ng.1'\n  GZIP   'docs/ct-ng.1.gz'\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make install\n  GEN    'config/configure.in'\n  GEN    'paths.mk'\n  GEN    'paths.sh'\n  INST    'ct-ng'\n  INSTDIR 'config/'\n  INSTDIR 'contrib/'\n  INSTDIR 'patches/'\n  INSTDIR 'scripts/'\n  INST    'steps.mk'\n  INST    'paths'\n  INSTDIR 'samples/'\n  INST    'kconfig/'\n  INST    'docs/*.txt'\n  INST    'ct-ng.1.gz'\n\nFor auto-completion, do not forget to install 'ct-ng.comp' into\nyour bash completion directory (usually /etc/bash_completion.d)\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng xtensa-lx106-elf\n  CONF  config/config.in\n#\n# configuration saved\n#\n\n***********************************************************\n\nInitially reported by: Max Filippov <jcmvbkbc@gmail.com>\nURL: http://www.esp8266.com/viewtopic.php?f=9&t=224\n\n***********************************************************\n\nWARNING! This sample may enable experimental features.\n         Please be sure to review the configuration prior\n         to building and using your toolchain!\nNow, you have been warned!\n\n***********************************************************\n\nNow configured for \"xtensa-lx106-elf\"\n```\n### 第四步，修改crosstool_NG配置&编译\n- 在crosstool-NG目录下执行./ct-ng menuconfig进行配置\n\n```\n./ct-ng menuconfig\n```\n![image.png-87.3kB][2]\n\n-  配置多线程编译\n“Paths and misc options”->“Number of parallel jobs”\n\n![image.png-128.4kB][3]\n\n- 保存编译中间步骤\n“Paths and misc options”->“Debug crosstool-NG”->“Save intermediate steps”\n\n![image.png-141.1kB][4]\n\n- 编译交叉编译工具(**这个过程比较久，我编译了33分钟，要耐心等待~~~**)\n\n```\n./ct-ng build\n```\n运行日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng build\n[INFO ]  Performing some trivial sanity checks\n[INFO ]  Build started 20170730.163954\n[INFO ]  Building environment variables\n[INFO ]  =================================================================\n[INFO ]  Retrieving needed toolchain components' tarballs\n[INFO ]  Retrieving needed toolchain components' tarballs: done in 0.15s (at 00:17)\n[INFO ]  =================================================================\n[INFO ]  Extracting and patching toolchain components\n[INFO ]  Extracting and patching toolchain components: done in 0.88s (at 00:18)\n[INFO ]  Saving state to restart at step 'libc_check_config'...\n[INFO ]  Saving state to restart at step 'companion_libs_for_build'...\n[INFO ]  Saving state to restart at step 'binutils_for_build'...\n[INFO ]  Saving state to restart at step 'companion_libs_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing GMP for host\n[INFO ]  Installing GMP for host: done in 139.49s (at 02:38)\n[INFO ]  =================================================================\n[INFO ]  Installing MPFR for host\n[INFO ]  Installing MPFR for host: done in 51.10s (at 03:29)\n[INFO ]  =================================================================\n[INFO ]  Installing ISL for host\n[INFO ]  Installing ISL for host: done in 109.78s (at 05:19)\n[INFO ]  =================================================================\n[INFO ]  Installing CLooG for host\n[INFO ]  Installing CLooG for host: done in 19.59s (at 05:39)\n[INFO ]  =================================================================\n[INFO ]  Installing MPC for host\n[INFO ]  Installing MPC for host: done in 21.96s (at 06:01)\n[INFO ]  Saving state to restart at step 'binutils_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing binutils for host\n[INFO ]  Installing binutils for host: done in 209.94s (at 09:32)\n[INFO ]  Saving state to restart at step 'cc_core_pass_1'...\n[INFO ]  Saving state to restart at step 'kernel_headers'...\n[INFO ]  Saving state to restart at step 'libc_start_files'...\n[INFO ]  Saving state to restart at step 'cc_core_pass_2'...\n[INFO ]  Saving state to restart at step 'libc'...\n[INFO ]  Saving state to restart at step 'cc_for_build'...\n[INFO ]  Saving state to restart at step 'cc_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing final compiler\n[INFO ]  Installing final compiler: done in 965.90s (at 26:12)\n[INFO ]  Saving state to restart at step 'libelf_for_target'...\n[INFO ]  Saving state to restart at step 'binutils_for_target'...\n[INFO ]  Saving state to restart at step 'debug'...\n[INFO ]  =================================================================\n[INFO ]  Installing cross-gdb\n[INFO ]  Installing cross-gdb: done in 336.23s (at 32:36)\n[INFO ]  Saving state to restart at step 'test_suite'...\n[INFO ]  Saving state to restart at step 'finish'...\n[INFO ]  =================================================================\n[INFO ]  Cleaning-up the toolchain's directory\n[INFO ]    Stripping all toolchain executables\n[INFO ]  Cleaning-up the toolchain's directory: done in 2.31s (at 33:07)\n[INFO ]  Build completed at 20170730.171300\n[INFO ]  (elapsed: 33:06.05)\n[INFO ]  Finishing installation (may take a few seconds)...\n[33:07] / alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$\n```\n**编译生成文件在根目录下的builds下，文件名为xtensa-lx106-elf**\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\nxtensa-lx106-elf\n```\n\n### 第五步，添加esp8266 依赖头文件\n```\n#编译ESP8266必须添加以下库文件，不然就会报找不到相应库（如： xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: cannot find -lhal）\nwget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\n## 设置可读可写可执行权限\nsudo chmod -R u+x+r+w xtensa-lx106-elf/\nsudo chmod 777 libc.a libhal.a\ncp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/\ntar -xvf include.tgz\nsudo chmod 777 include/*\nsudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/\n```\n过程日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\n--2017-07-30 17:19:01--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nResolving github.com (github.com)... 192.30.255.113, 192.30.255.112\nConnecting to github.com (github.com)|192.30.255.113|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a [following]\n--2017-07-30 17:19:02--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2754022 (2.6M) [application/octet-stream]\nSaving to: ‘libc.a’\n\n100%[=====================================================================================================>] 2,754,022   4.78KB/s   in 7m 38s\n\n2017-07-30 17:26:41 (5.87 KB/s) - ‘libc.a’ saved [2754022/2754022]\n\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\n--2017-07-30 17:27:29--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nResolving github.com (github.com)... 192.30.255.112, 192.30.255.113\nConnecting to github.com (github.com)|192.30.255.112|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a [following]\n--2017-07-30 17:27:30--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 347624 (339K) [application/octet-stream]\nSaving to: ‘libhal.a’\n\n100%[=====================================================================================================>] 347,624     15.1KB/s   in 24s\n\n2017-07-30 17:27:57 (13.9 KB/s) - ‘libhal.a’ saved [347624/347624]\n\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\n--2017-07-30 17:28:07--  https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\nResolving github.com (github.com)... 192.30.255.112, 192.30.255.113\nConnecting to github.com (github.com)|192.30.255.112|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz [following]\n--2017-07-30 17:28:08--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 979111 (956K) [application/octet-stream]\nSaving to: ‘include.tgz’\n\n100%[=====================================================================================================>] 979,111     75.2KB/s   in 10s\n\n2017-07-30 17:28:19 (93.5 KB/s) - ‘include.tgz’ saved [979111/979111]\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\ninclude.tgz  libc.a  libhal.a  xtensa-lx106-elf\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod -R u+x+r+w xtensa-lx106-elf/\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod 777 include/*\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/\n```\n### 第六步，添加编译工具到环境变量\n - 把生成的编译器工具下的bin路径添加到环境变量中\n\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\ninclude  include.tgz  libc.a  libhal.a  xtensa-lx106-elf\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ echo \"export PATH=~/esptool/buildTool/crosstool-NG/builds/xtensa-lx106-elf/bin:$PATH\" >>~/.profile\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ source ~/.profile\n```\n\n### 编译验证\n成功~\n![image.png-67.8kB][5]\n\n### 编译好编译工具\n如果你不想走以上的流程，那么可以使用我编译好的，这个编译器可以在64位是Ubuntu1402上运行。\n\n下载链接：http://pan.baidu.com/s/1jHLNQTo 密码：s70o\n\n下载完成之后，参考**第六步**，把工具添加到环境变量中去。\n\n\n**hope you like it~\nby AlexLin**\n\n[1]: http://static.zybuluo.com/AlexLin/vp3gfy4adgs6ipmc6gftuaj2/image.png\n[2]: http://static.zybuluo.com/AlexLin/ulwtccvkik8a6t1m8861g9kt/image.png\n[3]: http://static.zybuluo.com/AlexLin/kayiaw7ks1gph5eebwfv6i2w/image.png\n[4]: http://static.zybuluo.com/AlexLin/6f1aygjx6rtuolnell8m8g1b/image.png\n[5]: http://static.zybuluo.com/AlexLin/j8khwtatkzace5rfnt527r7l/image.png","source":"_posts/如何搭建自己平台的esp8266 编译器.md","raw":"---\ntitle: 如何搭建自己平台的esp8266编译器\ndate: 2017-07-32 22:42:11\ntags: [esp8266,gcc]\n---\n\n---\n### 为什么要搭建自己平台的编译器\n在乐鑫的官网上已经有公布了编译好的编译器，:http://bbs.espressif.com/viewtopic.php?f=57&t=2\n但是这里的编译器只是适合32位系统上的；\n![image.png-39.4kB][1]\n若你的系统是64位的，或者你在其他的平台上，那么就得自己编译生成对应平台的编译器了；\n下面以64位Ubuntu系统为例子，演示如何编译自己平台的esp8266编译器;\n\n<!--more-->\n\n### Ubuntu 基本信息\n```\nalex@alex-virtual-machine:/$ uname -a\nLinux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nalex@alex-virtual-machine:/$ gcc -v\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.3' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)\n```\n### 第一步，安装编译需要的软件包\n```shell\nsudo apt-get install git autoconf build-essential gperf bison flex texinfo libtool libncurses5-dev wget gawk libc6-dev-amd64 python-serial libexpat-dev\n```\n### 第二步，下载编译器源码\n```shell\n# 创建源码目录\ncd ~/\nmkdir esptool/buildTool\ncd esptool/buildTool\n# 下载源码\ngit clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git\n```\n>**一定要注意下载的是 lx106 分支的代码，因为ESP8266内置Tensilical L106 32bit微处理器**\n\n### 第三部，生成配置文件\n```\ncd crosstool-NG\n#生成.configure\n./bootstrap\n#将检查依赖文件包，并通过--prefix配置安装路径为当前目录\n#若有提示确实的依赖文件，解决方法：sudo apt-get install libtool\n./configure --prefix=`pwd`\nmake\nmake install\n./ct-ng xtensa-lx106-elf\n```\n运行过程日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./bootstrap\nRunning autoconf...\nDone. You may now run:\n    ./configure\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./configure --prefix=`pwd`\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking for grep that handles long lines and -e... /bin/grep\nchecking for egrep... /bin/grep -E\nchecking for a sed that does not truncate output... /bin/sed\nchecking whether sed understands -r -i -e... yes\nchecking whether ln -s works... yes\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables...\nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking how to run the C preprocessor... gcc -E\nchecking for ranlib... ranlib\nchecking for gobjcopy... no\nchecking for objcopy... objcopy\nchecking for absolute path to objcopy... /usr/bin/objcopy\nchecking for gobjdump... no\nchecking for objdump... objdump\nchecking for absolute path to objdump... /usr/bin/objdump\nchecking for greadelf... no\nchecking for readelf... readelf\nchecking for absolute path to readelf... /usr/bin/readelf\nchecking for gperf... gperf\nchecking for absolute path to gperf... /usr/bin/gperf\nchecking for bison... bison\nchecking for flex... flex\nchecking for makeinfo... makeinfo\nchecking for cut... cut\nchecking for stat... stat\nchecking for readlink... readlink\nchecking for wget... wget\nchecking for tar... tar\nchecking for gzip... gzip\nchecking for bzip2... bzip2\nchecking for patch... /usr/bin/patch\nchecking for bash >= 3.1... /bin/bash\nchecking for GNU awk... /usr/bin/gawk\nchecking for GNU make >= 3.80... /usr/bin/make\nchecking whether /usr/bin/make sets $(MAKE)... yes\nchecking for make 3.81... yes\nchecking for GNU libtool >= 1.5.26... /usr/bin/libtool\nchecking for GNU libtool >= 1.5.26... /usr/bin/libtool\nchecking for GNU libtoolize >= 1.5.26... /usr/bin/libtoolize\nchecking for GNU automake >= 1.10... /usr/bin/automake\nchecking for xz... xz\nchecking for cvs... no\nchecking for svn... no\nchecking for inline... inline\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible malloc... yes\nchecking for stdlib.h... (cached) yes\nchecking for GNU libc compatible realloc... yes\nchecking for size_t... yes\nchecking for working alloca.h... yes\nchecking for alloca... yes\nchecking libintl.h usability... yes\nchecking libintl.h presence... yes\nchecking for libintl.h... yes\nchecking whether gettext is declared... yes\nchecking ncurses/ncurses.h usability... no\nchecking ncurses/ncurses.h presence... no\nchecking for ncurses/ncurses.h... no\nchecking ncurses/curses.h usability... no\nchecking ncurses/curses.h presence... no\nchecking for ncurses/curses.h... no\nchecking ncursesw/curses.h usability... no\nchecking ncursesw/curses.h presence... no\nchecking for ncursesw/curses.h... no\nchecking ncurses.h usability... yes\nchecking ncurses.h presence... yes\nchecking for ncurses.h... yes\nchecking for library containing initscr... -lncurses\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make\n  SED    'ct-ng'\n  SED    'scripts/crosstool-NG.sh'\n  SED    'scripts/saveSample.sh'\n  SED    'scripts/showTuple.sh'\n  GEN    'config/configure.in'\n  GEN    'paths.mk'\n  GEN    'paths.sh'\n  SED    'docs/ct-ng.1'\n  GZIP   'docs/ct-ng.1.gz'\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make install\n  GEN    'config/configure.in'\n  GEN    'paths.mk'\n  GEN    'paths.sh'\n  INST    'ct-ng'\n  INSTDIR 'config/'\n  INSTDIR 'contrib/'\n  INSTDIR 'patches/'\n  INSTDIR 'scripts/'\n  INST    'steps.mk'\n  INST    'paths'\n  INSTDIR 'samples/'\n  INST    'kconfig/'\n  INST    'docs/*.txt'\n  INST    'ct-ng.1.gz'\n\nFor auto-completion, do not forget to install 'ct-ng.comp' into\nyour bash completion directory (usually /etc/bash_completion.d)\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng xtensa-lx106-elf\n  CONF  config/config.in\n#\n# configuration saved\n#\n\n***********************************************************\n\nInitially reported by: Max Filippov <jcmvbkbc@gmail.com>\nURL: http://www.esp8266.com/viewtopic.php?f=9&t=224\n\n***********************************************************\n\nWARNING! This sample may enable experimental features.\n         Please be sure to review the configuration prior\n         to building and using your toolchain!\nNow, you have been warned!\n\n***********************************************************\n\nNow configured for \"xtensa-lx106-elf\"\n```\n### 第四步，修改crosstool_NG配置&编译\n- 在crosstool-NG目录下执行./ct-ng menuconfig进行配置\n\n```\n./ct-ng menuconfig\n```\n![image.png-87.3kB][2]\n\n-  配置多线程编译\n“Paths and misc options”->“Number of parallel jobs”\n\n![image.png-128.4kB][3]\n\n- 保存编译中间步骤\n“Paths and misc options”->“Debug crosstool-NG”->“Save intermediate steps”\n\n![image.png-141.1kB][4]\n\n- 编译交叉编译工具(**这个过程比较久，我编译了33分钟，要耐心等待~~~**)\n\n```\n./ct-ng build\n```\n运行日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng build\n[INFO ]  Performing some trivial sanity checks\n[INFO ]  Build started 20170730.163954\n[INFO ]  Building environment variables\n[INFO ]  =================================================================\n[INFO ]  Retrieving needed toolchain components' tarballs\n[INFO ]  Retrieving needed toolchain components' tarballs: done in 0.15s (at 00:17)\n[INFO ]  =================================================================\n[INFO ]  Extracting and patching toolchain components\n[INFO ]  Extracting and patching toolchain components: done in 0.88s (at 00:18)\n[INFO ]  Saving state to restart at step 'libc_check_config'...\n[INFO ]  Saving state to restart at step 'companion_libs_for_build'...\n[INFO ]  Saving state to restart at step 'binutils_for_build'...\n[INFO ]  Saving state to restart at step 'companion_libs_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing GMP for host\n[INFO ]  Installing GMP for host: done in 139.49s (at 02:38)\n[INFO ]  =================================================================\n[INFO ]  Installing MPFR for host\n[INFO ]  Installing MPFR for host: done in 51.10s (at 03:29)\n[INFO ]  =================================================================\n[INFO ]  Installing ISL for host\n[INFO ]  Installing ISL for host: done in 109.78s (at 05:19)\n[INFO ]  =================================================================\n[INFO ]  Installing CLooG for host\n[INFO ]  Installing CLooG for host: done in 19.59s (at 05:39)\n[INFO ]  =================================================================\n[INFO ]  Installing MPC for host\n[INFO ]  Installing MPC for host: done in 21.96s (at 06:01)\n[INFO ]  Saving state to restart at step 'binutils_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing binutils for host\n[INFO ]  Installing binutils for host: done in 209.94s (at 09:32)\n[INFO ]  Saving state to restart at step 'cc_core_pass_1'...\n[INFO ]  Saving state to restart at step 'kernel_headers'...\n[INFO ]  Saving state to restart at step 'libc_start_files'...\n[INFO ]  Saving state to restart at step 'cc_core_pass_2'...\n[INFO ]  Saving state to restart at step 'libc'...\n[INFO ]  Saving state to restart at step 'cc_for_build'...\n[INFO ]  Saving state to restart at step 'cc_for_host'...\n[INFO ]  =================================================================\n[INFO ]  Installing final compiler\n[INFO ]  Installing final compiler: done in 965.90s (at 26:12)\n[INFO ]  Saving state to restart at step 'libelf_for_target'...\n[INFO ]  Saving state to restart at step 'binutils_for_target'...\n[INFO ]  Saving state to restart at step 'debug'...\n[INFO ]  =================================================================\n[INFO ]  Installing cross-gdb\n[INFO ]  Installing cross-gdb: done in 336.23s (at 32:36)\n[INFO ]  Saving state to restart at step 'test_suite'...\n[INFO ]  Saving state to restart at step 'finish'...\n[INFO ]  =================================================================\n[INFO ]  Cleaning-up the toolchain's directory\n[INFO ]    Stripping all toolchain executables\n[INFO ]  Cleaning-up the toolchain's directory: done in 2.31s (at 33:07)\n[INFO ]  Build completed at 20170730.171300\n[INFO ]  (elapsed: 33:06.05)\n[INFO ]  Finishing installation (may take a few seconds)...\n[33:07] / alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$\n```\n**编译生成文件在根目录下的builds下，文件名为xtensa-lx106-elf**\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\nxtensa-lx106-elf\n```\n\n### 第五步，添加esp8266 依赖头文件\n```\n#编译ESP8266必须添加以下库文件，不然就会报找不到相应库（如： xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: cannot find -lhal）\nwget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nwget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nwget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\n## 设置可读可写可执行权限\nsudo chmod -R u+x+r+w xtensa-lx106-elf/\nsudo chmod 777 libc.a libhal.a\ncp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/\ntar -xvf include.tgz\nsudo chmod 777 include/*\nsudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/\n```\n过程日志\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\n--2017-07-30 17:19:01--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a\nResolving github.com (github.com)... 192.30.255.113, 192.30.255.112\nConnecting to github.com (github.com)|192.30.255.113|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a [following]\n--2017-07-30 17:19:02--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2754022 (2.6M) [application/octet-stream]\nSaving to: ‘libc.a’\n\n100%[=====================================================================================================>] 2,754,022   4.78KB/s   in 7m 38s\n\n2017-07-30 17:26:41 (5.87 KB/s) - ‘libc.a’ saved [2754022/2754022]\n\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\n--2017-07-30 17:27:29--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a\nResolving github.com (github.com)... 192.30.255.112, 192.30.255.113\nConnecting to github.com (github.com)|192.30.255.112|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a [following]\n--2017-07-30 17:27:30--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 347624 (339K) [application/octet-stream]\nSaving to: ‘libhal.a’\n\n100%[=====================================================================================================>] 347,624     15.1KB/s   in 24s\n\n2017-07-30 17:27:57 (13.9 KB/s) - ‘libhal.a’ saved [347624/347624]\n\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\n--2017-07-30 17:28:07--  https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz\nResolving github.com (github.com)... 192.30.255.112, 192.30.255.113\nConnecting to github.com (github.com)|192.30.255.112|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz [following]\n--2017-07-30 17:28:08--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 979111 (956K) [application/octet-stream]\nSaving to: ‘include.tgz’\n\n100%[=====================================================================================================>] 979,111     75.2KB/s   in 10s\n\n2017-07-30 17:28:19 (93.5 KB/s) - ‘include.tgz’ saved [979111/979111]\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\ninclude.tgz  libc.a  libhal.a  xtensa-lx106-elf\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod -R u+x+r+w xtensa-lx106-elf/\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod 777 include/*\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/\n```\n### 第六步，添加编译工具到环境变量\n - 把生成的编译器工具下的bin路径添加到环境变量中\n\n```\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls\ninclude  include.tgz  libc.a  libhal.a  xtensa-lx106-elf\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ echo \"export PATH=~/esptool/buildTool/crosstool-NG/builds/xtensa-lx106-elf/bin:$PATH\" >>~/.profile\nalex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ source ~/.profile\n```\n\n### 编译验证\n成功~\n![image.png-67.8kB][5]\n\n### 编译好编译工具\n如果你不想走以上的流程，那么可以使用我编译好的，这个编译器可以在64位是Ubuntu1402上运行。\n\n下载链接：http://pan.baidu.com/s/1jHLNQTo 密码：s70o\n\n下载完成之后，参考**第六步**，把工具添加到环境变量中去。\n\n\n**hope you like it~\nby AlexLin**\n\n[1]: http://static.zybuluo.com/AlexLin/vp3gfy4adgs6ipmc6gftuaj2/image.png\n[2]: http://static.zybuluo.com/AlexLin/ulwtccvkik8a6t1m8861g9kt/image.png\n[3]: http://static.zybuluo.com/AlexLin/kayiaw7ks1gph5eebwfv6i2w/image.png\n[4]: http://static.zybuluo.com/AlexLin/6f1aygjx6rtuolnell8m8g1b/image.png\n[5]: http://static.zybuluo.com/AlexLin/j8khwtatkzace5rfnt527r7l/image.png","slug":"如何搭建自己平台的esp8266 编译器","published":1,"updated":"2017-08-01T16:57:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt830018tns1cj0d8vuj","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><hr>\n<h3 id=\"为什么要搭建自己平台的编译器\"><a href=\"#为什么要搭建自己平台的编译器\" class=\"headerlink\" title=\"为什么要搭建自己平台的编译器\"></a>为什么要搭建自己平台的编译器</h3><p>在乐鑫的官网上已经有公布了编译好的编译器，:<a href=\"http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2\" target=\"_blank\" rel=\"external\">http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2</a><br>但是这里的编译器只是适合32位系统上的；<br><img src=\"http://static.zybuluo.com/AlexLin/vp3gfy4adgs6ipmc6gftuaj2/image.png\" alt=\"image.png-39.4kB\"><br>若你的系统是64位的，或者你在其他的平台上，那么就得自己编译生成对应平台的编译器了；<br>下面以64位Ubuntu系统为例子，演示如何编译自己平台的esp8266编译器;</p>\n<a id=\"more\"></a>\n<h3 id=\"Ubuntu-基本信息\"><a href=\"#Ubuntu-基本信息\" class=\"headerlink\" title=\"Ubuntu 基本信息\"></a>Ubuntu 基本信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/$ uname -a</div><div class=\"line\">Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class=\"line\">alex@alex-virtual-machine:/$ gcc -v</div><div class=\"line\">Using built-in specs.</div><div class=\"line\">COLLECT_GCC=gcc</div><div class=\"line\">COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper</div><div class=\"line\">Target: x86_64-linux-gnu</div><div class=\"line\">Configured with: ../src/configure -v --with-pkgversion=&apos;Ubuntu 4.8.4-2ubuntu1~14.04.3&apos; --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu</div><div class=\"line\">Thread model: posix</div><div class=\"line\">gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)</div></pre></td></tr></table></figure>\n<h3 id=\"第一步，安装编译需要的软件包\"><a href=\"#第一步，安装编译需要的软件包\" class=\"headerlink\" title=\"第一步，安装编译需要的软件包\"></a>第一步，安装编译需要的软件包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git autoconf build-essential gperf bison flex texinfo libtool libncurses5-dev wget gawk libc6-dev-amd64 python-serial libexpat-dev</div></pre></td></tr></table></figure>\n<h3 id=\"第二步，下载编译器源码\"><a href=\"#第二步，下载编译器源码\" class=\"headerlink\" title=\"第二步，下载编译器源码\"></a>第二步，下载编译器源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建源码目录</div><div class=\"line\">cd ~/</div><div class=\"line\">mkdir esptool/buildTool</div><div class=\"line\">cd esptool/buildTool</div><div class=\"line\"># 下载源码</div><div class=\"line\">git clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>一定要注意下载的是 lx106 分支的代码，因为ESP8266内置Tensilical L106 32bit微处理器</strong></p>\n</blockquote>\n<h3 id=\"第三部，生成配置文件\"><a href=\"#第三部，生成配置文件\" class=\"headerlink\" title=\"第三部，生成配置文件\"></a>第三部，生成配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd crosstool-NG</div><div class=\"line\">#生成.configure</div><div class=\"line\">./bootstrap</div><div class=\"line\">#将检查依赖文件包，并通过--prefix配置安装路径为当前目录</div><div class=\"line\">#若有提示确实的依赖文件，解决方法：sudo apt-get install libtool</div><div class=\"line\">./configure --prefix=`pwd`</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">./ct-ng xtensa-lx106-elf</div></pre></td></tr></table></figure>\n<p>运行过程日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./bootstrap</div><div class=\"line\">Running autoconf...</div><div class=\"line\">Done. You may now run:</div><div class=\"line\">    ./configure</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./configure --prefix=`pwd`</div><div class=\"line\">checking build system type... x86_64-unknown-linux-gnu</div><div class=\"line\">checking host system type... x86_64-unknown-linux-gnu</div><div class=\"line\">checking for a BSD-compatible install... /usr/bin/install -c</div><div class=\"line\">checking for grep that handles long lines and -e... /bin/grep</div><div class=\"line\">checking for egrep... /bin/grep -E</div><div class=\"line\">checking for a sed that does not truncate output... /bin/sed</div><div class=\"line\">checking whether sed understands -r -i -e... yes</div><div class=\"line\">checking whether ln -s works... yes</div><div class=\"line\">checking for gcc... gcc</div><div class=\"line\">checking whether the C compiler works... yes</div><div class=\"line\">checking for C compiler default output file name... a.out</div><div class=\"line\">checking for suffix of executables...</div><div class=\"line\">checking whether we are cross compiling... no</div><div class=\"line\">checking for suffix of object files... o</div><div class=\"line\">checking whether we are using the GNU C compiler... yes</div><div class=\"line\">checking whether gcc accepts -g... yes</div><div class=\"line\">checking for gcc option to accept ISO C89... none needed</div><div class=\"line\">checking how to run the C preprocessor... gcc -E</div><div class=\"line\">checking for ranlib... ranlib</div><div class=\"line\">checking for gobjcopy... no</div><div class=\"line\">checking for objcopy... objcopy</div><div class=\"line\">checking for absolute path to objcopy... /usr/bin/objcopy</div><div class=\"line\">checking for gobjdump... no</div><div class=\"line\">checking for objdump... objdump</div><div class=\"line\">checking for absolute path to objdump... /usr/bin/objdump</div><div class=\"line\">checking for greadelf... no</div><div class=\"line\">checking for readelf... readelf</div><div class=\"line\">checking for absolute path to readelf... /usr/bin/readelf</div><div class=\"line\">checking for gperf... gperf</div><div class=\"line\">checking for absolute path to gperf... /usr/bin/gperf</div><div class=\"line\">checking for bison... bison</div><div class=\"line\">checking for flex... flex</div><div class=\"line\">checking for makeinfo... makeinfo</div><div class=\"line\">checking for cut... cut</div><div class=\"line\">checking for stat... stat</div><div class=\"line\">checking for readlink... readlink</div><div class=\"line\">checking for wget... wget</div><div class=\"line\">checking for tar... tar</div><div class=\"line\">checking for gzip... gzip</div><div class=\"line\">checking for bzip2... bzip2</div><div class=\"line\">checking for patch... /usr/bin/patch</div><div class=\"line\">checking for bash &gt;= 3.1... /bin/bash</div><div class=\"line\">checking for GNU awk... /usr/bin/gawk</div><div class=\"line\">checking for GNU make &gt;= 3.80... /usr/bin/make</div><div class=\"line\">checking whether /usr/bin/make sets $(MAKE)... yes</div><div class=\"line\">checking for make 3.81... yes</div><div class=\"line\">checking for GNU libtool &gt;= 1.5.26... /usr/bin/libtool</div><div class=\"line\">checking for GNU libtool &gt;= 1.5.26... /usr/bin/libtool</div><div class=\"line\">checking for GNU libtoolize &gt;= 1.5.26... /usr/bin/libtoolize</div><div class=\"line\">checking for GNU automake &gt;= 1.10... /usr/bin/automake</div><div class=\"line\">checking for xz... xz</div><div class=\"line\">checking for cvs... no</div><div class=\"line\">checking for svn... no</div><div class=\"line\">checking for inline... inline</div><div class=\"line\">checking for ANSI C header files... yes</div><div class=\"line\">checking for sys/types.h... yes</div><div class=\"line\">checking for sys/stat.h... yes</div><div class=\"line\">checking for stdlib.h... yes</div><div class=\"line\">checking for string.h... yes</div><div class=\"line\">checking for memory.h... yes</div><div class=\"line\">checking for strings.h... yes</div><div class=\"line\">checking for inttypes.h... yes</div><div class=\"line\">checking for stdint.h... yes</div><div class=\"line\">checking for unistd.h... yes</div><div class=\"line\">checking for stdlib.h... (cached) yes</div><div class=\"line\">checking for GNU libc compatible malloc... yes</div><div class=\"line\">checking for stdlib.h... (cached) yes</div><div class=\"line\">checking for GNU libc compatible realloc... yes</div><div class=\"line\">checking for size_t... yes</div><div class=\"line\">checking for working alloca.h... yes</div><div class=\"line\">checking for alloca... yes</div><div class=\"line\">checking libintl.h usability... yes</div><div class=\"line\">checking libintl.h presence... yes</div><div class=\"line\">checking for libintl.h... yes</div><div class=\"line\">checking whether gettext is declared... yes</div><div class=\"line\">checking ncurses/ncurses.h usability... no</div><div class=\"line\">checking ncurses/ncurses.h presence... no</div><div class=\"line\">checking for ncurses/ncurses.h... no</div><div class=\"line\">checking ncurses/curses.h usability... no</div><div class=\"line\">checking ncurses/curses.h presence... no</div><div class=\"line\">checking for ncurses/curses.h... no</div><div class=\"line\">checking ncursesw/curses.h usability... no</div><div class=\"line\">checking ncursesw/curses.h presence... no</div><div class=\"line\">checking for ncursesw/curses.h... no</div><div class=\"line\">checking ncurses.h usability... yes</div><div class=\"line\">checking ncurses.h presence... yes</div><div class=\"line\">checking for ncurses.h... yes</div><div class=\"line\">checking for library containing initscr... -lncurses</div><div class=\"line\">configure: creating ./config.status</div><div class=\"line\">config.status: creating Makefile</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make</div><div class=\"line\">  SED    &apos;ct-ng&apos;</div><div class=\"line\">  SED    &apos;scripts/crosstool-NG.sh&apos;</div><div class=\"line\">  SED    &apos;scripts/saveSample.sh&apos;</div><div class=\"line\">  SED    &apos;scripts/showTuple.sh&apos;</div><div class=\"line\">  GEN    &apos;config/configure.in&apos;</div><div class=\"line\">  GEN    &apos;paths.mk&apos;</div><div class=\"line\">  GEN    &apos;paths.sh&apos;</div><div class=\"line\">  SED    &apos;docs/ct-ng.1&apos;</div><div class=\"line\">  GZIP   &apos;docs/ct-ng.1.gz&apos;</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make install</div><div class=\"line\">  GEN    &apos;config/configure.in&apos;</div><div class=\"line\">  GEN    &apos;paths.mk&apos;</div><div class=\"line\">  GEN    &apos;paths.sh&apos;</div><div class=\"line\">  INST    &apos;ct-ng&apos;</div><div class=\"line\">  INSTDIR &apos;config/&apos;</div><div class=\"line\">  INSTDIR &apos;contrib/&apos;</div><div class=\"line\">  INSTDIR &apos;patches/&apos;</div><div class=\"line\">  INSTDIR &apos;scripts/&apos;</div><div class=\"line\">  INST    &apos;steps.mk&apos;</div><div class=\"line\">  INST    &apos;paths&apos;</div><div class=\"line\">  INSTDIR &apos;samples/&apos;</div><div class=\"line\">  INST    &apos;kconfig/&apos;</div><div class=\"line\">  INST    &apos;docs/*.txt&apos;</div><div class=\"line\">  INST    &apos;ct-ng.1.gz&apos;</div><div class=\"line\"></div><div class=\"line\">For auto-completion, do not forget to install &apos;ct-ng.comp&apos; into</div><div class=\"line\">your bash completion directory (usually /etc/bash_completion.d)</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng xtensa-lx106-elf</div><div class=\"line\">  CONF  config/config.in</div><div class=\"line\">#</div><div class=\"line\"># configuration saved</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">Initially reported by: Max Filippov &lt;jcmvbkbc@gmail.com&gt;</div><div class=\"line\">URL: http://www.esp8266.com/viewtopic.php?f=9&amp;t=224</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">WARNING! This sample may enable experimental features.</div><div class=\"line\">         Please be sure to review the configuration prior</div><div class=\"line\">         to building and using your toolchain!</div><div class=\"line\">Now, you have been warned!</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">Now configured for &quot;xtensa-lx106-elf&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"第四步，修改crosstool-NG配置-amp-编译\"><a href=\"#第四步，修改crosstool-NG配置-amp-编译\" class=\"headerlink\" title=\"第四步，修改crosstool_NG配置&amp;编译\"></a>第四步，修改crosstool_NG配置&amp;编译</h3><ul>\n<li>在crosstool-NG目录下执行./ct-ng menuconfig进行配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ct-ng menuconfig</div></pre></td></tr></table></figure>\n<p><img src=\"http://static.zybuluo.com/AlexLin/ulwtccvkik8a6t1m8861g9kt/image.png\" alt=\"image.png-87.3kB\"></p>\n<ul>\n<li>配置多线程编译<br>“Paths and misc options”-&gt;“Number of parallel jobs”</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/AlexLin/kayiaw7ks1gph5eebwfv6i2w/image.png\" alt=\"image.png-128.4kB\"></p>\n<ul>\n<li>保存编译中间步骤<br>“Paths and misc options”-&gt;“Debug crosstool-NG”-&gt;“Save intermediate steps”</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/AlexLin/6f1aygjx6rtuolnell8m8g1b/image.png\" alt=\"image.png-141.1kB\"></p>\n<ul>\n<li>编译交叉编译工具(<strong>这个过程比较久，我编译了33分钟，要耐心等待~~~</strong>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ct-ng build</div></pre></td></tr></table></figure>\n<p>运行日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng build</div><div class=\"line\">[INFO ]  Performing some trivial sanity checks</div><div class=\"line\">[INFO ]  Build started 20170730.163954</div><div class=\"line\">[INFO ]  Building environment variables</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Retrieving needed toolchain components&apos; tarballs</div><div class=\"line\">[INFO ]  Retrieving needed toolchain components&apos; tarballs: done in 0.15s (at 00:17)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Extracting and patching toolchain components</div><div class=\"line\">[INFO ]  Extracting and patching toolchain components: done in 0.88s (at 00:18)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc_check_config&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;companion_libs_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;companion_libs_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing GMP for host</div><div class=\"line\">[INFO ]  Installing GMP for host: done in 139.49s (at 02:38)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing MPFR for host</div><div class=\"line\">[INFO ]  Installing MPFR for host: done in 51.10s (at 03:29)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing ISL for host</div><div class=\"line\">[INFO ]  Installing ISL for host: done in 109.78s (at 05:19)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing CLooG for host</div><div class=\"line\">[INFO ]  Installing CLooG for host: done in 19.59s (at 05:39)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing MPC for host</div><div class=\"line\">[INFO ]  Installing MPC for host: done in 21.96s (at 06:01)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing binutils for host</div><div class=\"line\">[INFO ]  Installing binutils for host: done in 209.94s (at 09:32)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_core_pass_1&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;kernel_headers&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc_start_files&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_core_pass_2&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing final compiler</div><div class=\"line\">[INFO ]  Installing final compiler: done in 965.90s (at 26:12)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libelf_for_target&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_target&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;debug&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing cross-gdb</div><div class=\"line\">[INFO ]  Installing cross-gdb: done in 336.23s (at 32:36)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;test_suite&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;finish&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Cleaning-up the toolchain&apos;s directory</div><div class=\"line\">[INFO ]    Stripping all toolchain executables</div><div class=\"line\">[INFO ]  Cleaning-up the toolchain&apos;s directory: done in 2.31s (at 33:07)</div><div class=\"line\">[INFO ]  Build completed at 20170730.171300</div><div class=\"line\">[INFO ]  (elapsed: 33:06.05)</div><div class=\"line\">[INFO ]  Finishing installation (may take a few seconds)...</div><div class=\"line\">[33:07] / alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$</div></pre></td></tr></table></figure></p>\n<p><strong>编译生成文件在根目录下的builds下，文件名为xtensa-lx106-elf</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">xtensa-lx106-elf</div></pre></td></tr></table></figure></p>\n<h3 id=\"第五步，添加esp8266-依赖头文件\"><a href=\"#第五步，添加esp8266-依赖头文件\" class=\"headerlink\" title=\"第五步，添加esp8266 依赖头文件\"></a>第五步，添加esp8266 依赖头文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#编译ESP8266必须添加以下库文件，不然就会报找不到相应库（如： xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: cannot find -lhal）</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">## 设置可读可写可执行权限</div><div class=\"line\">sudo chmod -R u+x+r+w xtensa-lx106-elf/</div><div class=\"line\">sudo chmod 777 libc.a libhal.a</div><div class=\"line\">cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/</div><div class=\"line\">tar -xvf include.tgz</div><div class=\"line\">sudo chmod 777 include/*</div><div class=\"line\">sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</div></pre></td></tr></table></figure>\n<p>过程日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">--2017-07-30 17:19:01--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.113, 192.30.255.112</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.113|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a [following]</div><div class=\"line\">--2017-07-30 17:19:02--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 2754022 (2.6M) [application/octet-stream]</div><div class=\"line\">Saving to: ‘libc.a’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 2,754,022   4.78KB/s   in 7m 38s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:26:41 (5.87 KB/s) - ‘libc.a’ saved [2754022/2754022]</div><div class=\"line\"></div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">--2017-07-30 17:27:29--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.112|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a [following]</div><div class=\"line\">--2017-07-30 17:27:30--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 347624 (339K) [application/octet-stream]</div><div class=\"line\">Saving to: ‘libhal.a’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 347,624     15.1KB/s   in 24s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:27:57 (13.9 KB/s) - ‘libhal.a’ saved [347624/347624]</div><div class=\"line\"></div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">--2017-07-30 17:28:07--  https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.112|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz [following]</div><div class=\"line\">--2017-07-30 17:28:08--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 979111 (956K) [application/octet-stream]</div><div class=\"line\">Saving to: ‘include.tgz’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 979,111     75.2KB/s   in 10s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:28:19 (93.5 KB/s) - ‘include.tgz’ saved [979111/979111]</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">include.tgz  libc.a  libhal.a  xtensa-lx106-elf</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod -R u+x+r+w xtensa-lx106-elf/</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod 777 include/*</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</div></pre></td></tr></table></figure></p>\n<h3 id=\"第六步，添加编译工具到环境变量\"><a href=\"#第六步，添加编译工具到环境变量\" class=\"headerlink\" title=\"第六步，添加编译工具到环境变量\"></a>第六步，添加编译工具到环境变量</h3><ul>\n<li>把生成的编译器工具下的bin路径添加到环境变量中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">include  include.tgz  libc.a  libhal.a  xtensa-lx106-elf</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ echo &quot;export PATH=~/esptool/buildTool/crosstool-NG/builds/xtensa-lx106-elf/bin:$PATH&quot; &gt;&gt;~/.profile</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ source ~/.profile</div></pre></td></tr></table></figure>\n<h3 id=\"编译验证\"><a href=\"#编译验证\" class=\"headerlink\" title=\"编译验证\"></a>编译验证</h3><p>成功~<br><img src=\"http://static.zybuluo.com/AlexLin/j8khwtatkzace5rfnt527r7l/image.png\" alt=\"image.png-67.8kB\"></p>\n<h3 id=\"编译好编译工具\"><a href=\"#编译好编译工具\" class=\"headerlink\" title=\"编译好编译工具\"></a>编译好编译工具</h3><p>如果你不想走以上的流程，那么可以使用我编译好的，这个编译器可以在64位是Ubuntu1402上运行。</p>\n<p>下载链接：<a href=\"http://pan.baidu.com/s/1jHLNQTo\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1jHLNQTo</a> 密码：s70o</p>\n<p>下载完成之后，参考<strong>第六步</strong>，把工具添加到环境变量中去。</p>\n<p><strong>hope you like it~<br>by AlexLin</strong></p>\n","excerpt":"<hr>\n<h3 id=\"为什么要搭建自己平台的编译器\"><a href=\"#为什么要搭建自己平台的编译器\" class=\"headerlink\" title=\"为什么要搭建自己平台的编译器\"></a>为什么要搭建自己平台的编译器</h3><p>在乐鑫的官网上已经有公布了编译好的编译器，:<a href=\"http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2\">http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2</a><br>但是这里的编译器只是适合32位系统上的；<br><img src=\"http://static.zybuluo.com/AlexLin/vp3gfy4adgs6ipmc6gftuaj2/image.png\" alt=\"image.png-39.4kB\"><br>若你的系统是64位的，或者你在其他的平台上，那么就得自己编译生成对应平台的编译器了；<br>下面以64位Ubuntu系统为例子，演示如何编译自己平台的esp8266编译器;</p>","more":"<h3 id=\"Ubuntu-基本信息\"><a href=\"#Ubuntu-基本信息\" class=\"headerlink\" title=\"Ubuntu 基本信息\"></a>Ubuntu 基本信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:/$ uname -a</div><div class=\"line\">Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class=\"line\">alex@alex-virtual-machine:/$ gcc -v</div><div class=\"line\">Using built-in specs.</div><div class=\"line\">COLLECT_GCC=gcc</div><div class=\"line\">COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper</div><div class=\"line\">Target: x86_64-linux-gnu</div><div class=\"line\">Configured with: ../src/configure -v --with-pkgversion=&apos;Ubuntu 4.8.4-2ubuntu1~14.04.3&apos; --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu</div><div class=\"line\">Thread model: posix</div><div class=\"line\">gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)</div></pre></td></tr></table></figure>\n<h3 id=\"第一步，安装编译需要的软件包\"><a href=\"#第一步，安装编译需要的软件包\" class=\"headerlink\" title=\"第一步，安装编译需要的软件包\"></a>第一步，安装编译需要的软件包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git autoconf build-essential gperf bison flex texinfo libtool libncurses5-dev wget gawk libc6-dev-amd64 python-serial libexpat-dev</div></pre></td></tr></table></figure>\n<h3 id=\"第二步，下载编译器源码\"><a href=\"#第二步，下载编译器源码\" class=\"headerlink\" title=\"第二步，下载编译器源码\"></a>第二步，下载编译器源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建源码目录</div><div class=\"line\">cd ~/</div><div class=\"line\">mkdir esptool/buildTool</div><div class=\"line\">cd esptool/buildTool</div><div class=\"line\"># 下载源码</div><div class=\"line\">git clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>一定要注意下载的是 lx106 分支的代码，因为ESP8266内置Tensilical L106 32bit微处理器</strong></p>\n</blockquote>\n<h3 id=\"第三部，生成配置文件\"><a href=\"#第三部，生成配置文件\" class=\"headerlink\" title=\"第三部，生成配置文件\"></a>第三部，生成配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd crosstool-NG</div><div class=\"line\">#生成.configure</div><div class=\"line\">./bootstrap</div><div class=\"line\">#将检查依赖文件包，并通过--prefix配置安装路径为当前目录</div><div class=\"line\">#若有提示确实的依赖文件，解决方法：sudo apt-get install libtool</div><div class=\"line\">./configure --prefix=`pwd`</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">./ct-ng xtensa-lx106-elf</div></pre></td></tr></table></figure>\n<p>运行过程日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./bootstrap</div><div class=\"line\">Running autoconf...</div><div class=\"line\">Done. You may now run:</div><div class=\"line\">    ./configure</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./configure --prefix=`pwd`</div><div class=\"line\">checking build system type... x86_64-unknown-linux-gnu</div><div class=\"line\">checking host system type... x86_64-unknown-linux-gnu</div><div class=\"line\">checking for a BSD-compatible install... /usr/bin/install -c</div><div class=\"line\">checking for grep that handles long lines and -e... /bin/grep</div><div class=\"line\">checking for egrep... /bin/grep -E</div><div class=\"line\">checking for a sed that does not truncate output... /bin/sed</div><div class=\"line\">checking whether sed understands -r -i -e... yes</div><div class=\"line\">checking whether ln -s works... yes</div><div class=\"line\">checking for gcc... gcc</div><div class=\"line\">checking whether the C compiler works... yes</div><div class=\"line\">checking for C compiler default output file name... a.out</div><div class=\"line\">checking for suffix of executables...</div><div class=\"line\">checking whether we are cross compiling... no</div><div class=\"line\">checking for suffix of object files... o</div><div class=\"line\">checking whether we are using the GNU C compiler... yes</div><div class=\"line\">checking whether gcc accepts -g... yes</div><div class=\"line\">checking for gcc option to accept ISO C89... none needed</div><div class=\"line\">checking how to run the C preprocessor... gcc -E</div><div class=\"line\">checking for ranlib... ranlib</div><div class=\"line\">checking for gobjcopy... no</div><div class=\"line\">checking for objcopy... objcopy</div><div class=\"line\">checking for absolute path to objcopy... /usr/bin/objcopy</div><div class=\"line\">checking for gobjdump... no</div><div class=\"line\">checking for objdump... objdump</div><div class=\"line\">checking for absolute path to objdump... /usr/bin/objdump</div><div class=\"line\">checking for greadelf... no</div><div class=\"line\">checking for readelf... readelf</div><div class=\"line\">checking for absolute path to readelf... /usr/bin/readelf</div><div class=\"line\">checking for gperf... gperf</div><div class=\"line\">checking for absolute path to gperf... /usr/bin/gperf</div><div class=\"line\">checking for bison... bison</div><div class=\"line\">checking for flex... flex</div><div class=\"line\">checking for makeinfo... makeinfo</div><div class=\"line\">checking for cut... cut</div><div class=\"line\">checking for stat... stat</div><div class=\"line\">checking for readlink... readlink</div><div class=\"line\">checking for wget... wget</div><div class=\"line\">checking for tar... tar</div><div class=\"line\">checking for gzip... gzip</div><div class=\"line\">checking for bzip2... bzip2</div><div class=\"line\">checking for patch... /usr/bin/patch</div><div class=\"line\">checking for bash &gt;= 3.1... /bin/bash</div><div class=\"line\">checking for GNU awk... /usr/bin/gawk</div><div class=\"line\">checking for GNU make &gt;= 3.80... /usr/bin/make</div><div class=\"line\">checking whether /usr/bin/make sets $(MAKE)... yes</div><div class=\"line\">checking for make 3.81... yes</div><div class=\"line\">checking for GNU libtool &gt;= 1.5.26... /usr/bin/libtool</div><div class=\"line\">checking for GNU libtool &gt;= 1.5.26... /usr/bin/libtool</div><div class=\"line\">checking for GNU libtoolize &gt;= 1.5.26... /usr/bin/libtoolize</div><div class=\"line\">checking for GNU automake &gt;= 1.10... /usr/bin/automake</div><div class=\"line\">checking for xz... xz</div><div class=\"line\">checking for cvs... no</div><div class=\"line\">checking for svn... no</div><div class=\"line\">checking for inline... inline</div><div class=\"line\">checking for ANSI C header files... yes</div><div class=\"line\">checking for sys/types.h... yes</div><div class=\"line\">checking for sys/stat.h... yes</div><div class=\"line\">checking for stdlib.h... yes</div><div class=\"line\">checking for string.h... yes</div><div class=\"line\">checking for memory.h... yes</div><div class=\"line\">checking for strings.h... yes</div><div class=\"line\">checking for inttypes.h... yes</div><div class=\"line\">checking for stdint.h... yes</div><div class=\"line\">checking for unistd.h... yes</div><div class=\"line\">checking for stdlib.h... (cached) yes</div><div class=\"line\">checking for GNU libc compatible malloc... yes</div><div class=\"line\">checking for stdlib.h... (cached) yes</div><div class=\"line\">checking for GNU libc compatible realloc... yes</div><div class=\"line\">checking for size_t... yes</div><div class=\"line\">checking for working alloca.h... yes</div><div class=\"line\">checking for alloca... yes</div><div class=\"line\">checking libintl.h usability... yes</div><div class=\"line\">checking libintl.h presence... yes</div><div class=\"line\">checking for libintl.h... yes</div><div class=\"line\">checking whether gettext is declared... yes</div><div class=\"line\">checking ncurses/ncurses.h usability... no</div><div class=\"line\">checking ncurses/ncurses.h presence... no</div><div class=\"line\">checking for ncurses/ncurses.h... no</div><div class=\"line\">checking ncurses/curses.h usability... no</div><div class=\"line\">checking ncurses/curses.h presence... no</div><div class=\"line\">checking for ncurses/curses.h... no</div><div class=\"line\">checking ncursesw/curses.h usability... no</div><div class=\"line\">checking ncursesw/curses.h presence... no</div><div class=\"line\">checking for ncursesw/curses.h... no</div><div class=\"line\">checking ncurses.h usability... yes</div><div class=\"line\">checking ncurses.h presence... yes</div><div class=\"line\">checking for ncurses.h... yes</div><div class=\"line\">checking for library containing initscr... -lncurses</div><div class=\"line\">configure: creating ./config.status</div><div class=\"line\">config.status: creating Makefile</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make</div><div class=\"line\">  SED    &apos;ct-ng&apos;</div><div class=\"line\">  SED    &apos;scripts/crosstool-NG.sh&apos;</div><div class=\"line\">  SED    &apos;scripts/saveSample.sh&apos;</div><div class=\"line\">  SED    &apos;scripts/showTuple.sh&apos;</div><div class=\"line\">  GEN    &apos;config/configure.in&apos;</div><div class=\"line\">  GEN    &apos;paths.mk&apos;</div><div class=\"line\">  GEN    &apos;paths.sh&apos;</div><div class=\"line\">  SED    &apos;docs/ct-ng.1&apos;</div><div class=\"line\">  GZIP   &apos;docs/ct-ng.1.gz&apos;</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make install</div><div class=\"line\">  GEN    &apos;config/configure.in&apos;</div><div class=\"line\">  GEN    &apos;paths.mk&apos;</div><div class=\"line\">  GEN    &apos;paths.sh&apos;</div><div class=\"line\">  INST    &apos;ct-ng&apos;</div><div class=\"line\">  INSTDIR &apos;config/&apos;</div><div class=\"line\">  INSTDIR &apos;contrib/&apos;</div><div class=\"line\">  INSTDIR &apos;patches/&apos;</div><div class=\"line\">  INSTDIR &apos;scripts/&apos;</div><div class=\"line\">  INST    &apos;steps.mk&apos;</div><div class=\"line\">  INST    &apos;paths&apos;</div><div class=\"line\">  INSTDIR &apos;samples/&apos;</div><div class=\"line\">  INST    &apos;kconfig/&apos;</div><div class=\"line\">  INST    &apos;docs/*.txt&apos;</div><div class=\"line\">  INST    &apos;ct-ng.1.gz&apos;</div><div class=\"line\"></div><div class=\"line\">For auto-completion, do not forget to install &apos;ct-ng.comp&apos; into</div><div class=\"line\">your bash completion directory (usually /etc/bash_completion.d)</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng xtensa-lx106-elf</div><div class=\"line\">  CONF  config/config.in</div><div class=\"line\">#</div><div class=\"line\"># configuration saved</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">Initially reported by: Max Filippov &lt;jcmvbkbc@gmail.com&gt;</div><div class=\"line\">URL: http://www.esp8266.com/viewtopic.php?f=9&amp;t=224</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">WARNING! This sample may enable experimental features.</div><div class=\"line\">         Please be sure to review the configuration prior</div><div class=\"line\">         to building and using your toolchain!</div><div class=\"line\">Now, you have been warned!</div><div class=\"line\"></div><div class=\"line\">***********************************************************</div><div class=\"line\"></div><div class=\"line\">Now configured for &quot;xtensa-lx106-elf&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"第四步，修改crosstool-NG配置-amp-编译\"><a href=\"#第四步，修改crosstool-NG配置-amp-编译\" class=\"headerlink\" title=\"第四步，修改crosstool_NG配置&amp;编译\"></a>第四步，修改crosstool_NG配置&amp;编译</h3><ul>\n<li>在crosstool-NG目录下执行./ct-ng menuconfig进行配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ct-ng menuconfig</div></pre></td></tr></table></figure>\n<p><img src=\"http://static.zybuluo.com/AlexLin/ulwtccvkik8a6t1m8861g9kt/image.png\" alt=\"image.png-87.3kB\"></p>\n<ul>\n<li>配置多线程编译<br>“Paths and misc options”-&gt;“Number of parallel jobs”</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/AlexLin/kayiaw7ks1gph5eebwfv6i2w/image.png\" alt=\"image.png-128.4kB\"></p>\n<ul>\n<li>保存编译中间步骤<br>“Paths and misc options”-&gt;“Debug crosstool-NG”-&gt;“Save intermediate steps”</li>\n</ul>\n<p><img src=\"http://static.zybuluo.com/AlexLin/6f1aygjx6rtuolnell8m8g1b/image.png\" alt=\"image.png-141.1kB\"></p>\n<ul>\n<li>编译交叉编译工具(<strong>这个过程比较久，我编译了33分钟，要耐心等待~~~</strong>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ct-ng build</div></pre></td></tr></table></figure>\n<p>运行日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng build</div><div class=\"line\">[INFO ]  Performing some trivial sanity checks</div><div class=\"line\">[INFO ]  Build started 20170730.163954</div><div class=\"line\">[INFO ]  Building environment variables</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Retrieving needed toolchain components&apos; tarballs</div><div class=\"line\">[INFO ]  Retrieving needed toolchain components&apos; tarballs: done in 0.15s (at 00:17)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Extracting and patching toolchain components</div><div class=\"line\">[INFO ]  Extracting and patching toolchain components: done in 0.88s (at 00:18)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc_check_config&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;companion_libs_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;companion_libs_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing GMP for host</div><div class=\"line\">[INFO ]  Installing GMP for host: done in 139.49s (at 02:38)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing MPFR for host</div><div class=\"line\">[INFO ]  Installing MPFR for host: done in 51.10s (at 03:29)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing ISL for host</div><div class=\"line\">[INFO ]  Installing ISL for host: done in 109.78s (at 05:19)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing CLooG for host</div><div class=\"line\">[INFO ]  Installing CLooG for host: done in 19.59s (at 05:39)</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing MPC for host</div><div class=\"line\">[INFO ]  Installing MPC for host: done in 21.96s (at 06:01)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing binutils for host</div><div class=\"line\">[INFO ]  Installing binutils for host: done in 209.94s (at 09:32)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_core_pass_1&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;kernel_headers&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc_start_files&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_core_pass_2&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libc&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_for_build&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;cc_for_host&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing final compiler</div><div class=\"line\">[INFO ]  Installing final compiler: done in 965.90s (at 26:12)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;libelf_for_target&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;binutils_for_target&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;debug&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Installing cross-gdb</div><div class=\"line\">[INFO ]  Installing cross-gdb: done in 336.23s (at 32:36)</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;test_suite&apos;...</div><div class=\"line\">[INFO ]  Saving state to restart at step &apos;finish&apos;...</div><div class=\"line\">[INFO ]  =================================================================</div><div class=\"line\">[INFO ]  Cleaning-up the toolchain&apos;s directory</div><div class=\"line\">[INFO ]    Stripping all toolchain executables</div><div class=\"line\">[INFO ]  Cleaning-up the toolchain&apos;s directory: done in 2.31s (at 33:07)</div><div class=\"line\">[INFO ]  Build completed at 20170730.171300</div><div class=\"line\">[INFO ]  (elapsed: 33:06.05)</div><div class=\"line\">[INFO ]  Finishing installation (may take a few seconds)...</div><div class=\"line\">[33:07] / alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$</div></pre></td></tr></table></figure></p>\n<p><strong>编译生成文件在根目录下的builds下，文件名为xtensa-lx106-elf</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">xtensa-lx106-elf</div></pre></td></tr></table></figure></p>\n<h3 id=\"第五步，添加esp8266-依赖头文件\"><a href=\"#第五步，添加esp8266-依赖头文件\" class=\"headerlink\" title=\"第五步，添加esp8266 依赖头文件\"></a>第五步，添加esp8266 依赖头文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#编译ESP8266必须添加以下库文件，不然就会报找不到相应库（如： xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: cannot find -lhal）</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">## 设置可读可写可执行权限</div><div class=\"line\">sudo chmod -R u+x+r+w xtensa-lx106-elf/</div><div class=\"line\">sudo chmod 777 libc.a libhal.a</div><div class=\"line\">cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/</div><div class=\"line\">tar -xvf include.tgz</div><div class=\"line\">sudo chmod 777 include/*</div><div class=\"line\">sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</div></pre></td></tr></table></figure>\n<p>过程日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">--2017-07-30 17:19:01--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.113, 192.30.255.112</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.113|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a [following]</div><div class=\"line\">--2017-07-30 17:19:02--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 2754022 (2.6M) [application/octet-stream]</div><div class=\"line\">Saving to: ‘libc.a’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 2,754,022   4.78KB/s   in 7m 38s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:26:41 (5.87 KB/s) - ‘libc.a’ saved [2754022/2754022]</div><div class=\"line\"></div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">--2017-07-30 17:27:29--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.112|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a [following]</div><div class=\"line\">--2017-07-30 17:27:30--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 347624 (339K) [application/octet-stream]</div><div class=\"line\">Saving to: ‘libhal.a’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 347,624     15.1KB/s   in 24s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:27:57 (13.9 KB/s) - ‘libhal.a’ saved [347624/347624]</div><div class=\"line\"></div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">--2017-07-30 17:28:07--  https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz</div><div class=\"line\">Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113</div><div class=\"line\">Connecting to github.com (github.com)|192.30.255.112|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 302 Found</div><div class=\"line\">Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz [following]</div><div class=\"line\">--2017-07-30 17:28:08--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz</div><div class=\"line\">Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133</div><div class=\"line\">Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 979111 (956K) [application/octet-stream]</div><div class=\"line\">Saving to: ‘include.tgz’</div><div class=\"line\"></div><div class=\"line\">100%[=====================================================================================================&gt;] 979,111     75.2KB/s   in 10s</div><div class=\"line\"></div><div class=\"line\">2017-07-30 17:28:19 (93.5 KB/s) - ‘include.tgz’ saved [979111/979111]</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">include.tgz  libc.a  libhal.a  xtensa-lx106-elf</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod -R u+x+r+w xtensa-lx106-elf/</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod 777 include/*</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</div></pre></td></tr></table></figure></p>\n<h3 id=\"第六步，添加编译工具到环境变量\"><a href=\"#第六步，添加编译工具到环境变量\" class=\"headerlink\" title=\"第六步，添加编译工具到环境变量\"></a>第六步，添加编译工具到环境变量</h3><ul>\n<li>把生成的编译器工具下的bin路径添加到环境变量中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls</div><div class=\"line\">include  include.tgz  libc.a  libhal.a  xtensa-lx106-elf</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ echo &quot;export PATH=~/esptool/buildTool/crosstool-NG/builds/xtensa-lx106-elf/bin:$PATH&quot; &gt;&gt;~/.profile</div><div class=\"line\">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ source ~/.profile</div></pre></td></tr></table></figure>\n<h3 id=\"编译验证\"><a href=\"#编译验证\" class=\"headerlink\" title=\"编译验证\"></a>编译验证</h3><p>成功~<br><img src=\"http://static.zybuluo.com/AlexLin/j8khwtatkzace5rfnt527r7l/image.png\" alt=\"image.png-67.8kB\"></p>\n<h3 id=\"编译好编译工具\"><a href=\"#编译好编译工具\" class=\"headerlink\" title=\"编译好编译工具\"></a>编译好编译工具</h3><p>如果你不想走以上的流程，那么可以使用我编译好的，这个编译器可以在64位是Ubuntu1402上运行。</p>\n<p>下载链接：<a href=\"http://pan.baidu.com/s/1jHLNQTo\">http://pan.baidu.com/s/1jHLNQTo</a> 密码：s70o</p>\n<p>下载完成之后，参考<strong>第六步</strong>，把工具添加到环境变量中去。</p>\n<p><strong>hope you like it~<br>by AlexLin</strong></p>"},{"title":"神奇的世界","date":"2888-03-27T17:33:11.000Z","top":1,"_content":"\n# [神奇的世界][2]\n- - -\n\n![神奇][1]\n<!-- [![alt text](http://path/to/img.jpg \"title\")](你的链接地址) -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>\n\n<!-- {% dplayer \"url=http://devtest.qiniudn.com/若能绽放光芒.mp4\" \"api=http://dplayer.daoapp.io\" \"pic=http://devtest.qiniudn.com/若能绽放光芒.png\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %} -->\n\n\n[1]: http://upload-images.jianshu.io/upload_images/1736256-c0db86d5f7d8c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"神奇的世界\"\n[2]: http://chuangzaoshi.com/","source":"_posts/新奇.md","raw":"---\ntitle: 神奇的世界\ndate: 2888-03-28 01:33:11\ntags: [新奇,音乐,🎵]\ncategories: 新奇\ntop: 1\n---\n\n# [神奇的世界][2]\n- - -\n\n![神奇][1]\n<!-- [![alt text](http://path/to/img.jpg \"title\")](你的链接地址) -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>\n\n<!-- {% dplayer \"url=http://devtest.qiniudn.com/若能绽放光芒.mp4\" \"api=http://dplayer.daoapp.io\" \"pic=http://devtest.qiniudn.com/若能绽放光芒.png\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %} -->\n\n\n[1]: http://upload-images.jianshu.io/upload_images/1736256-c0db86d5f7d8c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 \"神奇的世界\"\n[2]: http://chuangzaoshi.com/","slug":"新奇","published":1,"updated":"2017-07-31T15:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt85001atns16svlmcp9","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"神奇的世界\"><a href=\"#神奇的世界\" class=\"headerlink\" title=\"神奇的世界\"></a><a href=\"http://chuangzaoshi.com/\" target=\"_blank\" rel=\"external\">神奇的世界</a></h1><hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-c0db86d5f7d8c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"神奇\" title=\"神奇的世界\"><br><!-- [![alt text](http://path/to/img.jpg \"title\")](你的链接地址) --></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>\n\n<!-- <div id=\"dplayer0\" class=\"dplayer\" style=\"margin-bottom: 20px;\"></div><script>var dplayer0 = new DPlayer({\"element\":document.getElementById(\"dplayer0\"),\"autoplay\":false,\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://devtest.qiniudn.com/若能绽放光芒.mp4\",\"pic\":\"http://devtest.qiniudn.com/若能绽放光芒.png\"},\"danmaku\":{\"api\":\"http://dplayer.daoapp.io\",\"id\":\"9E2E3368B56CDBB4\",\"token\":\"tokendemo\"}});</script> –&gt;\n-->","excerpt":"","more":"<h1 id=\"神奇的世界\"><a href=\"#神奇的世界\" class=\"headerlink\" title=\"神奇的世界\"></a><a href=\"http://chuangzaoshi.com/\">神奇的世界</a></h1><hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1736256-c0db86d5f7d8c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"神奇\" title=\"神奇的世界\"><br><!-- [![alt text](http://path/to/img.jpg \"title\")](你的链接地址) --></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66\"></iframe>\n\n<!-- <div id=\"dplayer0\" class=\"dplayer\" style=\"margin-bottom: 20px;\"></div><script>var dplayer0 = new DPlayer({\"element\":document.getElementById(\"dplayer0\"),\"autoplay\":false,\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://devtest.qiniudn.com/若能绽放光芒.mp4\",\"pic\":\"http://devtest.qiniudn.com/若能绽放光芒.png\"},\"danmaku\":{\"api\":\"http://dplayer.daoapp.io\",\"id\":\"9E2E3368B56CDBB4\",\"token\":\"tokendemo\"}});</script> –&gt;\n"},{"title":"编辑器介绍","date":"2017-06-06T17:00:11.000Z","_content":"\n# Sublime\n- - -\n\n## Sublime Text主题推荐：Seti_UI\n\n### 简介\n- -  -\nSeti_UI 这款主题最大的特点是能够显示各种文件类型的图标，小图标不仅看起来漂亮，而且大大增加了辨识度，能够轻松的找到对应的文件。\n\n<!--more-->\n### 使用\n- - -\n**1. 安装**\n在 Package Control 安装包命令行输入 Seti_UI 回车即可。\n\n**2. 手动安装**\n- [Download the .zip](https://github.com/ctf0/Seti_ST3/archive/master.zip).\n- Unzip and rename the folder to Seti_UI\n- Copy the folder into Packages directory, which you can find using the menu item Preferences -> Browse Packages... in Sublime Text.\n\n**3. 启用**\n在 Preferences -> Settings -> User 中加入：\n```\n\"theme\": \"Seti.sublime-theme\"\n```\n或者\n```\n\"theme\": \"Seti_orig.sublime-theme\"\n```","source":"_posts/编辑器介绍.md","raw":"---\ntitle: 编辑器介绍\ndate: 2017-06-07 01:00:11\ntags: [IDE,工具]\n---\n\n# Sublime\n- - -\n\n## Sublime Text主题推荐：Seti_UI\n\n### 简介\n- -  -\nSeti_UI 这款主题最大的特点是能够显示各种文件类型的图标，小图标不仅看起来漂亮，而且大大增加了辨识度，能够轻松的找到对应的文件。\n\n<!--more-->\n### 使用\n- - -\n**1. 安装**\n在 Package Control 安装包命令行输入 Seti_UI 回车即可。\n\n**2. 手动安装**\n- [Download the .zip](https://github.com/ctf0/Seti_ST3/archive/master.zip).\n- Unzip and rename the folder to Seti_UI\n- Copy the folder into Packages directory, which you can find using the menu item Preferences -> Browse Packages... in Sublime Text.\n\n**3. 启用**\n在 Preferences -> Settings -> User 中加入：\n```\n\"theme\": \"Seti.sublime-theme\"\n```\n或者\n```\n\"theme\": \"Seti_orig.sublime-theme\"\n```","slug":"编辑器介绍","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt86001ctns1jmqc1uo2","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h1><hr>\n<h2 id=\"Sublime-Text主题推荐：Seti-UI\"><a href=\"#Sublime-Text主题推荐：Seti-UI\" class=\"headerlink\" title=\"Sublime Text主题推荐：Seti_UI\"></a>Sublime Text主题推荐：Seti_UI</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><hr>\n<p>Seti_UI 这款主题最大的特点是能够显示各种文件类型的图标，小图标不仅看起来漂亮，而且大大增加了辨识度，能够轻松的找到对应的文件。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p><strong>1. 安装</strong><br>在 Package Control 安装包命令行输入 Seti_UI 回车即可。</p>\n<p><strong>2. 手动安装</strong></p>\n<ul>\n<li><a href=\"https://github.com/ctf0/Seti_ST3/archive/master.zip\" target=\"_blank\" rel=\"external\">Download the .zip</a>.</li>\n<li>Unzip and rename the folder to Seti_UI</li>\n<li>Copy the folder into Packages directory, which you can find using the menu item Preferences -&gt; Browse Packages… in Sublime Text.</li>\n</ul>\n<p><strong>3. 启用</strong><br>在 Preferences -&gt; Settings -&gt; User 中加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;theme&quot;: &quot;Seti.sublime-theme&quot;</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;theme&quot;: &quot;Seti_orig.sublime-theme&quot;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h1 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h1><hr>\n<h2 id=\"Sublime-Text主题推荐：Seti-UI\"><a href=\"#Sublime-Text主题推荐：Seti-UI\" class=\"headerlink\" title=\"Sublime Text主题推荐：Seti_UI\"></a>Sublime Text主题推荐：Seti_UI</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><hr>\n<p>Seti_UI 这款主题最大的特点是能够显示各种文件类型的图标，小图标不仅看起来漂亮，而且大大增加了辨识度，能够轻松的找到对应的文件。</p>","more":"<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p><strong>1. 安装</strong><br>在 Package Control 安装包命令行输入 Seti_UI 回车即可。</p>\n<p><strong>2. 手动安装</strong></p>\n<ul>\n<li><a href=\"https://github.com/ctf0/Seti_ST3/archive/master.zip\">Download the .zip</a>.</li>\n<li>Unzip and rename the folder to Seti_UI</li>\n<li>Copy the folder into Packages directory, which you can find using the menu item Preferences -&gt; Browse Packages… in Sublime Text.</li>\n</ul>\n<p><strong>3. 启用</strong><br>在 Preferences -&gt; Settings -&gt; User 中加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;theme&quot;: &quot;Seti.sublime-theme&quot;</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;theme&quot;: &quot;Seti_orig.sublime-theme&quot;</div></pre></td></tr></table></figure></p>"},{"title":"微信硬件","date":"2017-04-06T14:42:11.000Z","_content":"\n[微信硬件平台][1]\n\n\n[1]: http://iot.weixin.qq.com/wiki/new/index.html?page=2-1","source":"_posts/微信硬件.md","raw":"---\ntitle: 微信硬件\ndate: 2017-04-06 22:42:11\ntags: [微信,硬件]\n---\n\n[微信硬件平台][1]\n\n\n[1]: http://iot.weixin.qq.com/wiki/new/index.html?page=2-1","slug":"微信硬件","published":1,"updated":"2017-08-01T16:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uhjt87001ftns188u2xkjz","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"http://iot.weixin.qq.com/wiki/new/index.html?page=2-1\" target=\"_blank\" rel=\"external\">微信硬件平台</a></p>\n","excerpt":"","more":"<p><a href=\"http://iot.weixin.qq.com/wiki/new/index.html?page=2-1\">微信硬件平台</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5uhjt770005tns1gt9d29f4","category_id":"cj5uhjt7d0008tns1rrjlif8v","_id":"cj5uhjt7l000gtns1aishxi7p"},{"post_id":"cj5uhjt7l000htns14fz5p17z","category_id":"cj5uhjt7p000ltns15lcpm9le","_id":"cj5uhjt7w000utns1dbdon6ub"},{"post_id":"cj5uhjt7w000vtns16fmzbqup","category_id":"cj5uhjt7p000ltns15lcpm9le","_id":"cj5uhjt7y000ztns13zlrtj3d"},{"post_id":"cj5uhjt7y000ytns195yxb8i1","category_id":"cj5uhjt7p000ltns15lcpm9le","_id":"cj5uhjt810014tns15dzwzpzc"},{"post_id":"cj5uhjt85001atns16svlmcp9","category_id":"cj5uhjt87001etns1pr2da3nq","_id":"cj5uhjt8d001mtns1i65xoirl"}],"PostTag":[{"post_id":"cj5uhjt6v0000tns1qrzf8ols","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt7j000ftns1zvdpmrif"},{"post_id":"cj5uhjt6v0000tns1qrzf8ols","tag_id":"cj5uhjt7f000atns1jvfi492t","_id":"cj5uhjt7m000itns1mg2cluwg"},{"post_id":"cj5uhjt700002tns10v3w50ov","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt7t000ptns1nuv4s25g"},{"post_id":"cj5uhjt700002tns10v3w50ov","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt7u000rtns1jz8nkwat"},{"post_id":"cj5uhjt770005tns1gt9d29f4","tag_id":"cj5uhjt7s000ntns1y8aczqg1","_id":"cj5uhjt810013tns1stq5hau7"},{"post_id":"cj5uhjt770005tns1gt9d29f4","tag_id":"cj5uhjt7v000stns1hcszlt17","_id":"cj5uhjt830016tns1x97guh1r"},{"post_id":"cj5uhjt770005tns1gt9d29f4","tag_id":"cj5uhjt7x000xtns18sj4k49u","_id":"cj5uhjt840019tns1clvnx49t"},{"post_id":"cj5uhjt7a0007tns17x44tru5","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt87001dtns1vykdl6ej"},{"post_id":"cj5uhjt7a0007tns17x44tru5","tag_id":"cj5uhjt830017tns1dz37665l","_id":"cj5uhjt8a001gtns1gjfhr1p1"},{"post_id":"cj5uhjt7e0009tns1lhvd3kzw","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt8b001itns1drao0ugz"},{"post_id":"cj5uhjt7e0009tns1lhvd3kzw","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt8d001jtns17c4adh06"},{"post_id":"cj5uhjt7f000btns1ahs7mifi","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt8d001ltns14dv4ywyk"},{"post_id":"cj5uhjt7f000btns1ahs7mifi","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt8e001ntns1akp1o5d9"},{"post_id":"cj5uhjt7g000ctns135enbvfu","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt8e001ptns1f95yucil"},{"post_id":"cj5uhjt7g000ctns135enbvfu","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt8f001qtns188af1m5j"},{"post_id":"cj5uhjt7i000etns1nyg97ca5","tag_id":"cj5uhjt8e001otns16gnavmjr","_id":"cj5uhjt8g001stns1q1ehmh8s"},{"post_id":"cj5uhjt7l000htns14fz5p17z","tag_id":"cj5uhjt8f001rtns1due1vus6","_id":"cj5uhjt8h001utns1ezpacwka"},{"post_id":"cj5uhjt7o000ktns1zv2z1gmu","tag_id":"cj5uhjt8g001ttns1cvtomqi0","_id":"cj5uhjt8h001wtns1mvbqochj"},{"post_id":"cj5uhjt7o000ktns1zv2z1gmu","tag_id":"cj5uhjt7f000atns1jvfi492t","_id":"cj5uhjt8h001xtns1k2bwztgc"},{"post_id":"cj5uhjt7q000mtns16bqdd04k","tag_id":"cj5uhjt8h001vtns1mfulvvxc","_id":"cj5uhjt8i0020tns19py96xlt"},{"post_id":"cj5uhjt7q000mtns16bqdd04k","tag_id":"cj5uhjt7v000stns1hcszlt17","_id":"cj5uhjt8j0021tns1jyfm31tr"},{"post_id":"cj5uhjt7s000otns1xdvsq6v3","tag_id":"cj5uhjt8i001ztns1xz8kczaa","_id":"cj5uhjt8k0024tns102xgvap0"},{"post_id":"cj5uhjt7s000otns1xdvsq6v3","tag_id":"cj5uhjt8j0022tns1uy677fh0","_id":"cj5uhjt8l0025tns1d7ql9b2y"},{"post_id":"cj5uhjt7u000qtns124myjlcb","tag_id":"cj5uhjt8i001ztns1xz8kczaa","_id":"cj5uhjt8n0029tns1jc34xtny"},{"post_id":"cj5uhjt7u000qtns124myjlcb","tag_id":"cj5uhjt8j0022tns1uy677fh0","_id":"cj5uhjt8o002atns1xw1opk39"},{"post_id":"cj5uhjt7u000qtns124myjlcb","tag_id":"cj5uhjt8m0027tns13nk3infb","_id":"cj5uhjt8p002ctns13q678mmv"},{"post_id":"cj5uhjt7v000ttns13yatke2e","tag_id":"cj5uhjt8i001ztns1xz8kczaa","_id":"cj5uhjt8p002etns1gzp9qvtb"},{"post_id":"cj5uhjt7v000ttns13yatke2e","tag_id":"cj5uhjt8o002btns17o15842s","_id":"cj5uhjt8q002ftns1j9sda6g4"},{"post_id":"cj5uhjt7w000vtns16fmzbqup","tag_id":"cj5uhjt8p002dtns1vn6f1u0y","_id":"cj5uhjt8r002itns17uxu5heg"},{"post_id":"cj5uhjt7w000vtns16fmzbqup","tag_id":"cj5uhjt8q002gtns1hwvvev4v","_id":"cj5uhjt8s002jtns1z9beri8p"},{"post_id":"cj5uhjt7y000ytns195yxb8i1","tag_id":"cj5uhjt8p002dtns1vn6f1u0y","_id":"cj5uhjt8s002mtns1f7b3edol"},{"post_id":"cj5uhjt7y000ytns195yxb8i1","tag_id":"cj5uhjt8s002ktns1rh6ejic8","_id":"cj5uhjt8t002ntns1l9whniat"},{"post_id":"cj5uhjt800012tns1vorm0mel","tag_id":"cj5uhjt7h000dtns1j2vcyf4d","_id":"cj5uhjt8t002ptns1etbapw13"},{"post_id":"cj5uhjt800012tns1vorm0mel","tag_id":"cj5uhjt830017tns1dz37665l","_id":"cj5uhjt8t002qtns16pz292gx"},{"post_id":"cj5uhjt820015tns1sy8txafi","tag_id":"cj5uhjt8t002otns1b7gu1lzd","_id":"cj5uhjt8v002utns1rhx8mzw3"},{"post_id":"cj5uhjt820015tns1sy8txafi","tag_id":"cj5uhjt8t002rtns1vy6e8jt9","_id":"cj5uhjt8v002vtns10kk2y67k"},{"post_id":"cj5uhjt820015tns1sy8txafi","tag_id":"cj5uhjt8u002stns1z6iqag95","_id":"cj5uhjt8w002xtns1pqujgqz5"},{"post_id":"cj5uhjt830018tns1cj0d8vuj","tag_id":"cj5uhjt8t002rtns1vy6e8jt9","_id":"cj5uhjt8x002ztns1mwl0ov74"},{"post_id":"cj5uhjt830018tns1cj0d8vuj","tag_id":"cj5uhjt8v002wtns1dr1egr3b","_id":"cj5uhjt8x0030tns1rgp0iozn"},{"post_id":"cj5uhjt85001atns16svlmcp9","tag_id":"cj5uhjt8w002ytns1mt2t32xb","_id":"cj5uhjt8y0034tns18x19qe4m"},{"post_id":"cj5uhjt85001atns16svlmcp9","tag_id":"cj5uhjt8x0031tns1lmca16lx","_id":"cj5uhjt8y0035tns1o60d66kj"},{"post_id":"cj5uhjt85001atns16svlmcp9","tag_id":"cj5uhjt8y0032tns1qxhfwxkx","_id":"cj5uhjt8y0037tns1veu6ahai"},{"post_id":"cj5uhjt86001ctns1jmqc1uo2","tag_id":"cj5uhjt8y0033tns1o8tbmm3o","_id":"cj5uhjt8z0038tns1h6negl6x"},{"post_id":"cj5uhjt86001ctns1jmqc1uo2","tag_id":"cj5uhjt740004tns196rahow9","_id":"cj5uhjt8z003atns1465oyx3n"},{"post_id":"cj5uhjt87001ftns188u2xkjz","tag_id":"cj5uhjt8y0036tns1z1bg7nud","_id":"cj5uhjt8z003btns1w8y1oc2a"},{"post_id":"cj5uhjt87001ftns188u2xkjz","tag_id":"cj5uhjt8z0039tns1u5ob7dwu","_id":"cj5uhjt8z003ctns1l5sv2znu"}],"Tag":[{"name":"工具","_id":"cj5uhjt740004tns196rahow9"},{"name":"hexo","_id":"cj5uhjt7f000atns1jvfi492t"},{"name":"Linux","_id":"cj5uhjt7h000dtns1j2vcyf4d"},{"name":"无线","_id":"cj5uhjt7s000ntns1y8aczqg1"},{"name":"433MHZ","_id":"cj5uhjt7v000stns1hcszlt17"},{"name":"cc1101","_id":"cj5uhjt7x000xtns18sj4k49u"},{"name":"网络","_id":"cj5uhjt830017tns1dz37665l"},{"name":"lua","_id":"cj5uhjt8e001otns16gnavmjr"},{"name":"PC工具","_id":"cj5uhjt8f001rtns1due1vus6"},{"name":"git","_id":"cj5uhjt8g001ttns1cvtomqi0"},{"name":"SI4432","_id":"cj5uhjt8h001vtns1mfulvvxc"},{"name":"ST","_id":"cj5uhjt8i001ztns1xz8kczaa"},{"name":"STM32","_id":"cj5uhjt8j0022tns1uy677fh0"},{"name":"ADC","_id":"cj5uhjt8m0027tns13nk3infb"},{"name":"STM8","_id":"cj5uhjt8o002btns17o15842s"},{"name":"抓包工具","_id":"cj5uhjt8p002dtns1vn6f1u0y"},{"name":"tcp","_id":"cj5uhjt8q002gtns1hwvvev4v"},{"name":"wireShark","_id":"cj5uhjt8s002ktns1rh6ejic8"},{"name":"WiFi","_id":"cj5uhjt8t002otns1b7gu1lzd"},{"name":"esp8266","_id":"cj5uhjt8t002rtns1vy6e8jt9"},{"name":"esptool","_id":"cj5uhjt8u002stns1z6iqag95"},{"name":"gcc","_id":"cj5uhjt8v002wtns1dr1egr3b"},{"name":"新奇","_id":"cj5uhjt8w002ytns1mt2t32xb"},{"name":"音乐","_id":"cj5uhjt8x0031tns1lmca16lx"},{"name":"🎵","_id":"cj5uhjt8y0032tns1qxhfwxkx"},{"name":"IDE","_id":"cj5uhjt8y0033tns1o8tbmm3o"},{"name":"微信","_id":"cj5uhjt8y0036tns1z1bg7nud"},{"name":"硬件","_id":"cj5uhjt8z0039tns1u5ob7dwu"}]}}